<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Zhenly</title>
  
  <subtitle>Time</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.zhenly.cn/"/>
  <updated>2017-11-17T14:14:10.316Z</updated>
  <id>https://blog.zhenly.cn/</id>
  
  <author>
    <name>ZhenlyChen</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Web | Learning Advanced JavaScript 学习笔记 - 3</title>
    <link href="https://blog.zhenly.cn/2017/11/17/js-learning-3/"/>
    <id>https://blog.zhenly.cn/2017/11/17/js-learning-3/</id>
    <published>2017-11-17T13:55:00.000Z</published>
    <updated>2017-11-17T14:14:10.316Z</updated>
    
    <content type="html"><![CDATA[<p>时隔两天，再次接上一篇博客继续，来Learning Advanced JavaScript</p><a id="more"></a><h2 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h2><h3 id="49-A-basic-closure"><a href="#49-A-basic-closure" class="headerlink" title="#49: A basic closure."></a>#49: A basic closure.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNum</span>(<span class="params">myNum</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> num + myNum; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">assert( addNum(<span class="number">5</span>) == <span class="number">15</span>, <span class="string">"Add two numbers together, one from a closure."</span> );</div></pre></td></tr></table></figure><p>这里说到JavaScript里面闭包的最简单的一种用法，把一个变量固定再函数里面。</p><h3 id="50-But-why-doesn’t-this-work"><a href="#50-But-why-doesn’t-this-work" class="headerlink" title="#50: But why doesn’t this work?"></a>#50: But why doesn’t this work?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addNum</span>(<span class="params">myNum</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> num + myNum; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">num = <span class="number">15</span>; </div><div class="line"> </div><div class="line">assert( addNum(<span class="number">5</span>) == <span class="number">15</span>, <span class="string">"Add two numbers together, one from a closure."</span> );</div></pre></td></tr></table></figure><p>如果把变量改了，那么里面的变量也会跟着改变。</p><h3 id="51-Closures-are-frequently-used-for-callbacks"><a href="#51-Closures-are-frequently-used-for-callbacks" class="headerlink" title="#51: Closures are frequently used for callbacks."></a>#51: Closures are frequently used for callbacks.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> results = jQuery(<span class="string">"#results"</span>).html(<span class="string">"&lt;li&gt;Loading...&lt;/li&gt;"</span>); </div><div class="line"> </div><div class="line">jQuery.get(<span class="string">"test.html"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">html</span>)</span>&#123; </div><div class="line">  results.html( html ); </div><div class="line">  assert( results, <span class="string">"The element to append to, via a closure."</span> ); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>闭包也经常用在回调函数里面，也是常规操作，并没有什么特别的。</p><h3 id="52-They’re-also-useful-for-timers"><a href="#52-They’re-also-useful-for-timers" class="headerlink" title="#52: They’re also useful for timers."></a>#52: They’re also useful for timers.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">if</span> ( count &lt; <span class="number">5</span> ) &#123; </div><div class="line">    log( <span class="string">"Timer call: "</span>, count ); </div><div class="line">    count++; </div><div class="line">  &#125; <span class="keyword">else</span> &#123; </div><div class="line">    assert( count == <span class="number">5</span>, <span class="string">"Count came via a closure, accessed each step."</span> ); </div><div class="line">    assert( timer, <span class="string">"The timer reference is also via a closure."</span> ); </div><div class="line">    clearInterval( timer ); </div><div class="line">  &#125; </div><div class="line">&#125;, <span class="number">100</span>);</div></pre></td></tr></table></figure><p>闭包在计时器里面也很有用，但是通常我们会把闭包用在一个函数里面，防止全局变量的污染。</p><h3 id="53-and-they’re-also-frequently-used-when-attaching-event-listeners"><a href="#53-and-they’re-also-frequently-used-when-attaching-event-listeners" class="headerlink" title="#53: and they’re also frequently used when attaching event listeners."></a>#53: and they’re also frequently used when attaching event listeners.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">1</span>; </div><div class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>); </div><div class="line">elem.innerHTML = <span class="string">"Click me!"</span>; </div><div class="line">elem.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  log( <span class="string">"Click #"</span>, count++ ); </div><div class="line">&#125;; </div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild( elem ); </div><div class="line">assert( elem.parentNode, <span class="string">"Clickable element appended."</span> );</div></pre></td></tr></table></figure><p>这里把闭包用在了Click事件上。一般我们用的话会配合for使用，如果需要每个组件都要自己单独的状态，那么就要注意闭包变量的作用域。通常的做法就是放在一个函数作用域里面并且<strong>立即运行</strong>。就像之前的Web中打地鼠和拼图作业也可能会用到这个。（但也不一定用</p><h3 id="54-Private-properties-using-closures"><a href="#54-Private-properties-using-closures" class="headerlink" title="#54: Private properties, using closures."></a>#54: Private properties, using closures.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> slices = <span class="number">0</span>; </div><div class="line">   </div><div class="line">  <span class="keyword">this</span>.getSlices = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> slices; </div><div class="line">  &#125;; </div><div class="line">  <span class="keyword">this</span>.slice = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    slices++; </div><div class="line">  &#125;; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(); </div><div class="line">ninja.slice(); </div><div class="line">assert( ninja.getSlices() == <span class="number">1</span>, <span class="string">"We're able to access the internal slice data."</span> ); </div><div class="line">assert( ninja.slices === <span class="literal">undefined</span>, <span class="string">"And the private data is inaccessible to us."</span> );</div></pre></td></tr></table></figure><p>闭包一般使用的是私有属性，从外部并不能访问，只能通过自己暴露出来的方法改变。这个就和C里面的类的私有变量比较类似。如果需要一个可以外部访问的变量，只要加上this就好，但是如果只是只读的话建议还是用函数来返回。</p><h3 id="55-QUIZ-What-are-the-values-of-the-variables"><a href="#55-QUIZ-What-are-the-values-of-the-variables" class="headerlink" title="#55: QUIZ: What are the values of the variables?"></a>#55: QUIZ: What are the values of the variables?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runMe</span>(<span class="params">a</span>)</span>&#123;</div><div class="line"> assert( a == ___, <span class="string">"Check the value of a."</span> ); <span class="comment">// 这时传入的变量明显在作用链上比全局变量先找到，因此是6</span></div><div class="line"></div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">innerRun</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   assert( b == ___, <span class="string">"Check the value of b."</span> );<span class="comment">//在调用这个函数的时候，b已经等于7了</span></div><div class="line">   assert( c == ___, <span class="string">"Check the value of c."</span> );<span class="comment">//在调用函数之前，c并没有定义，由于变量提升但赋值不提升，因此为undefined</span></div><div class="line"> &#125;</div><div class="line"></div><div class="line"> <span class="keyword">var</span> b = <span class="number">7</span>;</div><div class="line"> innerRun();</div><div class="line"> <span class="keyword">var</span> c = <span class="number">8</span>;</div><div class="line">&#125;</div><div class="line">runMe(<span class="number">6</span>);</div><div class="line"></div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> d = <span class="number">0</span>; d &lt; <span class="number">3</span>; d++ ) &#123;</div><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">   assert( d == ___, <span class="string">"Check the value of d."</span> ); <span class="comment">// 当函数被调用的时候，d已经是等于3了，因此3次调用都是为3</span></div><div class="line"> &#125;, <span class="number">100</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里有一个问题，刚好解释了闭包中变量的作用域范围。具体解释可以看上面的注释。</p><h3 id="56-The-last-one-is-quite-tricky-we’ll-revisit-it"><a href="#56-The-last-one-is-quite-tricky-we’ll-revisit-it" class="headerlink" title="#56: The last one is quite tricky, we’ll revisit it."></a>#56: The last one is quite tricky, we’ll revisit it.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">runMe</span>(<span class="params">a</span>)</span>&#123; </div><div class="line"> assert( a == <span class="number">6</span>, <span class="string">"Check the value of a."</span> ); </div><div class="line"> </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">innerRun</span>(<span class="params"></span>)</span>&#123; </div><div class="line">   assert( b == <span class="number">7</span>, <span class="string">"Check the value of b."</span> ); </div><div class="line">   assert( c == <span class="literal">undefined</span>, <span class="string">"Check the value of c."</span> ); </div><div class="line"> &#125; </div><div class="line"> </div><div class="line"> <span class="keyword">var</span> b = <span class="number">7</span>; </div><div class="line"> innerRun(); </div><div class="line"> <span class="keyword">var</span> c = <span class="number">8</span>; </div><div class="line">&#125; </div><div class="line">runMe(<span class="number">6</span>); </div><div class="line"> </div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> d = <span class="number">0</span>; d &lt; <span class="number">3</span>; d++ ) &#123; </div><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">   assert( d == <span class="number">3</span>, <span class="string">"Check the value of d."</span> ); </div><div class="line"> &#125;, <span class="number">100</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个是他提供的答案，上面已经逐一解释过了。</p><h2 id="Temporary-Scope"><a href="#Temporary-Scope" class="headerlink" title="Temporary Scope"></a>Temporary Scope</h2><h3 id="58-Self-executing-temporary-function"><a href="#58-Self-executing-temporary-function" class="headerlink" title="#58: Self-executing, temporary, function"></a>#58: Self-executing, temporary, function</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> count = <span class="number">0</span>; </div><div class="line"> </div><div class="line">  <span class="keyword">var</span> timer = setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">if</span> ( count &lt; <span class="number">5</span> ) &#123; </div><div class="line">      log( <span class="string">"Timer call: "</span>, count ); </div><div class="line">      count++; </div><div class="line">    &#125; <span class="keyword">else</span> &#123; </div><div class="line">      assert( count == <span class="number">5</span>, <span class="string">"Count came via a closure, accessed each step."</span> ); </div><div class="line">      assert( timer, <span class="string">"The timer reference is also via a closure."</span> ); </div><div class="line">      clearInterval( timer ); </div><div class="line">    &#125; </div><div class="line">  &#125;, <span class="number">100</span>); </div><div class="line">&#125;)(); </div><div class="line"> </div><div class="line">assert( <span class="keyword">typeof</span> count == <span class="string">"undefined"</span>, <span class="string">"count doesn't exist outside the wrapper"</span> ); </div><div class="line">assert( <span class="keyword">typeof</span> timer == <span class="string">"undefined"</span>, <span class="string">"neither does timer"</span> );</div></pre></td></tr></table></figure><p>这里涉及到变量的作用域范围，由于var定义的变量是在当前函数作用域是有效的（ES6中的let是块级作用域）因此离开了这个函数，外部就无法访问了。</p><h3 id="59-Now-we-can-handle-closures-and-looping"><a href="#59-Now-we-can-handle-closures-and-looping" class="headerlink" title="#59: Now we can handle closures and looping."></a>#59: Now we can handle closures and looping.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> d = <span class="number">0</span>; d &lt; <span class="number">3</span>; d++ ) (<span class="function"><span class="keyword">function</span>(<span class="params">d</span>)</span>&#123; </div><div class="line"> setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">   log( <span class="string">"Value of d: "</span>, d ); </div><div class="line">   assert( d == d, <span class="string">"Check the value of d."</span> ); </div><div class="line"> &#125;, d * <span class="number">200</span>); </div><div class="line">&#125;)(d);</div></pre></td></tr></table></figure><p>这个和上面的#55形成了一个对比，这个通过函数闭包将d的作用域限定在里面，因此这里有三个函数，每个函数中的d都是不同的，通过参数传进去的。因此在各自的函数定义域中各不影响，输出了1、2、3</p><h3 id="60-The-anonymous-wrapper-functions-are-also-useful-for-wrapping-libraries"><a href="#60-The-anonymous-wrapper-functions-are-also-useful-for-wrapping-libraries" class="headerlink" title="#60: The anonymous wrapper functions are also useful for wrapping libraries."></a>#60: The anonymous wrapper functions are also useful for wrapping libraries.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> myLib = <span class="built_in">window</span>.myLib = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="comment">// Initialize </span></div><div class="line">  &#125;; </div><div class="line"> </div><div class="line">  <span class="comment">// ... </span></div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>这是一个封装库的方法，就是通过匿名包装器函数。只把接口暴露出去，其他的变量都保留在里面。</p><h3 id="61-Another-way-to-wrap-a-library"><a href="#61-Another-way-to-wrap-a-library" class="headerlink" title="#61: Another way to wrap a library:"></a>#61: Another way to wrap a library:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> myLib = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">myLib</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="comment">// Initialize </span></div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="comment">// ... </span></div><div class="line">   </div><div class="line">  <span class="keyword">return</span> myLib; </div><div class="line">&#125;)();</div></pre></td></tr></table></figure><p>这里通过return封装库，和上面的功能也是一样的。并没有上面特别的操作。</p><h3 id="62-QUIZ-Fix-the-broken-closures-in-this-loop"><a href="#62-QUIZ-Fix-the-broken-closures-in-this-loop" class="headerlink" title="#62: QUIZ: Fix the broken closures in this loop!"></a>#62: QUIZ: Fix the broken closures in this loop!</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>; </div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ ) &#123; </div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    assert( i == count++, <span class="string">"Check the value of i."</span> ); </div><div class="line">  &#125;, i * <span class="number">200</span>); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>他提出了一个问题，如何用闭包解决这个问题，也很容易解决，只要把i定义分别在不同函数作用域里面就好，下面是我的解决方法。直接把i作为参数传入进去，由于setTimeout的运行方式，会提前把参数传了进去，形成了闭包。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>;</div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ ) &#123;</div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123;</div><div class="line">    assert( i == count++, <span class="string">"Check the value of i."</span> );</div><div class="line">  &#125;, i * <span class="number">200</span>, i);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="63-A-quick-wrapper-function-will-do-the-trick"><a href="#63-A-quick-wrapper-function-will-do-the-trick" class="headerlink" title="#63: A quick wrapper function will do the trick."></a>#63: A quick wrapper function will do the trick.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> count = <span class="number">0</span>; </div><div class="line"><span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++ ) (<span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>&#123; </div><div class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    assert( i == count++, <span class="string">"Check the value of i."</span> ); </div><div class="line">  &#125;, i * <span class="number">200</span>); </div><div class="line">&#125;)(i);</div></pre></td></tr></table></figure><p>他的解决方案是在setTimeout外面用一个立刻执行的函数，这种方法也是可行的。</p><h2 id="Function-Prototypes"><a href="#Function-Prototypes" class="headerlink" title="Function Prototypes"></a>Function Prototypes</h2><h3 id="65-Adding-a-prototyped-method-to-a-function"><a href="#65-Adding-a-prototyped-method-to-a-function" class="headerlink" title="#65: Adding a prototyped method to a function."></a>#65: Adding a prototyped method to a function.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"> </div><div class="line">Ninja.prototype.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span>; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaA = Ninja(); </div><div class="line">assert( !ninjaA, <span class="string">"Is undefined, not an instance of Ninja."</span> ); </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja(); </div><div class="line">assert( ninjaB.swingSword(), <span class="string">"Method exists and is callable."</span> );</div></pre></td></tr></table></figure><p>这里首先定义了一个Ninja的函数，然后通过prototype向这个对象添加了一个方法。</p><p>然后第一次不使用new直接赋值，由于函数并没有返回任何东西，因此ninjaA自然是未定义的undefined，下面用了new返回了一个对象，具体的原因可以看上一篇博客中关于new的运行方式的解释。</p><h3 id="66-Properties-added-in-the-constructor-or-later-override-prototyped-properties"><a href="#66-Properties-added-in-the-constructor-or-later-override-prototyped-properties" class="headerlink" title="#66: Properties added in the constructor (or later) override prototyped properties."></a>#66: Properties added in the constructor (or later) override prototyped properties.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>; </div><div class="line">  &#125;; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="comment">// Should return false, but will be overridden </span></div><div class="line">Ninja.prototype.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(); </div><div class="line">assert( ninja.swingSword(), <span class="string">"Calling the instance method, not the prototype method."</span> );</div></pre></td></tr></table></figure><p>这里看上去有点玄学，为什么明明重写了但是还是return true呢。其实这只是一个错觉。实际上是里面的重写了外面的属性。</p><p>让我们来分析一下他的过程。</p><p>首先，定义了一个叫做Ninja的构造函数。在这个构造函数里面为自己添加了一个swingSword的方法。但是注意，这个构造函数并没有被执行。</p><p>然后，为Ninja这个对象添加了一个swingSword的方法，这是这个方法第一次被添加到这个对象里面，return的是false</p><p>再接着，用new来实例化。根据new的运行过程，此时上面定义的构造函数才被调用，重写了swingSword这个方法，这时候，return的自然就是true了。</p><p>这样一看，是不是清晰明了了。</p><h3 id="67-Prototyped-properties-affect-all-objects-of-the-same-constructor-simultaneously-even-if-they-already-exist"><a href="#67-Prototyped-properties-affect-all-objects-of-the-same-constructor-simultaneously-even-if-they-already-exist" class="headerlink" title="#67: Prototyped properties affect all objects of the same constructor, simultaneously, even if they already exist."></a>#67: Prototyped properties affect all objects of the same constructor, simultaneously, even if they already exist.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.swung = <span class="literal">true</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaA = <span class="keyword">new</span> Ninja(); </div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja(); </div><div class="line"> </div><div class="line">Ninja.prototype.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.swung; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line">assert( ninjaA.swingSword(), <span class="string">"Method exists, even out of order."</span> ); </div><div class="line">assert( ninjaB.swingSword(), <span class="string">"and on all instantiated objects."</span> );</div></pre></td></tr></table></figure><p>这个标题有点长。所表达的意思也很简单，就是通过prototype添加的属性，是会被添加到所有已经实例化的对象里面的。由于原型链继承的设计，他们是可以顺着原型链找到这个方法的。这个也是很好理解的。</p><h3 id="68-QUIZ-Make-a-chainable-Ninja-method"><a href="#68-QUIZ-Make-a-chainable-Ninja-method" class="headerlink" title="#68: QUIZ: Make a chainable Ninja method."></a>#68: QUIZ: Make a chainable Ninja method.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.swung = <span class="literal">true</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaA = <span class="keyword">new</span> Ninja(); </div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja(); </div><div class="line"> </div><div class="line"><span class="comment">// Add a method to the Ninja prototype which </span></div><div class="line"><span class="comment">// returns itself and modifies swung </span></div><div class="line"> </div><div class="line">assert( !ninjaA.swing().swung, <span class="string">"Verify that the swing method exists and returns an instance."</span> ); </div><div class="line">assert( !ninjaB.swing().swung, <span class="string">"and that it works on all Ninja instances."</span> );</div></pre></td></tr></table></figure><p>注释里面提示添加一个方法给Ninja，返回自身并且修改swung，这就非常地简单了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Ninja.prototype.swing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.swung = <span class="literal">false</span>;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>一下就搞定了。</p><h3 id="69-The-chainable-method-must-return-this"><a href="#69-The-chainable-method-must-return-this" class="headerlink" title="#69: The chainable method must return this."></a>#69: The chainable method must return this.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.swung = <span class="literal">true</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaA = <span class="keyword">new</span> Ninja(); </div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja(); </div><div class="line"> </div><div class="line">Ninja.prototype.swing = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.swung = <span class="literal">false</span>; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line">assert( !ninjaA.swing().swung, <span class="string">"Verify that the swing method exists and returns an instance."</span> ); </div><div class="line">assert( !ninjaB.swing().swung, <span class="string">"and that it works on all Ninja instances."</span> );</div></pre></td></tr></table></figure><p>看上去和我的方法是一模一样的的（逃</p><h2 id="Instance-Type"><a href="#Instance-Type" class="headerlink" title="Instance Type"></a>Instance Type</h2><h3 id="71-Examining-the-basics-of-an-object"><a href="#71-Examining-the-basics-of-an-object" class="headerlink" title="#71: Examining the basics of an object."></a>#71: Examining the basics of an object.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(); </div><div class="line"> </div><div class="line">assert( <span class="keyword">typeof</span> ninja == <span class="string">"object"</span>, <span class="string">"However the type of the instance is still an object."</span> );   </div><div class="line">assert( ninja <span class="keyword">instanceof</span> Ninja, <span class="string">"The object was instantiated properly."</span> ); </div><div class="line">assert( ninja.constructor == Ninja, <span class="string">"The ninja object was created by the Ninja function."</span> );</div></pre></td></tr></table></figure><p>这里说了几个对象的基本知识。理解一下就好。</p><p><code>instanceof</code> <strong>运算符</strong>用来测试一个对象在其原型链中是否存在一个构造函数的 <code>prototype</code> 属性。</p><h3 id="72-We-can-still-use-the-constructor-to-build-other-instances"><a href="#72-We-can-still-use-the-constructor-to-build-other-instances" class="headerlink" title="#72: We can still use the constructor to build other instances."></a>#72: We can still use the constructor to build other instances.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(); </div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> ninja.constructor(); </div><div class="line"> </div><div class="line">assert( ninjaB <span class="keyword">instanceof</span> Ninja, <span class="string">"Still a ninja object."</span> );</div></pre></td></tr></table></figure><p>很明显，这个同一个东西。上面的#71也提到 ninja.constructor == Ninja 指向的是同一个东西。</p><h3 id="73-QUIZ-Make-another-instance-of-a-Ninja"><a href="#73-QUIZ-Make-another-instance-of-a-Ninja" class="headerlink" title="#73: QUIZ: Make another instance of a Ninja."></a>#73: QUIZ: Make another instance of a Ninja.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ninja = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Ninja(); </div><div class="line">&#125;)(); </div><div class="line"> </div><div class="line"><span class="comment">// Make another instance of Ninja </span></div><div class="line"><span class="keyword">var</span> ninjaB = ___; </div><div class="line"> </div><div class="line">assert( ninja.constructor == ninjaB.constructor, <span class="string">"The ninjas come from the same source."</span> );</div></pre></td></tr></table></figure><p>这里考察的还是那个点，填入<code>var ninjaB = new ninja.constructor();</code> 就可以了。</p><h3 id="74-QUIZ-Use-the-constructor-property-to-dig-in"><a href="#74-QUIZ-Use-the-constructor-property-to-dig-in" class="headerlink" title="#74: QUIZ: Use the .constructor property to dig in."></a>#74: QUIZ: Use the .constructor property to dig in.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ninja = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"> <span class="keyword">return</span> <span class="keyword">new</span> Ninja(); </div><div class="line">&#125;)(); </div><div class="line"> </div><div class="line"><span class="comment">// Make another instance of Ninja </span></div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> ninja.constructor(); </div><div class="line"> </div><div class="line">assert( ninja.constructor == ninjaB.constructor, <span class="string">"The ninjas come from the same source."</span> );</div></pre></td></tr></table></figure><p>看，一模一样的的（这几题貌似特别地水，跳过跳过。。</p><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><h3 id="76-The-basics-of-how-prototypal-inheritance-works"><a href="#76-The-basics-of-how-prototypal-inheritance-works" class="headerlink" title="#76: The basics of how prototypal inheritance works."></a>#76: The basics of how prototypal inheritance works.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line">Person.prototype.dance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line"> </div><div class="line"><span class="comment">// Achieve similar, but non-inheritable, results </span></div><div class="line">Ninja.prototype = Person.prototype; <span class="comment">// Ninja继承于Person</span></div><div class="line">Ninja.prototype = &#123; <span class="attr">dance</span>: Person.prototype.dance &#125;;  <span class="comment">// 这破坏了继承链，如果去掉那么下面就可以通过</span></div><div class="line"> </div><div class="line">assert( (<span class="keyword">new</span> Ninja()) <span class="keyword">instanceof</span> Person, <span class="string">"Will fail with bad prototype chain."</span> ); </div><div class="line"> </div><div class="line"><span class="comment">// Only this maintains the prototype chain </span></div><div class="line">Ninja.prototype = <span class="keyword">new</span> Person();<span class="comment">// 这个和上面第一种继承方法是一样的。</span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(); </div><div class="line">assert( ninja <span class="keyword">instanceof</span> Ninja, <span class="string">"ninja receives functionality from the Ninja prototype"</span> ); </div><div class="line">assert( ninja <span class="keyword">instanceof</span> Person, <span class="string">"... and the Person prototype"</span> ); </div><div class="line">assert( ninja <span class="keyword">instanceof</span> <span class="built_in">Object</span>, <span class="string">"... and the Object prototype"</span> );<span class="comment">// 他们都是继承于Object的</span></div></pre></td></tr></table></figure><p>这里展示了基于原型的继承。具体的细节再注释中标明了。</p><h3 id="77-QUIZ-Let’s-try-our-hand-at-inheritance"><a href="#77-QUIZ-Let’s-try-our-hand-at-inheritance" class="headerlink" title="#77: QUIZ: Let’s try our hand at inheritance."></a>#77: QUIZ: Let’s try our hand at inheritance.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="comment">// Implement a function that inherits from Person </span></div><div class="line"><span class="comment">// and sets a name in the constructor </span></div><div class="line"> </div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Me(); </div><div class="line">assert( me.getName(), <span class="string">"A name was set."</span> );</div></pre></td></tr></table></figure><p>根据注释来看，就是要求让Me继承语Person，并且给一个名字</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Me</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = <span class="string">'Zhenly'</span></div><div class="line">&#125;;</div><div class="line">Me.prototype = <span class="keyword">new</span> Person();</div></pre></td></tr></table></figure><p>根据上面的知识很容易就写了出来。</p><p>这里顺便提一下，对于这些继承的东西，ES6提供了Class的语法糖，写起来就更加直观明了，但是归根到底还是基于原型链的继承。</p><h3 id="78-The-result-is-rather-straight-forward"><a href="#78-The-result-is-rather-straight-forward" class="headerlink" title="#78: The result is rather straight-forward."></a>#78: The result is rather straight-forward.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125; </div><div class="line">Person.prototype.getName = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Me</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"John Resig"</span>; </div><div class="line">&#125; </div><div class="line">Me.prototype = <span class="keyword">new</span> Person(); </div><div class="line"> </div><div class="line"><span class="keyword">var</span> me = <span class="keyword">new</span> Me(); </div><div class="line">assert( me.getName(), <span class="string">"A name was set."</span> );</div></pre></td></tr></table></figure><p>看，他的结果也是和我一毛一样的。（逃</p><h2 id="Built-in-Prototypes"><a href="#Built-in-Prototypes" class="headerlink" title="Built-in Prototypes"></a>Built-in Prototypes</h2><h3 id="80-We-can-also-modify-built-in-object-prototypes"><a href="#80-We-can-also-modify-built-in-object-prototypes" class="headerlink" title="#80: We can also modify built-in object prototypes."></a>#80: We can also modify built-in object prototypes.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!<span class="built_in">Array</span>.prototype.forEach) &#123; </div><div class="line">  <span class="built_in">Array</span>.prototype.forEach = <span class="function"><span class="keyword">function</span>(<span class="params">fn</span>)</span>&#123; </div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.length; i++ ) &#123; </div><div class="line">      fn( <span class="keyword">this</span>[i], i, <span class="keyword">this</span> ); </div><div class="line">    &#125; </div><div class="line">  &#125;; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">[<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>].forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value, index, array</span>)</span>&#123; </div><div class="line">  assert( value, <span class="string">"Is in position "</span> + index + <span class="string">" out of "</span> + (array.length - <span class="number">1</span>) ); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>我们甚至可以修改JavaScript里面原生的库的prototype，也可以为他们添加一些属性或方法。</p><h3 id="81-Beware-Extending-prototypes-can-be-dangerous"><a href="#81-Beware-Extending-prototypes-can-be-dangerous" class="headerlink" title="#81: Beware: Extending prototypes can be dangerous."></a>#81: Beware: Extending prototypes can be dangerous.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.keys = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> keys = []; </div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i <span class="keyword">in</span> <span class="keyword">this</span> ) </div><div class="line">    keys.push( i ); </div><div class="line">  <span class="keyword">return</span> keys; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>, <span class="attr">c</span>: <span class="number">3</span> &#125;; </div><div class="line"> </div><div class="line">assert( obj.keys().length == <span class="number">3</span>, <span class="string">"We should only have 3 properties."</span> ); </div><div class="line"> </div><div class="line"><span class="keyword">delete</span> <span class="built_in">Object</span>.prototype.keys;</div></pre></td></tr></table></figure><p>上面一个提到我们可以修改原生库里面的原型，但是也是一种危险的做法。</p><p>比如在这里，他为Object添加了一个keys的方法。然后使用for…in 遍历this的所有属性，这时候this上多了一个keys的属性，那么他的length自然就变成了4，并不是我们想要的结果。</p><h2 id="Enforcing-Function-Context"><a href="#Enforcing-Function-Context" class="headerlink" title="Enforcing Function Context"></a>Enforcing Function Context</h2><h3 id="83-What-happens-when-we-try-to-bind-an-object’s-method-to-a-click-handler"><a href="#83-What-happens-when-we-try-to-bind-an-object’s-method-to-a-click-handler" class="headerlink" title="#83: What happens when we try to bind an object’s method to a click handler?"></a>#83: What happens when we try to bind an object’s method to a click handler?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Button = &#123; </div><div class="line">  <span class="attr">click</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.clicked = <span class="literal">true</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>); </div><div class="line">elem.innerHTML = <span class="string">"Click me!"</span>; </div><div class="line">elem.onclick = Button.click; </div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild(elem); </div><div class="line"> </div><div class="line">elem.onclick(); </div><div class="line">assert( elem.clicked, <span class="string">"The clicked property was accidentally set on the element"</span> );</div></pre></td></tr></table></figure><p>这里进行了一些常规操作。简单来说就是建立一个Button对象，里面有个click事件，然后把这个事件绑定到新建的元素里面，然后调用一下，然后elem作为this，那个clicked就变成了true了，正常操作，没有什么东西好注意的。溜了</p><h3 id="84-We-need-to-keep-its-context-as-the-original-object"><a href="#84-We-need-to-keep-its-context-as-the-original-object" class="headerlink" title="#84: We need to keep its context as the original object."></a>#84: We need to keep its context as the original object.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">bind</span>(<span class="params">context, name</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> context[name].apply(context, <span class="built_in">arguments</span>); </div><div class="line">  &#125;; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> Button = &#123; </div><div class="line">  <span class="attr">click</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.clicked = <span class="literal">true</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>); </div><div class="line">elem.innerHTML = <span class="string">"Click me!"</span>; </div><div class="line">elem.onclick = bind(Button, <span class="string">"click"</span>); </div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild(elem); </div><div class="line"> </div><div class="line">elem.onclick(); </div><div class="line">assert( Button.clicked, <span class="string">"The clicked property was correctly set on the object"</span> );</div></pre></td></tr></table></figure><p>这里和上面有点不同，这里把context绑定在Button这个对象里面，因此我们虽然调用的是elem的onclick事件，但是事件执行的上下文是在Button里面的。也属于常规操作。</p><h3 id="85-Add-a-method-to-all-functions-to-allow-context-enforcement"><a href="#85-Add-a-method-to-all-functions-to-allow-context-enforcement" class="headerlink" title="#85: Add a method to all functions to allow context enforcement."></a>#85: Add a method to all functions to allow context enforcement.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">object</span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span>; </div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> fn.apply(object, <span class="built_in">arguments</span>); </div><div class="line">  &#125;; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> Button = &#123; </div><div class="line">  <span class="attr">click</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.clicked = <span class="literal">true</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>); </div><div class="line">elem.innerHTML = <span class="string">"Click me!"</span>; </div><div class="line">elem.onclick = Button.click.bind(Button); </div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild(elem); </div><div class="line"> </div><div class="line">elem.onclick(); </div><div class="line">assert( Button.clicked, <span class="string">"The clicked property was correctly set on the object"</span> );</div></pre></td></tr></table></figure><p>这里和上面不同的是把bind放在了Function的原型里面（虽然标准库里面本身就有了），然后我们就可以更加优雅地绑定事件运行时的上下文。挺好的，其他细节部分和上面都是一样的。</p><h3 id="86-Our-final-target-the-bind-method-from-Prototype-js"><a href="#86-Our-final-target-the-bind-method-from-Prototype-js" class="headerlink" title="#86: Our final target (the .bind method from Prototype.js)."></a>#86: Our final target (the .bind method from Prototype.js).</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span>, args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>), object = args.shift(); </div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> fn.apply(object, </div><div class="line">      args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>))); </div><div class="line">  &#125;; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> Button = &#123; </div><div class="line">  <span class="attr">click</span>: <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.clicked = value; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> elem = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>); </div><div class="line">elem.innerHTML = <span class="string">"Click me!"</span>; </div><div class="line">elem.onclick = Button.click.bind(Button, <span class="literal">false</span>); </div><div class="line"><span class="built_in">document</span>.getElementById(<span class="string">"results"</span>).appendChild(elem); </div><div class="line"> </div><div class="line">elem.onclick(); </div><div class="line">assert( Button.clicked === <span class="literal">false</span>, <span class="string">"The clicked property was correctly set on the object"</span> );</div></pre></td></tr></table></figure><p>这里出现了文章一开始#1里面的bind，之前解释得已经很清晰了，这里就不详细提了。</p><h2 id="Bonus-Function-Length"><a href="#Bonus-Function-Length" class="headerlink" title="Bonus: Function Length"></a>Bonus: Function Length</h2><h3 id="88-How-does-a-function’s-length-property-work"><a href="#88-How-does-a-function’s-length-property-work" class="headerlink" title="#88: How does a function’s length property work?"></a>#88: How does a function’s length property work?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeNinja</span>(<span class="params">name</span>)</span>&#123;&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeSamurai</span>(<span class="params">name, rank</span>)</span>&#123;&#125; </div><div class="line">assert( makeNinja.length == <span class="number">1</span>, <span class="string">"Only expecting a single argument"</span> ); </div><div class="line">assert( makeSamurai.length == <span class="number">2</span>, <span class="string">"Multiple arguments expected"</span> );</div></pre></td></tr></table></figure><p>这里告诉我们，一个函数具有一个length的属性，而这个属性的值就是等于参数列表的个数。</p><h3 id="89-We-can-use-it-to-implement-method-overloading"><a href="#89-We-can-use-it-to-implement-method-overloading" class="headerlink" title="#89: We can use it to implement method overloading."></a>#89: We can use it to implement method overloading.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMethod</span>(<span class="params">object, name, fn</span>)</span>&#123; </div><div class="line">  <span class="comment">// Save a reference to the old method </span></div><div class="line">  <span class="keyword">var</span> old = object[ name ]; </div><div class="line"> </div><div class="line">  <span class="comment">// Overwrite the method with our new one </span></div><div class="line">  object[ name ] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="comment">// Check the number of incoming arguments, </span></div><div class="line">    <span class="comment">// compared to our overloaded function </span></div><div class="line">    <span class="keyword">if</span> ( fn.length == <span class="built_in">arguments</span>.length ) </div><div class="line">      <span class="comment">// If there was a match, run the function </span></div><div class="line">      <span class="keyword">return</span> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </div><div class="line"> </div><div class="line">    <span class="comment">// Otherwise, fallback to the old method </span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="keyword">typeof</span> old === <span class="string">"function"</span> ) </div><div class="line">      <span class="keyword">return</span> old.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </div><div class="line">  &#125;; </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里向我们展示了一种骚操作，先对象添加一个方法，通过判断函数参数的长度，决定调用的是新加入的方法还是之前的老方法，这样可以解决掉一些添加新功能后的兼容性问题。（虽然感觉没有用</p><h3 id="90-How-method-overloading-might-work-using-the-function-length-property"><a href="#90-How-method-overloading-might-work-using-the-function-length-property" class="headerlink" title="#90: How method overloading might work, using the function length property."></a>#90: How method overloading might work, using the function length property.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">addMethod</span>(<span class="params">object, name, fn</span>)</span>&#123; </div><div class="line">  <span class="comment">// Save a reference to the old method </span></div><div class="line">  <span class="keyword">var</span> old = object[ name ]; </div><div class="line"> </div><div class="line">  <span class="comment">// Overwrite the method with our new one </span></div><div class="line">  object[ name ] = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="comment">// Check the number of incoming arguments, </span></div><div class="line">    <span class="comment">// compared to our overloaded function </span></div><div class="line">    <span class="keyword">if</span> ( fn.length == <span class="built_in">arguments</span>.length ) </div><div class="line">      <span class="comment">// If there was a match, run the function </span></div><div class="line">      <span class="keyword">return</span> fn.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </div><div class="line"> </div><div class="line">    <span class="comment">// Otherwise, fallback to the old method </span></div><div class="line">    <span class="keyword">else</span> <span class="keyword">if</span> ( <span class="keyword">typeof</span> old === <span class="string">"function"</span> ) </div><div class="line">      <span class="keyword">return</span> old.apply( <span class="keyword">this</span>, <span class="built_in">arguments</span> ); </div><div class="line">  &#125;; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninjas</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> ninjas = [ <span class="string">"Dean Edwards"</span>, <span class="string">"Sam Stephenson"</span>, <span class="string">"Alex Russell"</span> ]; </div><div class="line">  addMethod(<span class="keyword">this</span>, <span class="string">"find"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> ninjas; </div><div class="line">  &#125;); </div><div class="line">  addMethod(<span class="keyword">this</span>, <span class="string">"find"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> ret = []; </div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ninjas.length; i++ ) </div><div class="line">      <span class="keyword">if</span> ( ninjas[i].indexOf(name) == <span class="number">0</span> ) </div><div class="line">        ret.push( ninjas[i] ); </div><div class="line">    <span class="keyword">return</span> ret; </div><div class="line">  &#125;); </div><div class="line">  addMethod(<span class="keyword">this</span>, <span class="string">"find"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">first, last</span>)</span>&#123; </div><div class="line">    <span class="keyword">var</span> ret = []; </div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; ninjas.length; i++ ) </div><div class="line">      <span class="keyword">if</span> ( ninjas[i] == (first + <span class="string">" "</span> + last) ) </div><div class="line">        ret.push( ninjas[i] ); </div><div class="line">    <span class="keyword">return</span> ret; </div><div class="line">  &#125;); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjas = <span class="keyword">new</span> Ninjas(); </div><div class="line">assert( ninjas.find().length == <span class="number">3</span>, <span class="string">"Finds all ninjas"</span> ); </div><div class="line">assert( ninjas.find(<span class="string">"Sam"</span>).length == <span class="number">1</span>, <span class="string">"Finds ninjas by first name"</span> ); </div><div class="line">assert( ninjas.find(<span class="string">"Dean"</span>, <span class="string">"Edwards"</span>).length == <span class="number">1</span>, <span class="string">"Finds ninjas by first and last name"</span> ); </div><div class="line">assert( ninjas.find(<span class="string">"Alex"</span>, <span class="string">"X"</span>, <span class="string">"Russell"</span>) == <span class="literal">null</span>, <span class="string">"Does nothing"</span> );</div></pre></td></tr></table></figure><p>这里作者向我们展示了一种更加骚的操作，通过上一个样例的方法，为find这个方法添加了三种不同的方法，实现不同参数调用不同的函数的功能，（只是为什么不直接判断arguments来实现呢</p><p>虽然用这种方法扩展起来的确是比较爽的</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>通过三天的时间，把这个Learning Advanced JavaScript 过了一遍，附加上一些我个人的理解，可能存在一点错误，如果发现还请指出。</p><p>学到了不少JavaScript的高级操作，总的来时收获还是挺多的，但是写的时候还是多多参考一下文档，听说ES2018就快出来了，到时候又有不少语法糖和骚操作可以用了。</p><p>对于JavaScript的文档，这里推荐一下<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript</a></p><p>里面写得比较详细，而且大多数都有中文翻译，如果没有，那你快起提供一个咯。</p><p>完。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时隔两天，再次接上一篇博客继续，来Learning Advanced JavaScript&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://blog.zhenly.cn/categories/Web/"/>
    
    
      <category term="学习笔记" scheme="https://blog.zhenly.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="https://blog.zhenly.cn/tags/Web/"/>
    
      <category term="JavaScript" scheme="https://blog.zhenly.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Web | Learning Advanced JavaScript 学习笔记 - 2</title>
    <link href="https://blog.zhenly.cn/2017/11/15/js-learning-2/"/>
    <id>https://blog.zhenly.cn/2017/11/15/js-learning-2/</id>
    <published>2017-11-15T15:17:00.000Z</published>
    <updated>2017-11-17T14:14:10.268Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇博客继续，来Learning Advanced JavaScript</p><a id="more"></a><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><h3 id="24-What-exactly-does-context-represent"><a href="#24-What-exactly-does-context-represent" class="headerlink" title="#24: What exactly does context represent?"></a>#24: What exactly does context represent?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">katana</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.isSharp = <span class="literal">true</span>; </div><div class="line">&#125; </div><div class="line">katana(); </div><div class="line">assert( isSharp === <span class="literal">true</span>, <span class="string">"A global object now exists with that name and value."</span> ); </div><div class="line"> </div><div class="line"><span class="keyword">var</span> shuriken = &#123; </div><div class="line">  <span class="attr">toss</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.isSharp = <span class="literal">true</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line">shuriken.toss(); </div><div class="line">assert( shuriken.isSharp === <span class="literal">true</span>, <span class="string">"When it's an object property, the value is set within the object."</span> );</div></pre></td></tr></table></figure><p>这里想要说的大概是this下绑定的变量是绑定在上一级函数作用域下的。如果是处于Global的函数，那么他的this绑定的就是全局变量。</p><h3 id="25-How-can-we-change-the-context-of-a-function"><a href="#25-How-can-we-change-the-context-of-a-function" class="headerlink" title="#25: How can we change the context of a function?"></a>#25: How can we change the context of a function?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> object = &#123;&#125;; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>; </div><div class="line">&#125; </div><div class="line">assert( fn() == <span class="keyword">this</span>, <span class="string">"The context is the global object."</span> ); </div><div class="line">assert( fn.call(object) == object, <span class="string">"The context is changed to a specific object."</span> );</div></pre></td></tr></table></figure><p>Function.prototype.call() 这个方法调用一个函数, 其具有一个指定的<code>this</code>值和分别地提供的参数(<strong>参数的列表</strong>)。</p><p>我们可以通过call这个方法来改变一个函数的context</p><h3 id="26-Different-ways-of-changing-the-context"><a href="#26-Different-ways-of-changing-the-context" class="headerlink" title="#26: Different ways of changing the context:"></a>#26: Different ways of changing the context:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> a + b; </div><div class="line">&#125; </div><div class="line">assert( add.call(<span class="keyword">this</span>, <span class="number">1</span>, <span class="number">2</span>) == <span class="number">3</span>, <span class="string">".call() takes individual arguments"</span> ); </div><div class="line">assert( add.apply(<span class="keyword">this</span>, [<span class="number">1</span>, <span class="number">2</span>]) == <span class="number">3</span>, <span class="string">".apply() takes an array of arguments"</span> );</div></pre></td></tr></table></figure><p>Function.prototype.apply() 方法调用一个函数, 其具有一个指定的<code>this</code>值，以及作为一个数组（或<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Indexed_collections#Working_with_array-like_objects" target="_blank" rel="external">类似数组的对象</a>）提供的参数。</p><p>call 和 apply 都是用于改变函数的context的，但是他们有一点区别。</p><h3 id="27-QUIZ-How-can-we-implement-looping-with-a-callback"><a href="#27-QUIZ-How-can-we-implement-looping-with-a-callback" class="headerlink" title="#27: QUIZ: How can we implement looping with a callback?"></a>#27: QUIZ: How can we implement looping with a callback?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">array, fn</span>)</span>&#123; </div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++ ) &#123; </div><div class="line">    <span class="comment">// Implement me! </span></div><div class="line">  &#125; </div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>; </div><div class="line">loop([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123; </div><div class="line">  assert(value == num++, <span class="string">"Make sure the contents are as we expect it."</span>); </div><div class="line">  assert(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>, <span class="string">"The context should be the full array."</span>); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这是一道题目，要求用回调函数解决循环。而且函数内的context需要是数组，因此填入</p><p><code>fn.call(array, array[i]);</code> </p><p>就可以了。</p><h3 id="28-A-possible-solution-for-function-looping"><a href="#28-A-possible-solution-for-function-looping" class="headerlink" title="#28: A possible solution for function looping:"></a>#28: A possible solution for function looping:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">loop</span>(<span class="params">array, fn</span>)</span>&#123; </div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">0</span>; i &lt; array.length; i++ ) </div><div class="line">    fn.call( array, array[i], i ); </div><div class="line">&#125; </div><div class="line"><span class="keyword">var</span> num = <span class="number">0</span>; </div><div class="line">loop([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>], <span class="function"><span class="keyword">function</span>(<span class="params">value, i</span>)</span>&#123; </div><div class="line">  assert(value == num++, <span class="string">"Make sure the contents are as we expect it."</span>); </div><div class="line">  assert(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">Array</span>, <span class="string">"The context should be the full array."</span>); </div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>这题提供了一个解答， 和上面有点不同的是回调函数多了一个参数。感觉这个有点水水的。</p><h2 id="Instantiation"><a href="#Instantiation" class="headerlink" title="Instantiation"></a>Instantiation</h2><h3 id="30-What-does-the-new-operator-do"><a href="#30-What-does-the-new-operator-do" class="headerlink" title="#30: What does the new operator do?"></a>#30: What does the new operator do?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.name = <span class="string">"Ninja"</span>; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaA = Ninja(); </div><div class="line">assert( !ninjaA, <span class="string">"Is undefined, not an instance of Ninja."</span> ); </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja(); </div><div class="line">assert( ninjaB.name == <span class="string">"Ninja"</span>, <span class="string">"Property exists on the ninja instance."</span> );</div></pre></td></tr></table></figure><p>这里讲了实例化的用法。第一种用法是错误的，因为这个函数并没有返回任何的东西，所以是undefined的。第二种通过new 来实例化对象，使得name这个变量被绑定到ninjaB这个context里面。</p><p><strong>new </strong>运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象类型之一。【参考资料一】</p><p>这这个过程里面，new到底做了些什么？</p><ol><li>一个新对象被创建，这个对象继承于Ninja.prototype。</li><li>构造函数Ninja()被执行，如果有参数的话，参数就会被传进去。同时上下文(this)会被指定为这个新的实例。</li><li>如果构造函数返回了一个对象（这里并没有），那么这个对象就会取代new出来的结果，如果没有返回，那么new出来的结果就是第一步所创建的对象。</li></ol><p>顺便说一下，一个对象被实例化之后，我们仍然可以通过修改Ninja.prototype给所有之前定义的实例来添加属性。如果之前的实例已经拥有这个属性了，那么将无法覆盖。产生这种结果是因为JavaScript基于原型的继承设计【参考资料二】。</p><p>参考资料: </p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/new</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></p><h3 id="31-We-have-a-‘this’-context-that-is-a-Ninja-object"><a href="#31-We-have-a-‘this’-context-that-is-a-Ninja-object" class="headerlink" title="#31: We have a ‘this’ context that is a Ninja object."></a>#31: We have a ‘this’ context that is a Ninja object.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.swung = <span class="literal">false</span>; </div><div class="line">   </div><div class="line">  <span class="comment">// Should return true </span></div><div class="line">  <span class="keyword">this</span>.swingSword = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.swung = !<span class="keyword">this</span>.swung; </div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.swung; </div><div class="line">  &#125;; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(); </div><div class="line">assert( ninja.swingSword(), <span class="string">"Calling the instance method."</span> ); </div><div class="line">assert( ninja.swung, <span class="string">"The ninja has swung the sword."</span> ); </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninjaB = <span class="keyword">new</span> Ninja(); </div><div class="line">assert( !ninjaB.swung, <span class="string">"Make sure that the ninja has not swung his sword."</span> );</div></pre></td></tr></table></figure><p>这里实例化了两个对象，他们的swung属性是分开，互不影响的。</p><h3 id="32-QUIZ-Add-a-method-that-gives-a-name-to-the-ninja"><a href="#32-QUIZ-Add-a-method-that-gives-a-name-to-the-ninja" class="headerlink" title="#32: QUIZ: Add a method that gives a name to the ninja."></a>#32: QUIZ: Add a method that gives a name to the ninja.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params">name</span>)</span>&#123; </div><div class="line">  <span class="comment">// Implement! </span></div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(<span class="string">"John"</span>); </div><div class="line">assert( ninja.name == <span class="string">"John"</span>, <span class="string">"The name has been set on initialization"</span> ); </div><div class="line"> </div><div class="line">ninja.changeName(<span class="string">"Bob"</span>); </div><div class="line">assert( ninja.name == <span class="string">"Bob"</span>, <span class="string">"The name was successfully changed."</span> );</div></pre></td></tr></table></figure><p>这里要求我们为这个东西（类？）添加一个方法。稍微补充点东西就可以了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params">name</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">  <span class="keyword">this</span>.changeName = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</div><div class="line">    <span class="keyword">this</span>.name = n;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(<span class="string">"John"</span>);</div><div class="line">assert( ninja.name == <span class="string">"John"</span>, <span class="string">"The name has been set on initialization"</span> );</div><div class="line"></div><div class="line">ninja.changeName(<span class="string">"Bob"</span>);</div><div class="line">assert( ninja.name == <span class="string">"Bob"</span>, <span class="string">"The name was successfully changed."</span> );</div></pre></td></tr></table></figure><h3 id="33-Add-a-new-property-and-method-to-the-object"><a href="#33-Add-a-new-property-and-method-to-the-object" class="headerlink" title="#33: Add a new property and method to the object."></a>#33: Add a new property and method to the object.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ninja</span>(<span class="params">name</span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.changeName = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.name = name; </div><div class="line">  &#125;; </div><div class="line"> </div><div class="line">  <span class="keyword">this</span>.changeName( name ); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> ninja = <span class="keyword">new</span> Ninja(<span class="string">"John"</span>); </div><div class="line">assert( ninja.name == <span class="string">"John"</span>, <span class="string">"The name has been set on initialization"</span> ); </div><div class="line"> </div><div class="line">ninja.changeName(<span class="string">"Bob"</span>); </div><div class="line">assert( ninja.name == <span class="string">"Bob"</span>, <span class="string">"The name was successfully changed."</span> );</div></pre></td></tr></table></figure><p>他的做法和我的差不多，就是复用了函数，这个比较好。</p><h3 id="34-What-happens-when-we-forget-to-use-the-new-operator"><a href="#34-What-happens-when-we-forget-to-use-the-new-operator" class="headerlink" title="#34: What happens when we forget to use the new operator?"></a>#34: What happens when we forget to use the new operator?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">first, last</span>)</span>&#123; </div><div class="line">  <span class="keyword">this</span>.name = first + <span class="string">" "</span> + last; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> user = User(<span class="string">"John"</span>, <span class="string">"Resig"</span>); </div><div class="line">assert( <span class="keyword">typeof</span> user == <span class="string">"undefined"</span>, <span class="string">"Since new wasn't used, the instance is undefined."</span> );</div></pre></td></tr></table></figure><p>当我们没有使用new的时候，this没办法指定在返回的对象里面，而是函数所在的作用域。具体原因可以看上面。</p><h3 id="35-What-happens-when-we-forget-to-use-the-new-operator-cont"><a href="#35-What-happens-when-we-forget-to-use-the-new-operator-cont" class="headerlink" title="#35: What happens when we forget to use the new operator? (cont.)"></a>#35: What happens when we forget to use the new operator? (cont.)</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">first, last</span>)</span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = first + <span class="string">" "</span> + last;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">window</span>.name = <span class="string">"Resig"</span>;</div><div class="line"><span class="keyword">var</span> user = User(<span class="string">"John"</span>, name);</div><div class="line"></div><div class="line">assert( name == <span class="string">"John Resig"</span>, <span class="string">"The name variable is accidentally overridden."</span> );</div></pre></td></tr></table></figure><p>上面提到User的作用域是在他所在的函数作用域里面，也就是全局下（window）。所以这一句话就是调用了这个函数，然后把全局下name的属性修改了。</p><h3 id="36-We-need-to-make-sure-that-the-new-operator-is-always-used"><a href="#36-We-need-to-make-sure-that-the-new-operator-is-always-used" class="headerlink" title="#36: We need to make sure that the new operator is always used."></a>#36: We need to make sure that the new operator is always used.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">first, last</span>)</span>&#123; </div><div class="line">  <span class="keyword">if</span> ( !(<span class="keyword">this</span> <span class="keyword">instanceof</span> User) ) <span class="comment">// 判断当前上下文是否在User中</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(first, last); </div><div class="line">   </div><div class="line">  <span class="keyword">this</span>.name = first + <span class="string">" "</span> + last; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> name = <span class="string">"Resig"</span>; </div><div class="line"><span class="keyword">var</span> user = User(<span class="string">"John"</span>, name); </div><div class="line"> </div><div class="line">assert( user, <span class="string">"This was defined correctly, even if it was by mistake."</span> ); </div><div class="line">assert( name == <span class="string">"Resig"</span>, <span class="string">"The right name was maintained."</span> );</div></pre></td></tr></table></figure><p>这里使用一种技巧，使得你就是忘记new了也会帮你new。就是通过判断当前的context，来确保是出于User下（使用了new），如果不在的话那么就new一下。挺有趣的。但是规范的代码还是不应该缺少new。感觉在这种情况下需要抛出错误。</p><h3 id="37-QUIZ-Is-there-another-more-generic-way-of-doing-this"><a href="#37-QUIZ-Is-there-another-more-generic-way-of-doing-this" class="headerlink" title="#37: QUIZ: Is there another, more generic, way of doing this?"></a>#37: QUIZ: Is there another, more generic, way of doing this?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">first, last</span>)</span>&#123; </div><div class="line">  <span class="keyword">if</span> ( !(<span class="keyword">this</span> <span class="keyword">instanceof</span> ___) ) </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(first, last); </div><div class="line">   </div><div class="line">  <span class="keyword">this</span>.name = first + <span class="string">" "</span> + last; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> name = <span class="string">"Resig"</span>; </div><div class="line"><span class="keyword">var</span> user = User(<span class="string">"John"</span>, name); </div><div class="line"> </div><div class="line">assert( user, <span class="string">"This was defined correctly, even if it was by mistake."</span> ); </div><div class="line">assert( name == <span class="string">"Resig"</span>, <span class="string">"The right name was maintained."</span> );</div></pre></td></tr></table></figure><p>这里要求我们使用更加通用的方法来实现上面的功能，而不是用过函数名。那么思路大概就是获取当前函数的语境所在。</p><h3 id="38-A-solution-using-arguments-callee"><a href="#38-A-solution-using-arguments-callee" class="headerlink" title="#38: A solution using arguments.callee."></a>#38: A solution using arguments.callee.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">User</span>(<span class="params">first, last</span>)</span>&#123; </div><div class="line">  <span class="keyword">if</span> ( !(<span class="keyword">this</span> <span class="keyword">instanceof</span> <span class="built_in">arguments</span>.callee) ) </div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> User(first, last); </div><div class="line">   </div><div class="line">  <span class="keyword">this</span>.name = first + <span class="string">" "</span> + last; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> name = <span class="string">"Resig"</span>; </div><div class="line"><span class="keyword">var</span> user = User(<span class="string">"John"</span>, name); </div><div class="line"> </div><div class="line">assert( user, <span class="string">"This was defined correctly, even if it was by mistake."</span> ); </div><div class="line">assert( name == <span class="string">"Resig"</span>, <span class="string">"The right name was maintained."</span> );</div></pre></td></tr></table></figure><p>先来看看他是怎么解决的。</p><p><strong>callee</strong> 是 <code>arguments</code> 对象的一个属性。它可以用于引用该函数的函数体内当前正在执行的函数。这在函数的名称是未知时很有用，例如在没有名称的函数表达式 (也称为“匿名函数”)内。</p><p>但是在严格模式下，ES5是禁止使用arguments.callee的。至于为什么可以查看上一篇博客，在#15中提到过。</p><h2 id="Flexible-Arguments"><a href="#Flexible-Arguments" class="headerlink" title="Flexible Arguments"></a>Flexible Arguments</h2><h3 id="40-Using-a-variable-number-of-arguments-to-our-advantage"><a href="#40-Using-a-variable-number-of-arguments-to-our-advantage" class="headerlink" title="#40: Using a variable number of arguments to our advantage."></a>#40: Using a variable number of arguments to our advantage.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">merge</span>(<span class="params">root</span>)</span>&#123; </div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="built_in">arguments</span>.length; i++ ) </div><div class="line">    <span class="keyword">for</span> ( <span class="keyword">var</span> key <span class="keyword">in</span> <span class="built_in">arguments</span>[i] ) </div><div class="line">      root[key] = <span class="built_in">arguments</span>[i][key]; </div><div class="line">  <span class="keyword">return</span> root; </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="keyword">var</span> merged = merge(&#123;<span class="attr">name</span>: <span class="string">"John"</span>&#125;, &#123;<span class="attr">city</span>: <span class="string">"Boston"</span>&#125;); </div><div class="line">assert( merged.name == <span class="string">"John"</span>, <span class="string">"The original name is intact."</span> ); </div><div class="line">assert( merged.city == <span class="string">"Boston"</span>, <span class="string">"And the city has been copied over."</span> );</div></pre></td></tr></table></figure><p>这里展示了JavaScript中函数arguments的用法，因为在JavaScript中，函数的参数都是不定长，可变灵活的。因此，我们可以利用这个特点。</p><p>这里出现了一个for…in的结构，这是ES5中一个标准。还有一个for…of 是ES6的新标准，后者弥补了前者的不足。</p><p>简而言之，就是</p><p> <code>for...in</code>循环出的是key，<code>for...of</code>循环出的是value</p><h3 id="41-How-can-we-find-the-Min-Max-number-in-an-array"><a href="#41-How-can-we-find-the-Min-Max-number-in-an-array" class="headerlink" title="#41: How can we find the Min/Max number in an array?"></a>#41: How can we find the Min/Max number in an array?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">smallest</span>(<span class="params">array</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply( <span class="built_in">Math</span>, array ); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largest</span>(<span class="params">array</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply( <span class="built_in">Math</span>, array ); </div><div class="line">&#125; </div><div class="line">assert(smallest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) == <span class="number">0</span>, <span class="string">"Locate the smallest value."</span>); </div><div class="line">assert(largest([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]) == <span class="number">3</span>, <span class="string">"Locate the largest value."</span>);</div></pre></td></tr></table></figure><p>Math.min(x,y,…)是不接受数组参数的，这里看上去是把参数通过apply传进去，因为apply可以接受数组或者是类数组作为参数，而call只能接受参数列表。</p><p>但是我没有看出来把this指定成Math有什么效果，我试着把他改成null结构也是一样的，或许有什么神奇的东西我不知道?</p><h3 id="42-Another-possible-solution"><a href="#42-Another-possible-solution" class="headerlink" title="#42: Another possible solution:"></a>#42: Another possible solution:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">smallest</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.min.apply( <span class="built_in">Math</span>, <span class="built_in">arguments</span> ); </div><div class="line">&#125; </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">largest</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.max.apply( <span class="built_in">Math</span>, <span class="built_in">arguments</span> ); </div><div class="line">&#125; </div><div class="line">assert(smallest(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) == <span class="number">0</span>, <span class="string">"Locate the smallest value."</span>); </div><div class="line">assert(largest(<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) == <span class="number">3</span>, <span class="string">"Locate the largest value."</span>);</div></pre></td></tr></table></figure><p>这个原理和上面也是一样的，通过传入一个类数组进去，但是这种情况下为什么还要这么做呢。直接 var largest = Math.max;` 岂不是更简单。</p><h3 id="43-Uh-oh-what’s-going-wrong-here"><a href="#43-Uh-oh-what’s-going-wrong-here" class="headerlink" title="#43: Uh oh, what’s going wrong here?"></a>#43: Uh oh, what’s going wrong here?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">highest</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="built_in">arguments</span>.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> b - a; </div><div class="line">  &#125;); </div><div class="line">&#125; </div><div class="line">assert(highest(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)[<span class="number">0</span>] == <span class="number">3</span>, <span class="string">"Get the highest value."</span>); </div><div class="line">assert(highest(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[<span class="number">1</span>] == <span class="number">4</span>, <span class="string">"Verify the results."</span>);</div></pre></td></tr></table></figure><p>明显这段代码是不能运行的，因为arguments并不是一个真正的数组，只是一个类数组。什么是类数组上一篇博客的#1就已经提到了。因此，我们要把他转化为数组，这里我用了ES6中Array.from()的方法完美解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">highest</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> b - a;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line">assert(highest(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)[<span class="number">0</span>] == <span class="number">3</span>, <span class="string">"Get the highest value."</span>);</div><div class="line">assert(highest(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[<span class="number">1</span>] == <span class="number">4</span>, <span class="string">"Verify the results."</span>);</div></pre></td></tr></table></figure><p><code>Array.from()</code> 方法从一个类似数组或可迭代的对象中创建一个新的数组实例。第二个参数指定map函数，第三个参数指定context。</p><h3 id="44-QUIZ-We-must-convert-array-like-objects-into-actual-arrays-Can-any-built-in-methods-help"><a href="#44-QUIZ-We-must-convert-array-like-objects-into-actual-arrays-Can-any-built-in-methods-help" class="headerlink" title="#44: QUIZ: We must convert array-like objects into actual arrays. Can any built-in methods help?"></a>#44: QUIZ: We must convert array-like objects into actual arrays. Can any built-in methods help?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Hint: Arrays have .slice and .splice methods which return new arrays. </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">highest</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> makeArray(<span class="built_in">arguments</span>).slice(<span class="number">1</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> b - a; </div><div class="line">  &#125;); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeArray</span>(<span class="params">array</span>)</span>&#123; </div><div class="line">  <span class="comment">// Implement me! </span></div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="comment">// Expecting: [3,2,1] </span></div><div class="line">assert(highest(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)[<span class="number">0</span>] == <span class="number">3</span>, <span class="string">"Get the highest value."</span>); </div><div class="line"><span class="comment">// Expecting: [5,4,3,2,1] </span></div><div class="line">assert(highest(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[<span class="number">1</span>] == <span class="number">4</span>, <span class="string">"Verify the results."</span>);</div></pre></td></tr></table></figure><p>貌似我的进展有点快，上一个已经解决了他这个问题了，填个<code>return  Array.from(array);</code>完美解决</p><h3 id="45-We-can-use-built-in-methods-to-our-advantage"><a href="#45-We-can-use-built-in-methods-to-our-advantage" class="headerlink" title="#45: We can use built-in methods to our advantage."></a>#45: We can use built-in methods to our advantage.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">highest</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> makeArray(<span class="built_in">arguments</span>).sort(<span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> b - a; </div><div class="line">  &#125;); </div><div class="line">&#125; </div><div class="line"> </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeArray</span>(<span class="params">array</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>().slice.call( array ); </div><div class="line">&#125; </div><div class="line"> </div><div class="line">assert(highest(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)[<span class="number">0</span>] == <span class="number">3</span>, <span class="string">"Get the highest value."</span>); </div><div class="line">assert(highest(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)[<span class="number">1</span>] == <span class="number">4</span>, <span class="string">"Verify the results."</span>);</div></pre></td></tr></table></figure><p>他这里用的是Array.prototype.slice.call() 的方法，这个我在上一篇博客的#1已经提到过了，就不多说了。ES6中的Array.from()比他强大多了。</p><h3 id="46-QUIZ-Implement-a-multiplication-function-first-argument-by-largest-number"><a href="#46-QUIZ-Implement-a-multiplication-function-first-argument-by-largest-number" class="headerlink" title="#46: QUIZ: Implement a multiplication function (first argument by largest number)."></a>#46: QUIZ: Implement a multiplication function (first argument by largest number).</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiMax</span>(<span class="params">multi</span>)</span>&#123; </div><div class="line">  <span class="comment">// Make an array of all but the first argument </span></div><div class="line">  <span class="keyword">var</span> allButFirst = ___; </div><div class="line"> </div><div class="line">  <span class="comment">// Find the largest number in that array of arguments </span></div><div class="line">  <span class="keyword">var</span> largestAllButFirst = ___; </div><div class="line"> </div><div class="line">  <span class="comment">// Return the multiplied result </span></div><div class="line">  <span class="keyword">return</span> multi * largestAllButFirst; </div><div class="line">&#125; </div><div class="line">assert( multiMax(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) == <span class="number">9</span>, <span class="string">"3*3=9 (First arg, by largest.)"</span> );</div></pre></td></tr></table></figure><p>这里考察我们对于可变参数的应用，如果熟悉Array的库的话就挺简单的，有很多种方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiMax</span>(<span class="params">multi</span>)</span>&#123;</div><div class="line">  <span class="comment">// Make an array of all but the first argument</span></div><div class="line">  <span class="keyword">var</span> allButFirst = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>).slice(<span class="number">1</span>);</div><div class="line"></div><div class="line">  <span class="comment">// Find the largest number in that array of arguments</span></div><div class="line">  <span class="keyword">var</span> largestAllButFirst = allButFirst.sort().pop();</div><div class="line">  </div><div class="line">  <span class="comment">// Return the multiplied result</span></div><div class="line">  <span class="keyword">return</span> multi * largestAllButFirst;</div><div class="line">&#125;</div><div class="line">assert( multiMax(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) == <span class="number">9</span>, <span class="string">"3*3=9 (First arg, by largest.)"</span> );</div></pre></td></tr></table></figure><h3 id="47-We-can-use-call-and-apply-to-build-a-solution"><a href="#47-We-can-use-call-and-apply-to-build-a-solution" class="headerlink" title="#47: We can use call and apply to build a solution."></a>#47: We can use call and apply to build a solution.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiMax</span>(<span class="params">multi</span>)</span>&#123; </div><div class="line">  <span class="comment">// Make an array of all but the first argument </span></div><div class="line">  <span class="keyword">var</span> allButFirst = <span class="built_in">Array</span>().slice.call( <span class="built_in">arguments</span>, <span class="number">1</span> ); </div><div class="line"> </div><div class="line">  <span class="comment">// Find the largest number in that array of arguments </span></div><div class="line">  <span class="keyword">var</span> largestAllButFirst = <span class="built_in">Math</span>.max.apply( <span class="built_in">Math</span>, allButFirst ); </div><div class="line"> </div><div class="line">  <span class="comment">// Return the multiplied result </span></div><div class="line">  <span class="keyword">return</span> multi * largestAllButFirst; </div><div class="line">&#125; </div><div class="line">assert( multiMax(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>) == <span class="number">9</span>, <span class="string">"3*3=9 (First arg, by largest.)"</span> );</div></pre></td></tr></table></figure><p>这是他提供的答案，虽然都是一样的结果，但是这个明显就更好一点，我一时没有想到用max，看来还是太菜了。</p><p>今晚就先写到这里，11点了，洗澡去了。</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇博客继续，来Learning Advanced JavaScript&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://blog.zhenly.cn/categories/Web/"/>
    
    
      <category term="学习笔记" scheme="https://blog.zhenly.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="https://blog.zhenly.cn/tags/Web/"/>
    
      <category term="JavaScript" scheme="https://blog.zhenly.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Web | Learning Advanced JavaScript 学习笔记 - 1</title>
    <link href="https://blog.zhenly.cn/2017/11/14/js-learning-1/"/>
    <id>https://blog.zhenly.cn/2017/11/14/js-learning-1/</id>
    <published>2017-11-14T13:57:00.000Z</published>
    <updated>2017-11-17T14:14:10.504Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://johnresig.com/apps/learn/" target="_blank" rel="external">https://johnresig.com/apps/learn/</a> 这个网站上有90+道题，帮助我们理解JavaScript。有空就逐条仔细分析了一下，如理解有误还请指出。</p><a id="more"></a><h2 id="Our-Goal"><a href="#Our-Goal" class="headerlink" title="Our Goal"></a>Our Goal</h2><h3 id="2-Goal-To-be-able-to-understand-this-function"><a href="#2-Goal-To-be-able-to-understand-this-function" class="headerlink" title="#2: Goal: To be able to understand this function:"></a>#2: Goal: To be able to understand this function:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// The .bind method from Prototype.js </span></div><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  <span class="keyword">var</span> fn = <span class="keyword">this</span>, args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>), object = args.shift(); </div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> fn.apply(object, </div><div class="line">      args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>))); </div><div class="line">  &#125;; </div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>以上的代码给Function对象添加了一个方法bind。这个方法创建一个新的函数, 当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列。简而言之，就是指定函数调用时上下文的this。</p><p>这里涉及到Javascript几个标准库</p><ol><li><p>Array.prototype.slice(begin, end) 返回一个从开始到结束（<strong>*不包括结束*</strong>）选择的数组的一部分<strong>浅拷贝</strong>到一个新数组对象。原始数组不会被修改。</p></li><li><p>Array.prototype.slice.call(arguments) 将一个类数组（Array-like）对象/集合转换成一个数组。</p><p>那么什么是 Array-Like Objects？不是数组，但是有 <code>length</code> 属性，且属性值为非负 Number 类型即可。函数的参数 arguments 就是 Array-Like Objects 的一种，能像数组一样用 <code>[]</code> 去访问 arguments 的元素，有 <code>length</code> 属性，但是却不能用一些数组的方法，如 push，pop，等等。还有获取DOM之类的方法返回的 NodeList 和 HTMLCollection也属于类数组。</p></li><li><p>Array.prototype.shift()  从数组中<strong>删除</strong>第一个元素，并返回该元素的值。此方法更改数组的长度。</p></li><li><p>Array.prototype.concat() 用于合并两个或多个数组。此方法不会更改现有数组，而是返回一个新数组。</p></li><li><p>Function.prototype.apply((thisArg, [argsArray]) 调用一个函数, 其具有一个指定的<code>this</code>值，以及作为一个数组（或[类似数组的对])提供的参数</p></li></ol><p>下面是一个简单的例子，更多具体的例子可以上MDN查看（如偏函数）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.x = <span class="number">9</span>; </div><div class="line"><span class="keyword">var</span> <span class="built_in">module</span> = &#123;</div><div class="line">  <span class="attr">x</span>: <span class="number">81</span>,</div><div class="line">  <span class="attr">getX</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="keyword">return</span> <span class="keyword">this</span>.x; &#125;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.getX(); <span class="comment">// 返回 81</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> retrieveX = <span class="built_in">module</span>.getX;</div><div class="line">retrieveX(); <span class="comment">// 返回 9, 在这种情况下，"this"指向全局作用域</span></div><div class="line"></div><div class="line"><span class="comment">// 创建一个新函数，将"this"绑定到module对象</span></div><div class="line"><span class="comment">// 新手可能会被全局的x变量和module里的属性x所迷惑</span></div><div class="line"><span class="keyword">var</span> boundGetX = retrieveX.bind(<span class="built_in">module</span>);</div><div class="line">boundGetX(); <span class="comment">// 返回 81</span></div></pre></td></tr></table></figure><p>这里面有几点需要注意的地方，比如两个arguments是不同的。下面再举个例子来说明一下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Usage:</span></div><div class="line"><span class="keyword">var</span> boundFunc = func.bind(obj, arg1, arg2);</div><div class="line">boundFunc(arg3, arg4);</div><div class="line"></div><div class="line"><span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; <span class="comment">// f1</span></div><div class="line"><span class="keyword">var</span> fn = <span class="keyword">this</span>;  <span class="comment">//fn will be initialized to func</span></div><div class="line"><span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>); <span class="comment">// args will be [obj, arg1, arg2]</span></div><div class="line"><span class="keyword">var</span> object = args.shift(); <span class="comment">// object will be obj, args will be [arg1, arg2]</span></div><div class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="comment">// f2</span></div><div class="line">      <span class="comment">// arguments is array-like [arg3, arg4]</span></div><div class="line">      <span class="keyword">var</span> allArgs = args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)) <span class="comment">// allArgs is [arg1, arg2, arg3, arg4]</span></div><div class="line">      <span class="keyword">return</span> fn.apply(object, allArgs); <span class="comment">// func called with obj as this and arg1, arg2, arg3, arg4 as arguments </span></div><div class="line">    &#125;;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>这里bind是包含在JavaScript的标准库里面的，还要提一下，在某些场景下，可以使用ES6的箭头函数=&gt;代替bind，因为箭头函数是可以绑定固定的this的，下面有个简短的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> handler = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="string">'123456'</span>,</div><div class="line"></div><div class="line">  <span class="attr">init</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">document</span>.addEventListener(<span class="string">'click'</span>,</div><div class="line">      event =&gt; <span class="keyword">this</span>.doSomething(event.type), <span class="literal">false</span>);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  <span class="attr">doSomething</span>: <span class="function"><span class="keyword">function</span>(<span class="params">type</span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'Handling '</span> + type  + <span class="string">' for '</span> + <span class="keyword">this</span>.id);</div><div class="line">  &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>上面代码的<code>init</code>方法中，使用了箭头函数，这导致这个箭头函数里面的<code>this</code>，总是指向<code>handler</code>对象。否则，回调函数运行时，<code>this.doSomething</code>这一行会报错，因为此时<code>this</code>指向<code>document</code>对象。</p><p><code>this</code>指向的固定化，并不是因为箭头函数内部有绑定<code>this</code>的机制，实际原因是箭头函数根本没有自己的<code>this</code>，导致内部的<code>this</code>就是外层代码块的<code>this</code>。正是因为它没有<code>this</code>，所以也就不能用作构造函数。</p><p>或者用ES7的绑定运算符<code>::</code>, 该操作符会将左值和右值(一个函数)进行绑定。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">foo::bar</div><div class="line">bar.bind(foo)</div><div class="line"><span class="comment">// 等价的</span></div><div class="line">foo::bar(...arguments)</div><div class="line">bar.apply(foo, <span class="built_in">arguments</span>)</div><div class="line"><span class="comment">// 等价的</span></div><div class="line"><span class="keyword">var</span> method = ::obj.foo</div><div class="line"><span class="keyword">var</span> method = obj.foo.bind(obj)</div><div class="line"><span class="comment">// 等价的</span></div></pre></td></tr></table></figure><p>参考资料：</p><p> <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice</a></p><p><a href="https://www.cnblogs.com/zichi/p/5616050.html" target="_blank" rel="external">https://www.cnblogs.com/zichi/p/5616050.html</a></p><p><a href="https://stackoverflow.com/questions/20091669/magic-of-array-prototype-slice-callx-concatarray-prototype-slice-callx" target="_blank" rel="external">https://stackoverflow.com/questions/20091669/magic-of-array-prototype-slice-callx-concatarray-prototype-slice-callx</a></p><p><a href="http://blog.jobbole.com/58032/" target="_blank" rel="external">http://blog.jobbole.com/58032/</a></p><p><a href="https://segmentfault.com/a/1190000004568359" target="_blank" rel="external">https://segmentfault.com/a/1190000004568359</a></p><p><a href="http://blog.csdn.net/wlpxq/article/details/68061717" target="_blank" rel="external">http://blog.csdn.net/wlpxq/article/details/68061717</a></p><h3 id="3-Some-helper-methods-that-we-have"><a href="#3-Some-helper-methods-that-we-have" class="headerlink" title="#3: Some helper methods that we have:"></a>#3: Some helper methods that we have:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">assert( <span class="literal">true</span>, <span class="string">"I'll pass."</span> ); </div><div class="line">assert( <span class="string">"truey"</span>, <span class="string">"So will I."</span> ); </div><div class="line">assert( <span class="literal">false</span>, <span class="string">"I'll fail."</span> ); </div><div class="line">assert( <span class="literal">null</span>, <span class="string">"So will I."</span> ); </div><div class="line">log( <span class="string">"Just a simple log"</span>, <span class="string">"of"</span>, <span class="string">"values."</span>, <span class="literal">true</span> ); </div><div class="line">error( <span class="string">"I'm an error!"</span> );</div></pre></td></tr></table></figure><p>这里介绍了几个console下的函数，调试使用。我最近在重构的Violet里面引入了一个assert库，用于koa的洋葱结构感觉是非常的优雅的，当assert不通过的时候，直接返回400错误给服务端，然后结束这次请求，大大减少了回调什么的，使得代码更加清晰易懂。</p><h2 id="Defining-Functions"><a href="#Defining-Functions" class="headerlink" title="Defining Functions"></a>Defining Functions</h2><h3 id="5-What-ways-can-we-define-functions"><a href="#5-What-ways-can-we-define-functions" class="headerlink" title="#5: What ways can we define functions?"></a>#5: What ways can we define functions?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNimble</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125; </div><div class="line"><span class="keyword">var</span> canFly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;; </div><div class="line"><span class="built_in">window</span>.isDeadly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;; </div><div class="line">log(isNimble, canFly, isDeadly);</div></pre></td></tr></table></figure><p>这里列举了三种函数定义的方法。挺容易理解的。当然es6里面还有箭头函数，上面已经稍微讲过一下。</p><h3 id="6-Does-the-order-of-function-definition-matter"><a href="#6-Does-the-order-of-function-definition-matter" class="headerlink" title="#6: Does the order of function definition matter?"></a>#6: Does the order of function definition matter?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canFly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;; </div><div class="line"><span class="built_in">window</span>.isDeadly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;; </div><div class="line">assert( isNimble() &amp;&amp; canFly() &amp;&amp; isDeadly(), <span class="string">"Still works, even though isNimble is moved."</span> ); </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isNimble</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;</div></pre></td></tr></table></figure><p>这里告诉我们函数的顺序是没有关系的，因为所有函数都会自动提升到文件的顶端。但是要注意的是变量会自动提升，赋值给变量的匿名函数并不会提升，此时变量还是undefined所以之后最后一行那种定义方法才会提升。</p><h3 id="7-Where-can-assignments-be-accessed"><a href="#7-Where-can-assignments-be-accessed" class="headerlink" title="#7: Where can assignments be accessed?"></a>#7: Where can assignments be accessed?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">assert( <span class="keyword">typeof</span> canFly == <span class="string">"undefined"</span>, <span class="string">"canFly doesn't get that benefit."</span> ); </div><div class="line">assert( <span class="keyword">typeof</span> isDeadly == <span class="string">"undefined"</span>, <span class="string">"Nor does isDeadly."</span> ); </div><div class="line"><span class="keyword">var</span> canFly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;; </div><div class="line"><span class="built_in">window</span>.isDeadly = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125;;</div></pre></td></tr></table></figure><p>这里就是说明了上面那个问题，不多说了。</p><h3 id="8-Can-functions-be-defined-below-return-statements"><a href="#8-Can-functions-be-defined-below-return-statements" class="headerlink" title="#8: Can functions be defined below return statements?"></a>#8: Can functions be defined below return statements?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">stealthCheck</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  assert( stealth(), <span class="string">"We'll never get below the return, but that's OK!"</span> ); </div><div class="line"> </div><div class="line">  <span class="keyword">return</span> stealth(); </div><div class="line"> </div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">stealth</span>(<span class="params"></span>)</span>&#123; <span class="keyword">return</span> <span class="literal">true</span>; &#125; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">stealthCheck();</div></pre></td></tr></table></figure><p>在return后面写的东西是不会运行的，但是这个函数是会自动提升到顶部。但是还是不建议把内容写在return后面。</p><h2 id="Named-Functions"><a href="#Named-Functions" class="headerlink" title="Named Functions"></a>Named Functions</h2><h3 id="10-We-can-refer-to-a-function-within-itself-by-its-name"><a href="#10-We-can-refer-to-a-function-within-itself-by-its-name" class="headerlink" title="#10: We can refer to a function, within itself, by its name."></a>#10: We can refer to a function, within itself, by its name.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">yell</span>(<span class="params">n</span>)</span>&#123; </div><div class="line">  <span class="keyword">return</span> n &gt; <span class="number">0</span> ? yell(n<span class="number">-1</span>) + <span class="string">"a"</span> : <span class="string">"hiy"</span>; </div><div class="line">&#125; </div><div class="line">assert( yell(<span class="number">4</span>) == <span class="string">"hiyaaaa"</span>, <span class="string">"Calling the function by itself comes naturally."</span> );</div></pre></td></tr></table></figure><p>递归调用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> yell = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> n &gt; <span class="number">0</span> ? yell(n - <span class="number">1</span>) + <span class="string">"a"</span> : <span class="string">"hiy"</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 这种方法也是可行的</span></div></pre></td></tr></table></figure><h3 id="11-What-is-the-name-of-a-function"><a href="#11-What-is-the-name-of-a-function" class="headerlink" title="#11: What is the name of a function?"></a>#11: What is the name of a function?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ninja = <span class="function"><span class="keyword">function</span> <span class="title">myNinja</span>(<span class="params"></span>)</span>&#123; </div><div class="line">  assert( ninja == myNinja, <span class="string">"This function is named two things - at once!"</span> ); </div><div class="line">&#125;; </div><div class="line">ninja(); </div><div class="line">assert( <span class="keyword">typeof</span> myNinja == <span class="string">"undefined"</span>, <span class="string">"But myNinja isn't defined outside of the function."</span> ); </div><div class="line">log( ninja );</div></pre></td></tr></table></figure><p>这里的ninja与myNinja在函数内部就是指同一个东西。但是ninja作用域是当前函数作用域(可以说是整个windows下)，而myNinja这个名字的作用域只是在myNinja这个函数里的作用域。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 外部可访问到a，不能访问abc</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;&#125; <span class="comment">// 外部可访问abc</span></div><div class="line"><span class="comment">// 个人认为以上一句是相当于</span></div><div class="line"><span class="keyword">var</span> abc = <span class="function"><span class="keyword">function</span> <span class="title">abc</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"><span class="comment">// 默认把函数复制给同名变量</span></div></pre></td></tr></table></figure><h3 id="12-We-can-even-do-it-if-we’re-an-anonymous-function-that’s-an-object-property"><a href="#12-We-can-even-do-it-if-we’re-an-anonymous-function-that’s-an-object-property" class="headerlink" title="#12: We can even do it if we’re an anonymous function that’s an object property."></a>#12: We can even do it if we’re an anonymous function that’s an object property.</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ninja = &#123; </div><div class="line">  <span class="attr">yell</span>: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> ? ninja.yell(n<span class="number">-1</span>) + <span class="string">"a"</span> : <span class="string">"hiy"</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line">assert( ninja.yell(<span class="number">4</span>) == <span class="string">"hiyaaaa"</span>, <span class="string">"A single object isn't too bad, either."</span> );</div></pre></td></tr></table></figure><p>这是在另一个情境下的递归调用，由于这个函数是一个匿名函数，所以只能通过对象来调用</p><h3 id="13-But-what-happens-when-we-remove-the-original-object"><a href="#13-But-what-happens-when-we-remove-the-original-object" class="headerlink" title="#13: But what happens when we remove the original object?"></a>#13: But what happens when we remove the original object?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ninja = &#123; </div><div class="line">  <span class="attr">yell</span>: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> ? ninja.yell(n<span class="number">-1</span>) + <span class="string">"a"</span> : <span class="string">"hiy"</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line">assert( ninja.yell(<span class="number">4</span>) == <span class="string">"hiyaaaa"</span>, <span class="string">"A single object isn't too bad, either."</span> ); </div><div class="line"> </div><div class="line"><span class="keyword">var</span> samurai = &#123; <span class="attr">yell</span>: ninja.yell &#125;; </div><div class="line"><span class="keyword">var</span> ninja = <span class="literal">null</span>; <span class="comment">//移除原对象</span></div><div class="line"><span class="comment">// ninja = null;</span></div><div class="line"><span class="comment">// ninja.yell = null;</span></div><div class="line"><span class="comment">// 都是一样的效果</span></div><div class="line"> </div><div class="line"><span class="keyword">try</span> &#123; </div><div class="line">  samurai.yell(<span class="number">4</span>); </div><div class="line">&#125; <span class="keyword">catch</span>(e)&#123; </div><div class="line">  assert( <span class="literal">false</span>, <span class="string">"Uh, this isn't good! Where'd ninja.yell go?"</span> ); </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>因为yell是一个匿名函数，并没有进行声明，只有在调用的时候被执行，这里的samurai只是单纯地引用了对象ninja里面的yell方法，如果原来的对象或方法消失了，那么samurai下的yell也失去了作用。</p><h3 id="14-Let’s-give-the-anonymous-function-a-name"><a href="#14-Let’s-give-the-anonymous-function-a-name" class="headerlink" title="#14: Let’s give the anonymous function a name!"></a>#14: Let’s give the anonymous function a name!</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ninja = &#123; </div><div class="line">  <span class="attr">yell</span>: <span class="function"><span class="keyword">function</span> <span class="title">yell</span>(<span class="params">n</span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> ? yell(n<span class="number">-1</span>) + <span class="string">"a"</span> : <span class="string">"hiy"</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line">assert( ninja.yell(<span class="number">4</span>) == <span class="string">"hiyaaaa"</span>, <span class="string">"Works as we would expect it to!"</span> ); </div><div class="line"> </div><div class="line"><span class="keyword">var</span> samurai = &#123; <span class="attr">yell</span>: ninja.yell &#125;; </div><div class="line"><span class="keyword">var</span> ninja = &#123;&#125;; </div><div class="line">assert( samurai.yell(<span class="number">4</span>) == <span class="string">"hiyaaaa"</span>, <span class="string">"The method correctly calls itself."</span> );</div></pre></td></tr></table></figure><p>这里的yell是一个具名函数，,在属性被创建并赋值时，便声明了以属性键名为名的函数。对于samurai的yell的赋值是直接把函数赋值给了他，所以当源对象被删除之后，那个函数依然存在。</p><h3 id="15-What-if-we-don’t-want-to-give-the-function-a-name"><a href="#15-What-if-we-don’t-want-to-give-the-function-a-name" class="headerlink" title="#15: What if we don’t want to give the function a name?"></a>#15: What if we don’t want to give the function a name?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> ninja = &#123; </div><div class="line">  <span class="attr">yell</span>: <span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123; </div><div class="line">    <span class="keyword">return</span> n &gt; <span class="number">0</span> ? <span class="built_in">arguments</span>.callee(n<span class="number">-1</span>) + <span class="string">"a"</span> : <span class="string">"hiy"</span>; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line">assert( ninja.yell(<span class="number">4</span>) == <span class="string">"hiyaaaa"</span>, <span class="string">"arguments.callee is the function itself."</span> );</div></pre></td></tr></table></figure><p>这里通过arguments.callee调用自身来完成匿名函数的递归，但是 arguments.callee已经从 从ES5严格模式中删除了，因为他使得在通常的情况不可能实现内联和尾递归。另外一个主要原因是递归调用会获取到一个不同的 <code>this</code> 值，。所以不建议用这种方法，因为我们可以使用具名函数来完成相同的功能。</p><p>参考资料：<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee" target="_blank" rel="external">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments/callee</a></p><h2 id="Functions-as-Objects"><a href="#Functions-as-Objects" class="headerlink" title="Functions as Objects"></a>Functions as Objects</h2><h3 id="17-How-similar-are-functions-and-objects"><a href="#17-How-similar-are-functions-and-objects" class="headerlink" title="#17: How similar are functions and objects?"></a>#17: How similar are functions and objects?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;; </div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </div><div class="line">assert( obj &amp;&amp; fn, <span class="string">"Both the object and function exist."</span> );</div></pre></td></tr></table></figure><p>空对象和空函数都是存在的。</p><h3 id="18-How-similar-are-functions-and-objects"><a href="#18-How-similar-are-functions-and-objects" class="headerlink" title="#18: How similar are functions and objects?"></a>#18: How similar are functions and objects?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;; </div><div class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;; </div><div class="line">obj.prop = <span class="string">"some value"</span>; </div><div class="line">fn.prop = <span class="string">"some value"</span>; </div><div class="line">assert( obj.prop == fn.prop, <span class="string">"Both are objects, both have the property."</span> );</div></pre></td></tr></table></figure><p>JavaScript 只有一种结构：对象。函数的本质就是对象，都存在各自的属性。</p><h3 id="19-Is-it-possible-to-cache-the-return-results-from-a-function"><a href="#19-Is-it-possible-to-cache-the-return-results-from-a-function" class="headerlink" title="#19: Is it possible to cache the return results from a function?"></a>#19: Is it possible to cache the return results from a function?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getElements</span>(<span class="params"> name </span>) </span>&#123; </div><div class="line">  <span class="keyword">var</span> results; </div><div class="line"> </div><div class="line">  <span class="keyword">if</span> ( getElements.cache[name] ) &#123; </div><div class="line">    results = getElements.cache[name]; </div><div class="line">  &#125; <span class="keyword">else</span> &#123; </div><div class="line">    results = <span class="built_in">document</span>.getElementsByTagName(name); </div><div class="line">    getElements.cache[name] = results; </div><div class="line">  &#125; </div><div class="line"> </div><div class="line">  <span class="keyword">return</span> results; </div><div class="line">&#125; </div><div class="line">getElements.cache = &#123;&#125;; </div><div class="line"> </div><div class="line">log( <span class="string">"Elements found: "</span>, getElements(<span class="string">"pre"</span>).length ); </div><div class="line">log( <span class="string">"Cache found: "</span>, getElements.cache.pre.length );</div></pre></td></tr></table></figure><p>这里要说的大概是函数是一个对象，因此可以具有各种属性，那么就自然可以把数据保存在自身的属性里面，这里面的cache就是这个函数的其中一个属性。函数把运行结果存储在getElements.cache.pre里面。展示了函数作为对象的优势。</p><h3 id="20-QUIZ-Can-you-cache-the-results-of-this-function"><a href="#20-QUIZ-Can-you-cache-the-results-of-this-function" class="headerlink" title="#20: QUIZ: Can you cache the results of this function?"></a>#20: QUIZ: Can you cache the results of this function?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params"> num </span>) </span>&#123; </div><div class="line">  <span class="keyword">var</span> prime = num != <span class="number">1</span>; <span class="comment">// Everything but 1 can be prime </span></div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">2</span>; i &lt; num; i++ ) &#123; </div><div class="line">    <span class="keyword">if</span> ( num % i == <span class="number">0</span> ) &#123; </div><div class="line">      prime = <span class="literal">false</span>; </div><div class="line">      <span class="keyword">break</span>; </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">  <span class="keyword">return</span> prime; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">assert( isPrime(<span class="number">5</span>), <span class="string">"Make sure the function works, 5 is prime."</span> ); </div><div class="line">assert( isPrime.cache[<span class="number">5</span>], <span class="string">"Is the answer cached?"</span> );</div></pre></td></tr></table></figure><p>这是一道问题，仿照上一题就很容易做出来</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span> (isPrime.cache[num]) &#123;</div><div class="line">    <span class="keyword">return</span> isPrime.cache[num];</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">var</span> prime = num != <span class="number">1</span>; <span class="comment">// Everything but 1 can be prime</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">2</span>; i &lt; num; i++) &#123;</div><div class="line">      <span class="keyword">if</span> (num % i == <span class="number">0</span>) &#123;</div><div class="line">        prime = <span class="literal">false</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    isPrime.cache[num] = prime;</div><div class="line">    <span class="keyword">return</span> prime;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">isPrime.cache = &#123;&#125;; <span class="comment">// 要初始化cache，否则访问其子元素会报错</span></div><div class="line">assert(isPrime(<span class="number">5</span>), <span class="string">"Make sure the function works, 5 is prime."</span>);</div><div class="line">assert(isPrime.cache[<span class="number">5</span>], <span class="string">"Is the answer cached?"</span>);</div></pre></td></tr></table></figure><h3 id="21-One-possible-way-to-cache-the-results"><a href="#21-One-possible-way-to-cache-the-results" class="headerlink" title="#21: One possible way to cache the results:"></a>#21: One possible way to cache the results:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">isPrime</span>(<span class="params"> num </span>) </span>&#123; </div><div class="line">  <span class="keyword">if</span> ( isPrime.cache[ num ] != <span class="literal">null</span> ) </div><div class="line">    <span class="keyword">return</span> isPrime.cache[ num ]; </div><div class="line">   </div><div class="line">  <span class="keyword">var</span> prime = num != <span class="number">1</span>; <span class="comment">// Everything but 1 can be prime </span></div><div class="line">  <span class="keyword">for</span> ( <span class="keyword">var</span> i = <span class="number">2</span>; i &lt; num; i++ ) &#123; </div><div class="line">    <span class="keyword">if</span> ( num % i == <span class="number">0</span> ) &#123; </div><div class="line">      prime = <span class="literal">false</span>; </div><div class="line">      <span class="keyword">break</span>; </div><div class="line">    &#125; </div><div class="line">  &#125; </div><div class="line">  </div><div class="line">  isPrime.cache[ num ] = prime </div><div class="line">  </div><div class="line">  <span class="keyword">return</span> prime; </div><div class="line">&#125; </div><div class="line"> </div><div class="line">isPrime.cache = &#123;&#125;; </div><div class="line"> </div><div class="line">assert( isPrime(<span class="number">5</span>), <span class="string">"Make sure the function works, 5 is prime."</span> ); </div><div class="line">assert( isPrime.cache[<span class="number">5</span>], <span class="string">"Make sure the answer is cached."</span> );</div></pre></td></tr></table></figure><p>他自己给出来了一种方法，和我的也差不多。</p><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><h3 id="23-What-happens-if-a-function-is-an-object-property"><a href="#23-What-happens-if-a-function-is-an-object-property" class="headerlink" title="#23: What happens if a function is an object property?"></a>#23: What happens if a function is an object property?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> katana = &#123; </div><div class="line">  <span class="attr">isSharp</span>: <span class="literal">true</span>, </div><div class="line">  <span class="attr">use</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123; </div><div class="line">    <span class="keyword">this</span>.isSharp = !<span class="keyword">this</span>.isSharp; </div><div class="line">  &#125; </div><div class="line">&#125;; </div><div class="line">katana.use(); </div><div class="line">assert( !katana.isSharp, <span class="string">"Verify the value of isSharp has been changed."</span> );</div></pre></td></tr></table></figure><p>当一个匿名函数作为一个对象的属性的时候，那么this就是指这个对象，函数可以访问并修改对象的属性</p><p>未完待续…</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://johnresig.com/apps/learn/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://johnresig.com/apps/learn/&lt;/a&gt; 这个网站上有90+道题，帮助我们理解JavaScript。有空就逐条仔细分析了一下，如理解有误还请指出。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://blog.zhenly.cn/categories/Web/"/>
    
    
      <category term="学习笔记" scheme="https://blog.zhenly.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Web" scheme="https://blog.zhenly.cn/tags/Web/"/>
    
      <category term="JavaScript" scheme="https://blog.zhenly.cn/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Linux | 配置邮件发送系统</title>
    <link href="https://blog.zhenly.cn/2017/09/18/linux-email/"/>
    <id>https://blog.zhenly.cn/2017/09/18/linux-email/</id>
    <published>2017-09-18T12:32:27.000Z</published>
    <updated>2017-10-31T15:59:39.555Z</updated>
    
    <content type="html"><![CDATA[<p>今天由于某不可抗力因素导致服务器被重装了，幸好没有从删库到跑路，只是violet和xmoj系统还有一系列的服务重新配置一下，以为violet配置成功的时候突然发现邮箱系统没有配置，又没有相关的博客，所以就记录下来，以便以后查看<br><a id="more"></a></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于重装了的是centos，实际上感觉也比ubuntu好用，所以用yum安装。这里采用的是msmtp+mutt的配合</p><p>msmtp是发送邮件的，mutt实际上只是一个管理工具，两者加起来就可以用起来十分方便了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yum install msmtp mutt</div></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>对于邮箱系统的配置，一般是在用户目录下设置配置文件，我们在root文件夹里面新建两个配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>## .muttrc</div><div class="line"><span class="meta">#</span> msmtp的路径</div><div class="line">set sendmail="/usr/bin/msmtp"</div><div class="line">set use_from=yes</div><div class="line"><span class="meta">#</span> 显示的名称</div><div class="line">set realname="XMatrix"</div><div class="line"><span class="meta">#</span> 邮箱地址</div><div class="line">set from=xmatrix@zhenly.cn</div><div class="line">set envelope_from=yes</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span>## .msmtprc</div><div class="line">defaults</div><div class="line">account emailaccount</div><div class="line"><span class="meta">#</span> 邮件服务商提供的smtp服务器</div><div class="line">host smtp.exmail.qq.com</div><div class="line"><span class="meta">#</span> 邮箱地址</div><div class="line">from xmatrix@zhenly.cn</div><div class="line">auth login</div><div class="line"><span class="meta">#</span> 用户名</div><div class="line">user xmatrix@zhenly.cn</div><div class="line"><span class="meta">#</span> 密码</div><div class="line">password *************</div><div class="line"><span class="meta">#</span> 日志文件</div><div class="line">logfile ~/.msmtp.log</div><div class="line">account default: emailaccount</div></pre></td></tr></table></figure><h2 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 发送文本内容</div><div class="line">echo "文本内容" |　mutt 收件人邮箱@zhenly.cn -s "邮件标题"</div><div class="line">mutt 收件人邮箱@zhenly.cn -s "邮件标题" -a /附件地址 &lt;/readme.txt</div><div class="line"><span class="meta">#</span> 发送附件</div><div class="line">echo "文本内容" |　mutt 收件人邮箱@zhenly.cn -s "邮件标题" -a /附件地址</div><div class="line"><span class="meta">#</span> 发送网页内容</div><div class="line">cat mail.html |mutt -s "邮件标题" -e 'set content_type="text/html"' 收件人邮箱@zhenly.cn</div></pre></td></tr></table></figure><p>注意：在Ubuntu下需要配置好配置文件的权限，不然无法自动调用脚本，还要加个sudo</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo chmod 600 .msmtprc .msmtp.log .muttrc</div><div class="line">sudo chown ubuntu:ubuntu .msmtprc .msmtp.log .muttrc</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天由于某不可抗力因素导致服务器被重装了，幸好没有从删库到跑路，只是violet和xmoj系统还有一系列的服务重新配置一下，以为violet配置成功的时候突然发现邮箱系统没有配置，又没有相关的博客，所以就记录下来，以便以后查看&lt;br&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhenly.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.zhenly.cn/tags/Linux/"/>
    
      <category term="运维" scheme="https://blog.zhenly.cn/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Web | WebPack 配置过程（Vue、Babel、Sass）</title>
    <link href="https://blog.zhenly.cn/2017/09/16/WebPack-setup/"/>
    <id>https://blog.zhenly.cn/2017/09/16/WebPack-setup/</id>
    <published>2017-09-16T02:01:22.000Z</published>
    <updated>2017-09-16T03:44:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>打算重构XMoj的前端，使用新的架构，记录下配置过程，以便以后查询，如果你也想用这个架构，那么这篇文章将带你一步一步安装和配置各种环境，一步步地了解各种组件的基本使用方式，最后搭成一个多组件的网页应用。如果你想快速搭建，那么可以直接看文章底部。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>首先我们先新建一个工程的文件夹，并且用npm初始化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//全局安装</div><div class="line">npm install -g webpack</div><div class="line">//初始化项目</div><div class="line">npm init</div><div class="line">//安装到你的项目目录</div><div class="line">npm install --save-dev webpack</div></pre></td></tr></table></figure><h2 id="基本项目结构"><a href="#基本项目结构" class="headerlink" title="基本项目结构"></a>基本项目结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Project</div><div class="line">node_modules</div><div class="line">...</div><div class="line">app</div><div class="line">test.js</div><div class="line">main.js</div><div class="line">public</div><div class="line">index.html</div><div class="line">index.js</div><div class="line">package.json</div><div class="line">webpack.config.js</div></pre></td></tr></table></figure><h2 id="一个简单的例子"><a href="#一个简单的例子" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main.js </span></div><div class="line"><span class="keyword">const</span> greeter = <span class="built_in">require</span>(<span class="string">'./test.js'</span>);</div><div class="line"><span class="built_in">document</span>.querySelector(<span class="string">"#root"</span>).appendChild(greeter());</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// test.js</span></div><div class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</div><div class="line">  greet.textContent = <span class="string">"Hi there and greetings!"</span>;</div><div class="line">  <span class="keyword">return</span> greet;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- index.html --&gt;</span></div><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">'root'</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><h2 id="开始使用Webpack"><a href="#开始使用Webpack" class="headerlink" title="开始使用Webpack"></a>开始使用Webpack</h2><h3 id="直接命令行调用"><a href="#直接命令行调用" class="headerlink" title="直接命令行调用"></a>直接命令行调用</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack app/main.js public/bundle.js</div></pre></td></tr></table></figure><h3 id="通过Webpack配置调用"><a href="#通过Webpack配置调用" class="headerlink" title="通过Webpack配置调用"></a>通过Webpack配置调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">entry</span>:  __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></div><div class="line">    filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">webpack</div></pre></td></tr></table></figure><h3 id="通过项目配置调用"><a href="#通过项目配置调用" class="headerlink" title="通过项目配置调用"></a>通过项目配置调用</h3><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line">&#123;</div><div class="line">  "name": "webpack-sample-project",</div><div class="line">  "version": "1.0.0",</div><div class="line">  "description": "Sample webpack project",</div><div class="line">  "scripts": &#123;</div><div class="line">    "start": "webpack" // 修改的是这里，JSON文件不支持注释，引用时请清除</div><div class="line">  &#125;,</div><div class="line">  "author": "zhang",</div><div class="line">  "license": "ISC",</div><div class="line">  "devDependencies": &#123;</div><div class="line">    "webpack": "^1.12.9"</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm start</div></pre></td></tr></table></figure><h2 id="生成Source-Maps"><a href="#生成Source-Maps" class="headerlink" title="生成Source Maps"></a>生成Source Maps</h2><table><thead><tr><th>devtool选项</th><th>配置结果</th></tr></thead><tbody><tr><td>source-map</td><td>在一个单独的文件中产生一个完整且功能完全的文件。这个文件具有最好的<code>source map</code>，但是它会减慢打包速度；</td></tr><tr><td>cheap-module-source-map</td><td>在一个单独的文件中生成一个不带列映射的<code>map</code>，不带列映射提高了打包速度，但是也使得浏览器开发者工具只能对应到具体的行，不能对应到具体的列（符号），会对调试造成不便；</td></tr><tr><td>eval-source-map</td><td>使用<code>eval</code>打包源文件模块，在同一个文件中生成干净的完整的<code>source map</code>。这个选项可以在不影响构建速度的前提下生成完整的<code>sourcemap</code>，但是对打包后输出的JS文件的执行具有性能和安全的隐患。在开发阶段这是一个非常好的选项，在生产阶段则一定不要启用这个选项；</td></tr><tr><td>cheap-module-eval-source-map</td><td>这是在打包文件时最快的生成<code>source map</code>的方法，生成的<code>Source Map</code> 会和打包后的<code>JavaScript</code>文件同行显示，没有列映射，和<code>eval-source-map</code>选项具有相似的缺点</td></tr></tbody></table><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,</div><div class="line">  <span class="attr">entry</span>:  __dirname + <span class="string">"/app/main.js"</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">"/public"</span>,</div><div class="line">    <span class="attr">filename</span>: <span class="string">"bundle.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install --save-dev webpack-dev-server</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>, <span class="comment">//source-map cheap-module-source-map eval-source-map cheap-module-eval-source-map</span></div><div class="line">  entry: __dirname + <span class="string">"/app/main.js"</span>, <span class="comment">//唯一入口文件</span></div><div class="line">  output: &#123;</div><div class="line">    <span class="attr">path</span>: __dirname + <span class="string">"/public"</span>, <span class="comment">//打包后的文件存放的地方</span></div><div class="line">    filename: <span class="string">"bundle.js"</span> <span class="comment">//打包后输出文件的文件名</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">devServer</span>: &#123;</div><div class="line">    <span class="attr">contentBase</span>: <span class="string">"./public"</span>, <span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">//不跳转</span></div><div class="line">    inline: <span class="literal">true</span>, <span class="comment">//实时刷新</span></div><div class="line">    port: <span class="number">8080</span></div><div class="line">  &#125;,</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// package.json</div><div class="line">"scripts": &#123;</div><div class="line">    "test": "echo \"Error: no test specified\" &amp;&amp; exit 1",</div><div class="line">    "start": "webpack",</div><div class="line">    "server": "webpack-dev-server --open"</div><div class="line"> &#125;,</div></pre></td></tr></table></figure><h2 id="Babel模块安装"><a href="#Babel模块安装" class="headerlink" title="Babel模块安装"></a>Babel模块安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// npm一次性安装多个依赖模块，模块之间用空格隔开</div><div class="line">npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">entry</span>: __dirname + <span class="string">"/app/main.js"</span>,<span class="comment">//已多次提及的唯一入口文件</span></div><div class="line">    output: &#123;</div><div class="line">        <span class="attr">path</span>: __dirname + <span class="string">"/public"</span>,<span class="comment">//打包后的文件存放的地方</span></div><div class="line">        filename: <span class="string">"bundle.js"</span><span class="comment">//打包后输出文件的文件名</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>,</div><div class="line">    <span class="attr">devServer</span>: &#123;</div><div class="line">        <span class="attr">contentBase</span>: <span class="string">"./public"</span>,<span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">        historyApiFallback: <span class="literal">true</span>,<span class="comment">//不跳转</span></div><div class="line">        inline: <span class="literal">true</span><span class="comment">//实时刷新</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">module</span>: &#123;</div><div class="line">        <span class="attr">rules</span>: [</div><div class="line">            &#123;</div><div class="line">                <span class="attr">test</span>: <span class="regexp">/(\.jsx|\.js)$/</span>,</div><div class="line">                <span class="attr">use</span>: &#123;</div><div class="line">                    <span class="attr">loader</span>: <span class="string">"babel-loader"</span></div><div class="line">                &#125;,</div><div class="line">                <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">            &#125;</div><div class="line">        ]</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><p>配置文件放项目根目录下</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//.babelrc</div><div class="line">&#123;</div><div class="line">  "presets": ["react", "es2015"]</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Vue模块安装"><a href="#Vue模块安装" class="headerlink" title="Vue模块安装"></a>Vue模块安装</h2><h3 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 安装vue</div><div class="line">npm install --save vue</div><div class="line">// 解析vue组件</div><div class="line">npm install --save-dev vue-loader vue-template-compiler</div><div class="line">// 解析CSS</div><div class="line">npm install --save-dev css-loader file-loader</div></pre></td></tr></table></figure><h3 id="一个简单的例子-1"><a href="#一个简单的例子-1" class="headerlink" title="一个简单的例子"></a>一个简单的例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">&lt;!-- ./src/App.vue --&gt;</div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;example&quot;&gt;</div><div class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;n in 5&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      msg: &apos;Hello World!&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style scoped&gt;</div><div class="line">#example &#123;</div><div class="line">  background: red;</div><div class="line">  height: 100vh;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ./src/main.js</span></div><div class="line"><span class="comment">/* 引入vue和主页 */</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></div><div class="line"></div><div class="line"><span class="comment">/* 实例化一个vue */</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line"> <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line"> <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</div><div class="line">&#125;)</div></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- ./index.html--&gt;</span></div><div class="line"><span class="meta">&lt;!doctype html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0, user-scalable=0, minimum-scale=1.0, maximum-scale=1.0"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-webpack<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"./dist/build.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>, <span class="comment">//source-map cheap-module-source-map eval-source-map cheap-module-eval-source-map</span></div><div class="line">  entry: <span class="string">'./src/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="comment">/* 输出目录，没有则新建 */</span></div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    <span class="comment">/* 静态目录，可以直接从这里取文件 */</span></div><div class="line">    publicPath: <span class="string">'/dist/'</span>,</div><div class="line">    <span class="comment">/* 文件名 */</span></div><div class="line">    filename: <span class="string">'build.js'</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">devServer</span>: &#123;</div><div class="line">    <span class="attr">contentBase</span>: <span class="string">"./public"</span>, <span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">//不跳转</span></div><div class="line">    inline: <span class="literal">true</span>, <span class="comment">//实时刷新</span></div><div class="line">    port: <span class="number">8080</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [&#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/(\.jsx|\.js)$/</span>,</div><div class="line">      <span class="attr">loader</span>: <span class="string">"babel-loader"</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</div><div class="line">      <span class="attr">loader</span>: <span class="string">'vue-loader'</span></div><div class="line">    &#125;]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="Sass模块安装"><a href="#Sass模块安装" class="headerlink" title="Sass模块安装"></a>Sass模块安装</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//在项目下，运行下列命令行</div><div class="line">npm install --save-dev sass-loader</div><div class="line">//因为sass-loader依赖于node-sass，所以还要安装node-sass</div><div class="line">npm install --save-dev node-sass</div><div class="line">//使用样式的话，css-loader和style-loader也是必须的依赖包</div><div class="line">npm install --save-dev css-loader style-loader</div></pre></td></tr></table></figure><ul><li>css-loader使你能够使用类似@import 和 url(…)的方法实现 require()的功能；</li><li>style-loader将所有的计算后的样式加入页面中；</li></ul><p>　　二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。</p><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line">&#123;</div><div class="line">   <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">   <span class="attr">loaders</span>: [<span class="string">"style"</span>, <span class="string">"css"</span>, <span class="string">"sass"</span>]</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>sass的使用如下，例如：</p><ul><li>引入外部样式，下面两种写法都可以使用：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">import &apos;../../css/test.scss&apos;</div><div class="line">require(&apos;../../css/test2.scss&apos;);</div></pre></td></tr></table></figure><ul><li>在.vue文件中使用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;style lang=&quot;sass&quot;&gt;</div><div class="line">     //sass语法样式</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><h2 id="Vue组件使用"><a href="#Vue组件使用" class="headerlink" title="Vue组件使用"></a>Vue组件使用</h2><p>到了这里，我们就要使用Vue的组件、Babel、Sass了，通过配置webpack，直接生成html</p><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// webpack.config.js</span></div><div class="line"><span class="keyword">let</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</div><div class="line"><span class="keyword">var</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">'html-webpack-plugin'</span>)</div><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">devtool</span>: <span class="string">'eval-source-map'</span>, <span class="comment">//source-map cheap-module-source-map eval-source-map cheap-module-eval-source-map</span></div><div class="line">  entry: <span class="string">'./src/main.js'</span>,</div><div class="line">  <span class="attr">output</span>: &#123;</div><div class="line">    <span class="comment">/* 输出目录，没有则新建 */</span></div><div class="line">    path: path.resolve(__dirname, <span class="string">'./dist'</span>),</div><div class="line">    <span class="comment">/* 静态目录，可以直接从这里取文件 */</span></div><div class="line">    publicPath: <span class="string">''</span>,</div><div class="line">    <span class="comment">/* 文件名 */</span></div><div class="line">    filename: <span class="string">'[name].js'</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">devServer</span>: &#123;</div><div class="line">    <span class="attr">contentBase</span>: <span class="string">"./public"</span>, <span class="comment">//本地服务器所加载的页面所在的目录</span></div><div class="line">    historyApiFallback: <span class="literal">true</span>, <span class="comment">//不跳转</span></div><div class="line">    inline: <span class="literal">true</span>, <span class="comment">//实时刷新</span></div><div class="line">    port: <span class="number">8080</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">resolve</span>: &#123; <span class="comment">// 这个很重要，需要把vue设置为独立构建，不然无法进行</span></div><div class="line">    alias: &#123;</div><div class="line">      <span class="string">'vue'</span>: <span class="string">'vue/dist/vue.js'</span></div><div class="line">    &#125;</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">module</span>: &#123;</div><div class="line">    <span class="attr">rules</span>: [&#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/(\.jsx|\.js)$/</span>,</div><div class="line">      <span class="attr">loader</span>: <span class="string">"babel-loader"</span>,</div><div class="line">      <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.vue$/</span>,</div><div class="line">      <span class="attr">loader</span>: <span class="string">'vue-loader'</span></div><div class="line">    &#125;, &#123;</div><div class="line">      <span class="attr">test</span>: <span class="regexp">/\.scss$/</span>,</div><div class="line">      <span class="attr">loaders</span>: [<span class="string">"style"</span>, <span class="string">"css"</span>, <span class="string">"sass"</span>]</div><div class="line">    &#125;]</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">plugins</span>: [</div><div class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</div><div class="line">      <span class="attr">filename</span>: <span class="string">'index.html'</span>,</div><div class="line">      <span class="attr">template</span>: path.resolve(__dirname, <span class="string">'./index.html'</span>),</div><div class="line">      <span class="attr">inject</span>: <span class="literal">true</span></div><div class="line">    &#125;)</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// src/main.js</span></div><div class="line"><span class="comment">/* 引入vue和主页 */</span></div><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span>;</div><div class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span>;</div><div class="line">Vue.config.debug = <span class="literal">true</span>; <span class="comment">//开启错误提示</span></div><div class="line"><span class="comment">/* 实例化一个vue */</span></div><div class="line"><span class="keyword">new</span> Vue(&#123;</div><div class="line">  <span class="attr">el</span>: <span class="string">'#app'</span>,</div><div class="line">  <span class="attr">template</span>: <span class="string">'&lt;App/&gt;'</span>,</div><div class="line">  <span class="attr">components</span>: &#123; App &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;!-- src/App.vue --&gt;</div><div class="line">&lt;template&gt;</div><div class="line">  &lt;div id=&quot;example&quot;&gt;</div><div class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</div><div class="line">    &lt;ul&gt;</div><div class="line">      &lt;li v-for=&quot;n in 5&quot; :key=&quot;n&quot;&gt;&#123;&#123; n &#125;&#125;&lt;/li&gt;</div><div class="line">    &lt;/ul&gt;</div><div class="line">  &lt;/div&gt;</div><div class="line">&lt;/template&gt;</div><div class="line"></div><div class="line">&lt;script&gt;</div><div class="line">export default &#123;</div><div class="line">  data () &#123;</div><div class="line">    return &#123;</div><div class="line">      msg: &apos;Hello World!&apos;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">&lt;/script&gt;</div><div class="line"></div><div class="line">&lt;style lang=&quot;scss&quot;&gt;</div><div class="line">#example &#123;</div><div class="line">  background: wheat;</div><div class="line">  height: 100%;</div><div class="line">  width: 100%;</div><div class="line">  position:fixed;</div><div class="line">&#125;</div><div class="line">&lt;/style&gt;</div></pre></td></tr></table></figure><h2 id="Vue组件路由使用"><a href="#Vue组件路由使用" class="headerlink" title="Vue组件路由使用"></a>Vue组件路由使用</h2><p>接下来，我们的需求就是要使用路由显示多个页面。</p><p>。。。</p><p>然而在我手动搭好整个项目的时候，发现这些东西都可以由vue-cli一键生成，这就非常地绝望了。</p><p>所以下面讲一下如何使用vue-cli搭建项目</p><h2 id="Vue-cli的使用"><a href="#Vue-cli的使用" class="headerlink" title="Vue-cli的使用"></a>Vue-cli的使用</h2><h3 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 全局安装</div><div class="line">npm install -g vue-cli</div><div class="line">// 初始化项目</div><div class="line">vue init webpack projectName</div><div class="line">// 安装依赖</div><div class="line">cd projectName</div><div class="line">npm install</div></pre></td></tr></table></figure><p>然后我们的项目就搭好了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 建立静态文件</div><div class="line">npm run build</div></pre></td></tr></table></figure><p>然后配置一下Sass就可以直接使用了</p><h2 id="参考网页"><a href="#参考网页" class="headerlink" title="参考网页"></a>参考网页</h2><p> <a href="http://www.jianshu.com/p/42e11515c10f" target="_blank" rel="external">入门<em>Webpack</em>,看这篇就够了 - 简书</a></p><p><a href="http://www.jb51.net/article/110362.htm" target="_blank" rel="external">详解用webpack2.0构建vue2.0超详细精简版</a></p><p><a href="http://www.cnblogs.com/ww03/p/6037710.html" target="_blank" rel="external"><em>webpack</em>配置<em>sass</em>模块的加载 - 浅岸 - 博客园</a></p><p><a href="http://www.imooc.com/article/17868" target="_blank" rel="external">webpack打包vue2.0项目时必现问题。</a></p><p><a href="http://www.cnblogs.com/xuange306/p/6092225.html" target="_blank" rel="external">vue-cli构建vue项目</a></p><p><a href="https://segmentfault.com/a/1190000008644830" target="_blank" rel="external">vue-cli webpack配置分析</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;打算重构XMoj的前端，使用新的架构，记录下配置过程，以便以后查询，如果你也想用这个架构，那么这篇文章将带你一步一步安装和配置各种环境，一步步地了解各种组件的基本使用方式，最后搭成一个多组件的网页应用。如果你想快速搭建，那么可以直接看文章底部。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://blog.zhenly.cn/categories/Web/"/>
    
    
      <category term="Web" scheme="https://blog.zhenly.cn/tags/Web/"/>
    
      <category term="Sass" scheme="https://blog.zhenly.cn/tags/Sass/"/>
    
      <category term="Webpack" scheme="https://blog.zhenly.cn/tags/Webpack/"/>
    
      <category term="Vue" scheme="https://blog.zhenly.cn/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Web | Sass 学习笔记</title>
    <link href="https://blog.zhenly.cn/2017/09/14/Sass-study/"/>
    <id>https://blog.zhenly.cn/2017/09/14/Sass-study/</id>
    <published>2017-09-13T16:20:27.000Z</published>
    <updated>2017-09-13T16:21:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久之前的XMatrix团队的第一次例会(其实并没有几个人)决定了Xmoj这个项目要弄一套自己的UI，使用Sass来构建一套XMUI，但是一直都没有去学习，现在又有一个项目需要用到Sass，所以就赶紧来学习一波了。</p><a id="more"></a><h2 id="使用前准备"><a href="#使用前准备" class="headerlink" title="使用前准备"></a>使用前准备</h2><h3 id="安装Ruby"><a href="#安装Ruby" class="headerlink" title="安装Ruby"></a>安装Ruby</h3><p>Sass是基于Ruby开发的，因此我们首先要安装ruby，我安装的是win版的，直接官网下载，然后添加一下环境变量就安装好了</p><h3 id="安装Sass"><a href="#安装Sass" class="headerlink" title="安装Sass"></a>安装Sass</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">gem install sass</div><div class="line">gem install compass</div></pre></td></tr></table></figure><p>compass是sass的一个比较好的工具库，他可以帮助我们更快得构建sass项目，而且里面封装了很多模块，但是我在使用gem的时候总是需要管理员权限才能安装。</p><h3 id="Sass编译器用法"><a href="#Sass编译器用法" class="headerlink" title="Sass编译器用法"></a>Sass编译器用法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">//单文件转换命令</div><div class="line">sass input.scss output.css</div><div class="line"></div><div class="line">//单文件监听命令</div><div class="line">sass --watch input.scss:output.css</div><div class="line"></div><div class="line">//如果你有很多的sass文件的目录，你也可以告诉sass监听整个目录：</div><div class="line">sass --watch app/sass:public/stylesheets</div><div class="line"></div><div class="line">//编译格式</div><div class="line">sass --watch input.scss:output.css --style compact</div><div class="line"></div><div class="line">//编译添加调试map</div><div class="line">sass --watch input.scss:output.css --sourcemap</div><div class="line"></div><div class="line">//选择编译格式并添加调试map</div><div class="line">sass --watch input.scss:output.css --style expanded --sourcemap</div><div class="line"></div><div class="line">//开启debug信息</div><div class="line">sass --watch input.scss:output.css --debug-info</div></pre></td></tr></table></figure><h3 id="Compass使用方法"><a href="#Compass使用方法" class="headerlink" title="Compass使用方法"></a>Compass使用方法</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">//项目初始化</div><div class="line">compass create helloworld</div><div class="line"></div><div class="line">//编译</div><div class="line">compass compile</div><div class="line"></div><div class="line">//压缩</div><div class="line">compass compile --output-style compressed</div><div class="line"></div><div class="line">//自动编译</div><div class="line">compass watch</div></pre></td></tr></table></figure><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$xxx:#fff;</div><div class="line">$aaa:1px soild #fff;</div></pre></td></tr></table></figure><p>sass有一个特点是下划线和中划线是等价的，所以变量a_b和a-b其实是一样的</p><h2 id="嵌套css"><a href="#嵌套css" class="headerlink" title="嵌套css"></a>嵌套css</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">#content &#123;</div><div class="line">  article &#123;</div><div class="line">    h1 &#123; color: #333 &#125;</div><div class="line">    p &#123; margin-bottom: 1.4em &#125;</div><div class="line">  &#125;</div><div class="line">  aside &#123; background-color: #EEE &#125;</div><div class="line">&#125;</div><div class="line">// 编译后</div><div class="line">#content article h1 &#123; color: #333 &#125;</div><div class="line">#content article p &#123; margin-bottom: 1.4em &#125;</div><div class="line">#content aside &#123; background-color: #EEE &#125;</div></pre></td></tr></table></figure><p>由于嵌套规则对于一些伪类需要使用父选择器的标识符&amp;</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">article a &#123;</div><div class="line">  color: blue;</div><div class="line">  &amp;:hover &#123; color: red &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="子组合选择器"><a href="#子组合选择器" class="headerlink" title="子组合选择器"></a>子组合选择器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">article section &#123; margin: 5px &#125;</div><div class="line">// 选择article下的所有section元素</div><div class="line">article &gt; section &#123; border: 1px solid #ccc &#125;</div><div class="line">// [子组合选择器] 选择article下的第一代的section元素</div><div class="line">header + p &#123; font-size: 1.1em &#125;</div><div class="line">// [同层组合选择器] 选择header元素同层后面的p元素</div><div class="line">article ~ article &#123; border-top: 1px dashed #ccc &#125;</div><div class="line">// [同层所有组合选择器] 选择所有跟在article后的同层article元素，不管它们之间隔了多少其他元素</div><div class="line">// 对于所有选择器可以随意嵌套</div><div class="line">article &#123;</div><div class="line">  ~ article &#123; border-top: 1px dashed #ccc &#125;</div><div class="line">  &gt; section &#123; background: #eee &#125;</div><div class="line">  dl &gt; &#123;</div><div class="line">    dt &#123; color: #333 &#125;</div><div class="line">    dd &#123; color: #555 &#125;</div><div class="line">  &#125;</div><div class="line">  nav + &amp; &#123; margin-top: 0 &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="嵌套属性"><a href="#嵌套属性" class="headerlink" title="嵌套属性"></a>嵌套属性</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">nav &#123;</div><div class="line">  border: &#123;</div><div class="line">  style: solid;</div><div class="line">  width: 1px;</div><div class="line">  color: #ccc;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 编译成</div><div class="line">nav &#123;</div><div class="line">  border-style: solid;</div><div class="line">  border-width: 1px;</div><div class="line">  border-color: #ccc;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">nav &#123;</div><div class="line">  border: 1px solid #ccc &#123;</div><div class="line">  left: 0px;</div><div class="line">  right: 0px;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">// 编译成</div><div class="line">nav &#123;</div><div class="line">  border: 1px solid #ccc;</div><div class="line">  border-left: 0px;</div><div class="line">  border-right: 0px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">body &#123;</div><div class="line">  color: #333; // 这种注释内容不会出现在生成的css文件中</div><div class="line">  padding: 0; /* 这种注释内容会出现在生成的css文件中 */</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="混合器"><a href="#混合器" class="headerlink" title="混合器"></a>混合器</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">@mixin rounded-corners &#123;</div><div class="line">  -moz-border-radius: 5px;</div><div class="line">  -webkit-border-radius: 5px;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div><div class="line">notice &#123;</div><div class="line">  background-color: green;</div><div class="line">  border: 2px solid #00aa00;</div><div class="line">  @include rounded-corners;</div><div class="line">&#125;</div><div class="line">// 编译成</div><div class="line">.notice &#123;</div><div class="line">  background-color: green;</div><div class="line">  border: 2px solid #00aa00;</div><div class="line">  -moz-border-radius: 5px;</div><div class="line">  -webkit-border-radius: 5px;</div><div class="line">  border-radius: 5px;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//带参数的用法</div><div class="line">@mixin link-colors($normal, $hover, $visited) &#123;</div><div class="line">  color: $normal;</div><div class="line">  &amp;:hover &#123; color: $hover; &#125;</div><div class="line">  &amp;:visited &#123; color: $visited; &#125;</div><div class="line">&#125;</div><div class="line">a &#123;</div><div class="line">  @include link-colors(blue, red, green);</div><div class="line">&#125;</div><div class="line">// 编译后</div><div class="line">a &#123; color: blue; &#125;</div><div class="line">a:hover &#123; color: red; &#125;</div><div class="line">a:visited &#123; color: green; &#125;</div><div class="line"></div><div class="line"></div><div class="line">//默认参数的用法</div><div class="line">@mixin link-colors(</div><div class="line">    $normal,</div><div class="line">    $hover: $normal,</div><div class="line">    $visited: $normal</div><div class="line">  )</div><div class="line">&#123;</div><div class="line">  color: $normal;</div><div class="line">  &amp;:hover &#123; color: $hover; &#125;</div><div class="line">  &amp;:visited &#123; color: $visited; &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//通过选择器继承继承样式</div><div class="line">.error &#123;</div><div class="line">  border: 1px solid red;</div><div class="line">  background-color: #fdd;</div><div class="line">&#125;</div><div class="line">.seriousError &#123;</div><div class="line">  @extend .error;</div><div class="line">  border-width: 3px;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://www.sass.hk/docs/" target="_blank" rel="external">文档查询</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久之前的XMatrix团队的第一次例会(其实并没有几个人)决定了Xmoj这个项目要弄一套自己的UI，使用Sass来构建一套XMUI，但是一直都没有去学习，现在又有一个项目需要用到Sass，所以就赶紧来学习一波了。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://blog.zhenly.cn/categories/Web/"/>
    
    
      <category term="Web" scheme="https://blog.zhenly.cn/tags/Web/"/>
    
      <category term="Sass" scheme="https://blog.zhenly.cn/tags/Sass/"/>
    
      <category term="css" scheme="https://blog.zhenly.cn/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>Linux |  MongoDB学习笔记-基本操作与索引</title>
    <link href="https://blog.zhenly.cn/2017/08/10/MongoDB-study/"/>
    <id>https://blog.zhenly.cn/2017/08/10/MongoDB-study/</id>
    <published>2017-08-10T13:47:27.000Z</published>
    <updated>2017-08-10T13:48:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前学了MongoDB的安装和建立用户等基本运维操作，今天来学一下具体的增改删除等操作以及索引的建立与使用</p><a id="more"></a><h2 id="一些基本操作"><a href="#一些基本操作" class="headerlink" title="一些基本操作"></a>一些基本操作</h2><h3 id="显示列表"><a href="#显示列表" class="headerlink" title="显示列表"></a>显示列表</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">show dbs</div><div class="line">show tables</div><div class="line">show collections</div></pre></td></tr></table></figure><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.test.insert(&#123;x : 1&#125;)</div></pre></td></tr></table></figure><p>系统将在test集合下生成一个数据格式为{“_id”: ObjectId(“xxxxxx”), “x” : 1}的json记录</p><ul><li><code>_id</code> 也可以自己自己指定，但是同一个集合下不能重复</li><li>也可以使用js语法创建数据(比如for循环)</li></ul><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">db.test.find(&#123;x : 1&#125;)</div><div class="line">db.test.find(&#123;n : &#123;$exists:true&#125;&#125;)</div><div class="line"># 查找存在n字段的记录</div></pre></td></tr></table></figure><ul><li>通过find()可以查看集合下所有数据</li><li>.count()可以返回满足查询条件的数据数目</li><li>.skip(x) 可以跳过x条数据</li><li>.limit(x) 可以限制返回x条数据</li><li>.sort({x:1}) 对x进行顺序排序再返回数据</li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.test.update(&#123;x : 1, y : 1&#125;,&#123;x : 2&#125;)</div><div class="line">#更新后数据&#123;x : 2&#125;</div><div class="line">db.test.update(&#123;x : 1, y : 1&#125;,&#123;$set:&#123;x : 2&#125;&#125;)</div><div class="line">#更新后数据&#123;x : 2, y : 1&#125;</div></pre></td></tr></table></figure><p>$set[部分内容更新符]：更新存在的数据，不修改其他数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#假设不存在&#123;x : 1&#125;的数据</div><div class="line">db.test.update(&#123;x : 1&#125;,&#123;x : 2&#125;)</div><div class="line">#数据库没有任何变化</div><div class="line">db.test.update(&#123;x : 1&#125;,&#123;x : 2&#125;,true)</div><div class="line">#数据库多出&#123;x : 2&#125;的记录</div></pre></td></tr></table></figure><p>update的第三个参数为是否在查询不到记录时插入新数据</p><ul><li>update 每次只会更新一条数据</li></ul><p>更新多条数据的方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">de.test.update(&#123;x : 1&#125;, &#123;$set:&#123;x : 2&#125;&#125;,false, true)</div></pre></td></tr></table></figure><ul><li>当第四个数据为true的时候第二个参数只允许使用$set操作符，防止误操作多条数据</li></ul><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.test.remove(&#123;x : 1&#125;)</div><div class="line">db.test.drop() # 删除整个集合</div></pre></td></tr></table></figure><ul><li>romove函数不允许限定条件为空(即删除整个集合)</li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引种类与使用"><a href="#索引种类与使用" class="headerlink" title="索引种类与使用"></a>索引种类与使用</h3><ul><li>_id 索引<ul><li>系统默认索引</li><li>系统自动生成的唯一字段</li></ul></li><li>单键索引<ul><li>最普通的索引</li><li>索引值为单一的值，如字符串，数字，日期</li></ul></li><li>多键索引<ul><li>索引值为多个记录，如数组</li><li>创建方法同单键索引</li></ul></li><li>复合索引<ul><li>查询条件不止一个的时候适用</li></ul></li><li>过期索引,又称 TTL(Time To Live)索引<ul><li>一段时间后会过期的索引</li><li>过期后数据被删除</li><li>适合储存临时的用户登陆信息，日志</li><li>索引值必须为ISODate格式，不能使用时间戳</li><li>若索引为数组，则按照最小的时间删除</li><li>不允许建立复合索引</li><li>删除时间有+-60s的误差</li></ul></li><li>全文索引<ul><li>适合适用于文章的内容和标题搜索</li><li>代替正则匹配之类的复杂操作</li><li>对中文的支持还不太好</li><li>每个集合只能创建一个全文索引</li><li>每次查询只能指定一个$text</li><li>全文查询的$text不能与nor、hint一起用</li></ul></li><li>地理位置索引<ul><li>点的位置</li><li>分类<ul><li>2d索引-平面</li><li>2dsphere索引-球面</li></ul></li><li>查找方式<ul><li>距离某个点一点距离的点</li><li>包含在某区域内的点</li></ul></li></ul></li></ul><h3 id="查询集合的索引情况"><a href="#查询集合的索引情况" class="headerlink" title="查询集合的索引情况"></a>查询集合的索引情况</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.test.getIndexes()</div></pre></td></tr></table></figure><ul><li>当数据量过大，而且没有相应的索引，查询有可能会不返回结果</li></ul><h3 id="创建单键索引"><a href="#创建单键索引" class="headerlink" title="创建单键索引"></a>创建单键索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.test.creatIndex(&#123;x:1&#125;) </div><div class="line">#对x进行正向排序创建索引</div><div class="line">db.test.creatIndex(&#123;x:-1&#125;)</div><div class="line">#对x进行逆向排序创建索引</div></pre></td></tr></table></figure><ul><li>最好在使用数据库使用之前将索引创建完毕，否则会影响数据库的性能</li><li>影响：减慢插入性能，大幅度提高读取性能</li></ul><h3 id="创建复合索引"><a href="#创建复合索引" class="headerlink" title="创建复合索引"></a>创建复合索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.test.creatIndex(&#123;x:1, y:1&#125;)</div></pre></td></tr></table></figure><h3 id="创建过期索引"><a href="#创建过期索引" class="headerlink" title="创建过期索引"></a>创建过期索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">db.test.creatIndex(&#123;x:1&#125;, &#123;expireAfterSeconds:10&#125;) </div><div class="line"># 10秒后过期</div></pre></td></tr></table></figure><h3 id="创建全文索引"><a href="#创建全文索引" class="headerlink" title="创建全文索引"></a>创建全文索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">db.test.creatIndex(&#123;x:&quot;text&quot;&#125;)</div><div class="line">对x创建全文索引</div><div class="line">db.test.creatIndex(&#123;x:&quot;text&quot;, y:&quot;text&quot;&#125;)对x与y创建全文索引</div><div class="line">db.test.creatIndex(&#123;&quot;$**&quot;:&quot;text&quot;&#125;)</div><div class="line">对test集合所有字段创建全文索引</div></pre></td></tr></table></figure><h3 id="使用全文索引"><a href="#使用全文索引" class="headerlink" title="使用全文索引"></a>使用全文索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">db.test.find(&#123;$text:&#123;$search: &quot;aa&quot;&#125;&#125;)</div><div class="line"># 查询aa这个单词的记录</div><div class="line">db.test.find(&#123;$text:&#123;$search: &quot;aa bb&quot;&#125;&#125;)</div><div class="line"># 查询aa或bb的记录</div><div class="line">db.test.find(&#123;$text:&#123;$search: &quot;aa -cc&quot;&#125;&#125;)</div><div class="line"># 查询 aa 而且 非cc 的记录</div><div class="line">db.test.find(&#123;$text:&#123;$search: &quot;\&quot;aa\&quot;&quot; &quot;\&quot;bb\&quot;&quot;&#125;&#125;)</div><div class="line"># 查询 aa 与 bb 的记录</div><div class="line">db.test.find(&#123;$text:&#123;$search: &quot;aa bb&quot;&#125;&#125;,&#123;score:&#123;$meta:&quot;textScore&quot;&#125;&#125;)</div><div class="line"># 返回每条记录附加相似度</div><div class="line">db.test.find(&#123;$text:&#123;$search: &quot;aa bb&quot;&#125;&#125;,&#123;score:&#123;$meta:&quot;textScore&quot;&#125;&#125;).sort(&#123;score:&#123;$meta:&quot;textScore&quot;&#125;&#125;)</div><div class="line">#对相似度进行排序后返回</div></pre></td></tr></table></figure><h3 id="索引属性"><a href="#索引属性" class="headerlink" title="索引属性"></a>索引属性</h3><ul><li>名字<ul><li>name</li></ul></li><li>唯一性<ul><li>unique:true/false</li><li>是否允许插入同一索引的记录</li></ul></li><li>稀疏性<ul><li>sparse: true/false</li><li>默认不稀疏</li><li>稀疏：不为不存在的字段创建索引</li></ul></li><li>是否定时删除（过期索引）<ul><li>expireAfterSeconds</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.test.creatIndex(&#123;x:1&#125;,&#123;设置属性&#125;)</div></pre></td></tr></table></figure><h3 id="强制使用索引查询"><a href="#强制使用索引查询" class="headerlink" title="强制使用索引查询"></a>强制使用索引查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.test.find(&#123;x : 1&#125;).hint(&quot;m_1&quot;) # 强制使用m_1作为索引查询</div></pre></td></tr></table></figure><h3 id="创建平面地理位置索引"><a href="#创建平面地理位置索引" class="headerlink" title="创建平面地理位置索引"></a>创建平面地理位置索引</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">db.test.creatIndex(&#123;w: &quot;2d&quot;&#125;)</div><div class="line">#创建平面地理位置索引</div><div class="line">#格式：[经度，纬度]</div><div class="line">#取值范围：经度:[-180,180],纬度:[-90,90]</div></pre></td></tr></table></figure><h3 id="平面地理文字索引查询"><a href="#平面地理文字索引查询" class="headerlink" title="平面地理文字索引查询"></a>平面地理文字索引查询</h3><ul><li>$near查询：查询距离某个点最近的点</li><li>$geoWithin查询： 查询某个形状内的点<ul><li>$box 矩形 <ul><li>{￥box:[[x1,y1],[x2,y2]]}</li><li>左上角与右下角</li></ul></li><li>$center 圆形 <ul><li>{$center:[[x1, y1],r]}</li><li>圆心与半径</li></ul></li><li>$polygon 多边形 <ul><li>{$polygon: [[x1,y1],[x2,y2],[x3,y3]]} </li><li>各个点</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">db.test.find(&#123;w:&#123;$near:[1,1]&#125;&#125;)</div><div class="line"># 默认返回一百个</div><div class="line">db.test.find(&#123;w:&#123;$near:[1,1]&#125;,$maxDistance:10&#125;)</div><div class="line">#限制最远距离为10</div><div class="line">db.test.find(&#123;w:&#123;$near:[1,1]&#125;,$maxDistance:10,$minDistance:3&#125;)</div><div class="line">#限制最远距离为10,最近距离为3</div><div class="line">db.test.find(&#123;w:&#123;$geoWithin:&#123;$box:[[0,0],[3,3]]&#125;&#125;&#125;)</div><div class="line"># 查询矩形[0,0][3,3]中的点</div><div class="line">db.test.find(&#123;w:&#123;$geoWithin:&#123;$center:[1,1],1&#125;&#125;)</div><div class="line"># 查询以[1,1]为圆心，半径为1的圆中的点</div></pre></td></tr></table></figure><ul><li>还有geoNear查询方法，可以查询更多的数据，详情就去看文档吧</li></ul><h3 id="索引构建情况分析"><a href="#索引构建情况分析" class="headerlink" title="索引构建情况分析"></a>索引构建情况分析</h3><ul><li>优点： 加快查询</li><li>缺点： 增加磁盘占用，降低写入性能</li><li>评判工具<ul><li>mongostat工具</li><li>profile集合</li><li>日志</li><li>explain分析</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前学了MongoDB的安装和建立用户等基本运维操作，今天来学一下具体的增改删除等操作以及索引的建立与使用&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhenly.cn/categories/Linux/"/>
    
    
      <category term="MongoDB" scheme="https://blog.zhenly.cn/tags/MongoDB/"/>
    
      <category term="学习笔记" scheme="https://blog.zhenly.cn/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Linux" scheme="https://blog.zhenly.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Linux | Nginx和PHP7的安装与配置</title>
    <link href="https://blog.zhenly.cn/2017/07/21/linux-nginx/"/>
    <id>https://blog.zhenly.cn/2017/07/21/linux-nginx/</id>
    <published>2017-07-21T13:57:27.000Z</published>
    <updated>2017-11-13T14:18:53.169Z</updated>
    
    <content type="html"><![CDATA[<p>由于经常配置服务器，然后最主要的就是nginx，所以这个学期以来我配置nginx已经不下五次了，所以记下来以便以后方便地安装</p><a id="more"></a><p>由于我们要使用http2，首先我们需要openssl的最新版本,然后nginx的安装也依赖与pcre和zlib</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">tar -zxvf openssl-1.1.0f.tar.gz</div><div class="line">tar -zxvf pcre-8.41.tar.gz</div><div class="line">tar -zxvf zlib-1.2.11.tar.gz</div></pre></td></tr></table></figure><p>如果你是纯净的系统，那么编译之前还要安装cc等一系列的环境</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> Ubuntu</div><div class="line">apt-get install build-essential</div><div class="line">apt-get install libtool</div><div class="line"><span class="meta">#</span>CentOS</div><div class="line">yum -y install gcc automake autoconf libtool make</div><div class="line">yum install gcc gcc-c++　　</div><div class="line"><span class="meta">#</span> 或者 一次性安装一大堆</div><div class="line">yum groupinstall "Development Tools"</div></pre></td></tr></table></figure><p>然后要下载nginx的安装包并安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">wget http://nginx.org/download/nginx-1.13.2.tar.gz</div><div class="line">tar -zxvf nginx-1.13.2.tar.gz</div><div class="line">./configure --with-pcre=../pcre-8.41 --with-zlib=../zlib-1.2.11 --with-openssl=../openssl-1.1.0f  --with-stream --with-stream_ssl_module --with-http_ssl_module --with-http_v2_module --with-threads --with-http_flv_module --with-http_addition_module</div><div class="line">make</div><div class="line">sudo make install</div><div class="line">sudo ln -s /usr/local/nginx/sbin/nginx /usr/local/bin/nginx</div></pre></td></tr></table></figure><p>到此已经安装完毕</p><p>接下来是配置文件，一下是一个安全性比较高的https+http2配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div></pre></td><td class="code"><pre><div class="line">user www-data www-data;</div><div class="line">worker_processes  auto;</div><div class="line"></div><div class="line">error_log  logs/error.log;</div><div class="line">error_log  logs/error.log  notice;</div><div class="line">error_log  logs/error.log  info;</div><div class="line"></div><div class="line">pid        logs/nginx.pid;</div><div class="line"></div><div class="line"></div><div class="line">events &#123;</div><div class="line">    use epoll;</div><div class="line">    worker_connections  1024;</div><div class="line">    multi_accept on;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">http &#123;</div><div class="line">    include mime.types;</div><div class="line">    default_type application/octet-stream;</div><div class="line">    server_names_hash_bucket_size 128;</div><div class="line">    client_header_buffer_size 32k;</div><div class="line">    large_client_header_buffers 4 32k;</div><div class="line">    client_max_body_size 1024m;</div><div class="line">    client_body_buffer_size 10m;</div><div class="line">    sendfile on;</div><div class="line">    tcp_nopush on;</div><div class="line">    keepalive_timeout 120;</div><div class="line">    server_tokens off;</div><div class="line">    tcp_nodelay on;</div><div class="line"></div><div class="line">    fastcgi_connect_timeout 300;</div><div class="line">    fastcgi_send_timeout 300;</div><div class="line">    fastcgi_read_timeout 300;</div><div class="line">    fastcgi_buffer_size 64k;</div><div class="line">    fastcgi_buffers 4 64k;</div><div class="line">    fastcgi_busy_buffers_size 128k;</div><div class="line">    fastcgi_temp_file_write_size 128k;</div><div class="line">    fastcgi_intercept_errors on;</div><div class="line"></div><div class="line">    #Gzip Compression</div><div class="line">    gzip on;</div><div class="line">    gzip_buffers 16 8k;</div><div class="line">    gzip_comp_level 6;</div><div class="line">    gzip_http_version 1.1;</div><div class="line">    gzip_min_length 256;</div><div class="line">    gzip_proxied any;</div><div class="line">    gzip_vary on;</div><div class="line">    gzip_types</div><div class="line">        text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml</div><div class="line">        text/javascript application/javascript application/x-javascript</div><div class="line">        text/x-json application/json application/x-web-app-manifest+json</div><div class="line">        text/css text/plain text/x-component</div><div class="line">        font/opentype application/x-font-ttf application/vnd.ms-fontobject</div><div class="line">        image/x-icon;</div><div class="line">    gzip_disable &quot;MSIE [1-6]\.(?!.*SV1)&quot;;</div><div class="line"></div><div class="line">    open_file_cache max=1000 inactive=20s;</div><div class="line">    open_file_cache_valid 30s;</div><div class="line">    open_file_cache_min_uses 2;</div><div class="line">    open_file_cache_errors on;</div><div class="line"></div><div class="line">    server&#123;</div><div class="line">        listen 443 ssl http2 default_server;</div><div class="line">        server_name my.zhenly.cn;</div><div class="line">        ssl on;</div><div class="line">        ssl_certificate /usr/local/nginx/conf/ssl/1_my.zhenly.cn_bundle.crt;</div><div class="line">        ssl_certificate_key /usr/local/nginx/conf/ssl/2_my.zhenly.cn.key;</div><div class="line">        ssl_session_timeout 5m;</div><div class="line">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</div><div class="line">        ssl_ciphers &apos;ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4&apos;;</div><div class="line">        ssl_prefer_server_ciphers on;</div><div class="line">        ssl_session_cache shared:SSL:10m;</div><div class="line"></div><div class="line">        add_header Strict-Transport-Security &quot;max-age=63072000; includeSubdomains; preload&quot; always;</div><div class="line">        add_header X-Frame-Options SAMEORIGIN always;</div><div class="line">        add_header X-XSS-Protection &quot;1; mode=block&quot; always;</div><div class="line">        add_header X-Content-Type-Options nosniff;</div><div class="line"></div><div class="line">        location / &#123;</div><div class="line">            root   /usr/local/nginx/html;</div><div class="line">            #index  index.html index.htm;</div><div class="line">        &#125;</div><div class="line">        location /api/ &#123;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">            proxy_set_header Host $http_host;</div><div class="line">            proxy_set_header X-NginX-Proxy true;</div><div class="line">            proxy_pass http://127.0.0.1:30002/;</div><div class="line">            proxy_redirect off;</div><div class="line">        &#125;</div><div class="line">        location /content/ &#123;</div><div class="line">            proxy_set_header X-Real-IP $remote_addr;</div><div class="line">            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</div><div class="line">            proxy_set_header Host $http_host;</div><div class="line">            proxy_set_header X-NginX-Proxy true;</div><div class="line">            proxy_pass http://127.0.0.1:30001/;</div><div class="line">            proxy_redirect off;</div><div class="line">        &#125;</div><div class="line">        location ~ [^/]\.php(/|$) &#123;</div><div class="line">            fastcgi_pass  127.0.0.1:9000;</div><div class="line">            fastcgi_index index.php;</div><div class="line">            fastcgi_param SCRIPT_FILENAME $document_root/$fastcgi_script_name;</div><div class="line">            include       fastcgi_params;</div><div class="line">        &#125;</div><div class="line">        location ~ .*\.(gif|jpg|jpeg|png|bmp|swf|flv|mp4|ico)$ &#123;</div><div class="line">            expires 30d;</div><div class="line">            access_log off;</div><div class="line">        &#125;</div><div class="line">        location ~ .*\.(js|css)?$ &#123;</div><div class="line">            expires 7d;</div><div class="line">            access_log off;</div><div class="line">        &#125;</div><div class="line">        location ~ /\.ht &#123;</div><div class="line">            deny all;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="配置php7-0"><a href="#配置php7-0" class="headerlink" title="配置php7.0"></a>配置php7.0</h2><p>这里使用apt-get的方式安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install php7.0</div><div class="line">sudo apt-get install php7.0-cgi</div><div class="line">sudo apt-get install php7.0-curl</div><div class="line">sudo apt-get install php7.0-mbstring</div></pre></td></tr></table></figure><p>然后修改一下配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd /etc/php/7.0/fpm/pool.d/</div><div class="line">sudo vim www.conf</div></pre></td></tr></table></figure><p>然后修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen = /run/php/php7.0-fpm.sock</div></pre></td></tr></table></figure><p>为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">listen = 9000</div></pre></td></tr></table></figure><p>然后启动php-fpm</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo php-fpm7.0</div></pre></td></tr></table></figure><p>再来说一下如何编译安装php最新版(CentOS7)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span> 下载最新版php</div><div class="line">wget http://hk1.php.net/get/php-7.1.11.tar.gz/from/this/mirror</div><div class="line">tar -zxvf php-7.1.11.tar.gz</div><div class="line">./configure --prefix=/usr/local/php --with-config-file-path=/usr/local/php/etc  --with-curl --with-freetype-dir --with-gd --with-gettext --with-iconv-dir --with-kerberos --with-libdir=lib64 --with-libxml-dir --with-mysqli --with-openssl --with-pcre-regex --with-pdo-mysql --with-pdo-sqlite --with-pear --with-png-dir --with-xmlrpc --with-xsl --with-zlib --enable-fpm --enable-bcmath --enable-libxml --enable-inline-optimization --enable-gd-native-ttf --enable-mbregex --enable-mbstring --enable-opcache --enable-pcntl --enable-shmop --enable-soap --enable-sockets --enable-sysvsem --enable-xml --enable-zip</div><div class="line"><span class="meta">#</span> 一般会提示缺少库的用yum -y install 安装便是</div><div class="line"><span class="meta">#</span> 例如我需要安装openssl-devel、libxml2-devel、curl-devel、libpng-devel、freetype-devel、 libxslt-devel</div><div class="line"><span class="meta">#</span> 或许是我选择的模块太多了吧，然后就是非常漫长的make了</div><div class="line">make</div><div class="line">make install</div><div class="line"><span class="meta">#</span>成功后需要复制配置文件php.ini 和php-fpm.conf www.conf</div><div class="line"><span class="meta">#</span>从源码包复制php.ini</div><div class="line"></div><div class="line">cp php.ini-development /usr/local/php/etc/php.ini</div><div class="line"><span class="meta"></span></div><div class="line">#在执行文件时  加上 --with-config-file-path=/usr/local/php/etc 可以指定php.ini的位置</div><div class="line"></div><div class="line">cd /usr/local/php/etc/  </div><div class="line"><span class="meta">#</span> 进入这个目录</div><div class="line"></div><div class="line">cp php-fpm.conf.default php-fpm.conf  </div><div class="line"><span class="meta">#</span>添加php-fpm.conf 配置文件</div><div class="line"></div><div class="line">cd php-fpm.d  </div><div class="line"><span class="meta">#</span>在进入这个目录</div><div class="line"></div><div class="line">cp www.conf.default www.conf   </div><div class="line"><span class="meta">#</span>添加www.conf，这个文件是phpfpm的端口号等信息，如果你修改默认的9000端口号需在这里改，再改nginx的配置，ps：php5.X版本是直接在php-fpm.conf这个文件配置，没有这个文件的</div><div class="line"><span class="meta"></span></div><div class="line">#进入php-fpm.conf 这个文件把 ;pid = run/php-fpm.pid 前面的;去掉，我编译php5版本是，发现启动php没有php-fpm.pid这个文件，导致不能重启，后面发现把这个打开，启动就能生成php-fpm.pid这个文件了</div><div class="line"><span class="meta"></span></div><div class="line">#启动php</div><div class="line"></div><div class="line">/usr/local/php/sbin/php-fpm</div><div class="line"><span class="meta"></span></div><div class="line">#配置nginx</div><div class="line"><span class="meta"></span></div><div class="line">#进入nginx.conf ，在 /usr/local/nginx/conf/nginx.conf中</div><div class="line"></div><div class="line">location ~ \.php$ &#123;</div><div class="line">root html;</div><div class="line">fastcgi_pass 127.0.0.1:9000;</div><div class="line">fastcgi_index index.php;</div><div class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line">include fastcgi_params;</div><div class="line">&#125;</div><div class="line"><span class="meta"></span></div><div class="line">#把这行注释去掉 fastcgi_param SCRIPT_FILENAME \script$fastcgi_script_name;改成fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</div><div class="line"><span class="meta"></span></div><div class="line">#重启nginx</div><div class="line">/usr/local/nginx/sbin/nginx -s reload</div><div class="line"><span class="meta"></span></div><div class="line">#安装完成</div><div class="line">ln -s /usr/local/php/sbin/php-fpm  /usr/local/bin/php-fpm</div></pre></td></tr></table></figure><h3 id="接下来要设置一下开机启动"><a href="#接下来要设置一下开机启动" class="headerlink" title="接下来要设置一下开机启动"></a>接下来要设置一下开机启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/rc.local</div></pre></td></tr></table></figure><p>增加下面两行内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">/usr/local/bin/nginx</div><div class="line">/usr/sbin/php-fpm7.0 或 /usr/local/bin/php-fpm</div></pre></td></tr></table></figure><p>然后就大功告成了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于经常配置服务器，然后最主要的就是nginx，所以这个学期以来我配置nginx已经不下五次了，所以记下来以便以后方便地安装&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhenly.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.zhenly.cn/tags/Linux/"/>
    
      <category term="Nginx" scheme="https://blog.zhenly.cn/tags/Nginx/"/>
    
      <category term="php" scheme="https://blog.zhenly.cn/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Linux | phpmyadmin的安装与配置</title>
    <link href="https://blog.zhenly.cn/2017/07/21/linux-phpmyadmin/"/>
    <id>https://blog.zhenly.cn/2017/07/21/linux-phpmyadmin/</id>
    <published>2017-07-21T13:56:27.000Z</published>
    <updated>2017-07-21T13:59:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>把配置phpmyadmin的过程记录下来，方便日后再次安装</p><a id="more"></a><h2 id="phpmyadmin安装"><a href="#phpmyadmin安装" class="headerlink" title="phpmyadmin安装"></a>phpmyadmin安装</h2><ol><li>在官网下载 <a href="https://www.phpmyadmin.net/downloads/" target="_blank" rel="external">https://www.phpmyadmin.net/downloads/</a></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget https://files.phpmyadmin.net/phpMyAdmin/4.7.1/phpMyAdmin-4.7.1-all-languages.tar.gz</div></pre></td></tr></table></figure><ol><li>解压到某个可以访问的目录 </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">tar -zxvf phpMyAdmin-4.7.1-all-languages.tar.gz</div></pre></td></tr></table></figure><ol><li>网页进行访问</li><li>输入用户密码</li><li>基本安装完成</li></ol><h2 id="需要一个短语密码"><a href="#需要一个短语密码" class="headerlink" title="需要一个短语密码"></a>需要一个短语密码</h2><ol><li>修改phpmyadmin根目录下的config_sample.inc.php的$cfg[‘blowfish_secret’]=‘短语密码’</li><li>修改libraries牡蛎下的config_default.php的$cfg[‘blowfish_secret’]=‘短语密码’</li><li>刷新重新登陆</li></ol><h2 id="高级功能没有开启"><a href="#高级功能没有开启" class="headerlink" title="高级功能没有开启"></a>高级功能没有开启</h2><ol><li>找到phpmyadmin/sql/create_tables.sql </li><li>把这个文件通过phpmyadmin导入到数据库</li><li>完成</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;把配置phpmyadmin的过程记录下来，方便日后再次安装&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhenly.cn/categories/Linux/"/>
    
    
      <category term="Linux" scheme="https://blog.zhenly.cn/tags/Linux/"/>
    
      <category term="php" scheme="https://blog.zhenly.cn/tags/php/"/>
    
      <category term="mysql" scheme="https://blog.zhenly.cn/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Linux | MongoDB初探</title>
    <link href="https://blog.zhenly.cn/2017/07/21/linux-mongodb/"/>
    <id>https://blog.zhenly.cn/2017/07/21/linux-mongodb/</id>
    <published>2017-07-21T13:52:27.000Z</published>
    <updated>2017-08-31T11:35:53.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前开发XMOJ的时候用的是MySQL，现在又想了解一下NoSQL的数据库，所以就选取了一个比较流行的MongoDB进行学习</p><a id="more"></a><h2 id="安装并配置MongoDB"><a href="#安装并配置MongoDB" class="headerlink" title="安装并配置MongoDB"></a>安装并配置MongoDB</h2><p>从官网下载好<code>mongodb-linux-x86_64-ubuntu1604-3.4.6.tgz</code></p><p><em>注意： 有时候https的下载速度龟速，可以尝试用http</em></p><p>然后解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">tar -zxvf mongodb-linux-x86_64-ubuntu1604-3.4.6.tgz</div><div class="line">sudo mv mongodb-linux-x86_64-ubuntu1604-3.4.6 /usr/local/mongo</div><div class="line">ln -s /usr/local/mongo/bin/mongo /usr/local/bin/mongo</div><div class="line">ln -s /usr/local/mongo/bin/mongod /usr/local/bin/mongod</div><div class="line">sudo ./mongod #启动服务进程</div><div class="line">mongo #测试服务器</div></pre></td></tr></table></figure><p>安装完成</p><p>接下来是配置</p><p>配置文件<code>mangodb.cnf</code>,放在/data/db下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">dbpath=/data/db/</div><div class="line">logpath=/data/db/mongo.log</div><div class="line">logappend=true</div><div class="line">fork=true</div><div class="line">port=27017</div><div class="line">rest=true #非必须</div><div class="line">httpinterface=true #非必须</div><div class="line">bind_ip = 127.0.0.1 #绑定访问ip</div></pre></td></tr></table></figure><p>ps: rest=true 提供网页端api，可以通过访问 <a href="http://localhost:28017/" target="_blank" rel="external">http://localhost:28017/</a> 查看状态 //非必需</p><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mongod -f /data/db/mongodb.cnf</div></pre></td></tr></table></figure><h3 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo mongod --shutdown</div></pre></td></tr></table></figure><h3 id="检查端口"><a href="#检查端口" class="headerlink" title="检查端口"></a>检查端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">netstat -nltp</div></pre></td></tr></table></figure><p>默认27017端口</p><h3 id="运行、基本操作"><a href="#运行、基本操作" class="headerlink" title="运行、基本操作"></a>运行、基本操作</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mongo</div><div class="line">use admin</div><div class="line">db.createUser(&#123;user: "admin",pwd: "pwd",roles: [ &#123; role: "userAdminAnyDatabase", db: "admin"&#125;]&#125;) #创建用户管理账号</div><div class="line">db.auth("admin","pwd") #用管理员账号登陆</div><div class="line">use test #创建并进入一个数据库</div><div class="line">db.createUser(&#123;user: "zhenly",pwd: "zhenly",roles: [ &#123; role: "readWrite", db: "test"&#125;]&#125;) #为当前数据库创建一个具有写入权限的账号</div><div class="line">db.auth("zhenly","zhenly") #使用刚才创建的账号登陆</div><div class="line">db.test.insert(&#123;"name":"test"&#125;); #插入一条数据</div><div class="line">db.test.find() #显示数据库的数据</div></pre></td></tr></table></figure><p>创建管理员后在配置文件加上<code>auth=true</code>来<strong>开启认证</strong></p><h3 id="登陆操作"><a href="#登陆操作" class="headerlink" title="登陆操作"></a>登陆操作</h3><ol><li><code>db.auth(&#39;username&#39;,&#39;password&#39;)</code></li><li><code>$ mongo -u username -p password</code></li></ol><h2 id="用户管理说明"><a href="#用户管理说明" class="headerlink" title="用户管理说明"></a>用户管理说明</h2><p>创建用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">use test</div><div class="line">db.createUser(&#123;user: &quot;zhenly&quot;,pwd: &quot;zhenly&quot;,roles: [ &#123; role: &quot;readWrite&quot;, db: &quot;test&quot;&#125;]&#125;)</div></pre></td></tr></table></figure><p><strong>注意：登陆的时候也同样需要use test之后才能登陆</strong></p><p>更新用户：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.updateUser(&apos;zhenlys&apos;,&#123;pwd:&apos;zhenly&apos;,roles:[&#123;role:&apos;readWrite&apos;,db:&apos;test&apos;&#125;]&#125;)</div></pre></td></tr></table></figure><p>删除用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">db.dropUser(&apos;zhenly&apos;)</div></pre></td></tr></table></figure><h2 id="MongoDB中用户的角色说明"><a href="#MongoDB中用户的角色说明" class="headerlink" title="MongoDB中用户的角色说明"></a>MongoDB中用户的角色说明</h2><h3 id="read"><a href="#read" class="headerlink" title="read"></a>read</h3><p>数据库的只读权限</p><h3 id="readWrite"><a href="#readWrite" class="headerlink" title="readWrite"></a>readWrite</h3><p>数据库的读写权限和<strong>read</strong>的所有权限</p><h3 id="dbAdmin"><a href="#dbAdmin" class="headerlink" title="dbAdmin"></a>dbAdmin</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clean,collMod,collStats,compact,convertToCappe create,db.createCollection(),dbStats,drop(),dropIndexes ensureIndex()，indexStats,profile,reIndex renameCollection (within a single database.),validate</div></pre></td></tr></table></figure><h3 id="userAdmin"><a href="#userAdmin" class="headerlink" title="userAdmin"></a>userAdmin</h3><p>数据库的用户管理权限</p><h3 id="clusterAdmin"><a href="#clusterAdmin" class="headerlink" title="clusterAdmin"></a>clusterAdmin</h3><p>集群管理权限(副本集、分片、主从等相关管理)，包括：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">addShard,closeAllDatabases,connPoolStats,connPoolSync,_cpuProfilerStart_cpuProfilerStop,cursorInfo,diagLogging,dropDatabase </div><div class="line">shardingState,shutdown,splitChunk,splitVector,split,top,touchresync </div><div class="line">serverStatus,setParameter,setShardVersion,shardCollection </div><div class="line">replSetMaintenance,replSetReconfig,replSetStepDown,replSetSyncFrom </div><div class="line">repairDatabase,replSetFreeze,replSetGetStatus,replSetInitiate </div><div class="line">logRotate,moveChunk,movePrimary,netstat,removeShard,unsetSharding </div><div class="line">hostInfo,db.currentOp(),db.killOp(),listDatabases,listShardsgetCmdLineOpts,getLog,getParameter,getShardMap,getShardVersion </div><div class="line">enableSharding,flushRouterConfig,fsync,db.fsyncUnlock()</div></pre></td></tr></table></figure><h3 id="readAnyDatabase"><a href="#readAnyDatabase" class="headerlink" title="readAnyDatabase"></a>readAnyDatabase</h3><p>任何数据库的只读权限(和read相似)</p><h3 id="readWriteAnyDatabase"><a href="#readWriteAnyDatabase" class="headerlink" title="readWriteAnyDatabase"></a>readWriteAnyDatabase</h3><p>任何数据库的读写权限(和readWrite相似)</p><h3 id="userAdminAnyDatabase"><a href="#userAdminAnyDatabase" class="headerlink" title="userAdminAnyDatabase"></a>userAdminAnyDatabase</h3><p>任何数据库用户的管理权限(和userAdmin相似)</p><h3 id="dbAdminAnyDatabase"><a href="#dbAdminAnyDatabase" class="headerlink" title="dbAdminAnyDatabase"></a>dbAdminAnyDatabase</h3><p>任何数据库的管理权限(dbAdmin相似)</p><h3 id="system"><a href="#system" class="headerlink" title="__system"></a>__system</h3><p>什么权限都有</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前开发XMOJ的时候用的是MySQL，现在又想了解一下NoSQL的数据库，所以就选取了一个比较流行的MongoDB进行学习&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="https://blog.zhenly.cn/categories/Linux/"/>
    
    
      <category term="MongoDB" scheme="https://blog.zhenly.cn/tags/MongoDB/"/>
    
      <category term="Linux" scheme="https://blog.zhenly.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>杂谈 | 年度总结</title>
    <link href="https://blog.zhenly.cn/2017/07/21/year-summary/"/>
    <id>https://blog.zhenly.cn/2017/07/21/year-summary/</id>
    <published>2017-07-21T13:42:27.000Z</published>
    <updated>2017-07-21T13:51:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>考完试了，大一过去了，那就总结一下吧</p><a id="more"></a><p> 大一就这样就过去了，回想一下，好像昨天还是高考一样，仿佛我才刚刚来到这个学校。这一年过得也算比较充实的吧，学到了想学的东西，自己和别人合作做起了很多的项目。每次设计自己的系统的时候都会是停不下来的，想到精巧的地方更会是有可能整晚都在想，整晚都睡不着。这一年其实也有那么偶尔晚上睡不着，其一是想着某些东西，更多的就是想着程序的设计。其实想一下我还是挺幸运的，进了自己的想要学的专业。当初选专业的时候或许也没有想这么多吧，就凭着自己的爱好来选，现在想来当初的选择是非常明智的。</p><p>​    这一年我到底学会了什么，其实也没学会多少东西，很多东西只是了解了最基本的用法而已。在课程里面，这一年学了C和C++，还有高数、线代、离散这种基础的数学课程。 要说学会了什么，其实还真没有多少。C和C++算是了解了基础的用法，其实学的更多的是算法以及各种设计模式。再回看我初中和高中写的那些代码，简直是没有丝毫的设计模式，基本就是想到什么就打什么。解决问题也是基本靠搜索引擎以及用最基本的用法暴力进行。这也许就是一个比较大的提升吧。至于那些基础数学，学得只是半斤八两，而自己又没有什么耐心去仔细研究。其实我觉得总有一天我还要重新看一次这些基础的数学。其中很多算法的原理都体现在数学里面，想想还是太亏了。但是我懒啊（理直气壮），又有什么办法。</p><p>​    其中一个很重要的收获应该就是眼界更广了，见识也更多了。很幸运遇到同为热爱编程的同学，一起研究各种问题，解决了我不少的困惑。在我的课程之外，这一年更深入地接触了html和css，开始去学习另一门语言——Javascript，并且用此写了半死不活的网页游戏，后来接触了Nodejs，又写了一个评测网站，一个议程管理系统。现在又要开始写一个用户管理系统了。感觉这一路走来，代码是越来越规范化，也是越来越优美，终于可以体会到优美的代码是多么地吸引人了。还学到了什么？对linux更加熟悉了吧，经过四五次的重装服务器，从一开始用打包好的环境到自己部署安装最新版的各种软件，对于Linux的各种东西也更加深入了解了。总之见识广了，得到了成长，也是挺充实的。</p><p>​    暑假就这样开始了，感觉好多东西需要去做，但是又不知道应该从何做起。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;考完试了，大一过去了，那就总结一下吧&lt;/p&gt;
    
    </summary>
    
      <category term="杂谈" scheme="https://blog.zhenly.cn/categories/%E6%9D%82%E8%B0%88/"/>
    
    
      <category term="流水账" scheme="https://blog.zhenly.cn/tags/%E6%B5%81%E6%B0%B4%E8%B4%A6/"/>
    
  </entry>
  
  <entry>
    <title>Web | XMatrix OJ 第一个版本迭代</title>
    <link href="https://blog.zhenly.cn/2017/07/21/xmoj-web-2/"/>
    <id>https://blog.zhenly.cn/2017/07/21/xmoj-web-2/</id>
    <published>2017-07-21T13:42:27.000Z</published>
    <updated>2017-07-22T09:21:57.916Z</updated>
    
    <content type="html"><![CDATA[<p> 0.1的森林猫已经具有基本的评测功能了，我们又开始开发了0.2的布偶猫。<br><img src="/images/20170722171904.jpg" alt="XMatrix"><br><a id="more"></a></p><p> 由于一开始不懂得用各种高级功能和对于nodejs的语法不甚了解，导致代码写得很蠢。布偶猫对前一个版本的代码进行的完全的重构，起码有70%的代码的结构经过了修改，而且总的代码量减少了至少30%以上。</p><p> 这个版本，引入了vuejs对前端页面进行了重构，提高了页面代码的可读性和各个部分的可操作性。vuejs可以对数据进行双向绑定，还有v-for等功能非常适合与大量重复框架的内容的展示。数据的双向绑定使得页面形成之后对于页面内容的修改变得非常的方便，只要修改指定对象的数据页面就会更新发生变化，所以我把问题列表和问题详情这两个页面用vuejs重新写了一次，页面从服务器得到数据之后就不需要一个个操作DOM来修改页面内容。对于以后的进一步开发提供了便利</p><p> 其次，为了赶上技术潮流，我把网站的协议由http1.1升级为http2，网上有人测试过，http2的性能可以达到http1.1的5-10倍甚至更高。但是要用上http2也是不简单的，至今我还没有实现在我的chrome上使用h2和xmatrix连接。首先我启用了nginx的http2模块，但是这个并没有用，然后查阅资料才发现是由于nginx的openssl版本太低而导致的，只有openssl1.0.2以上的版本才支持ALPN，否则只能支持NPN，而chrome在上一年的6月的更新里就只不允许NPN使用h2连接，会自动降级到http1.1，然后我发现我的centos的openssl居然是2013年的老版本，（据说14年ssl爆出心脏出血漏洞涉及到全球大多数设备），于是我重新编译安装了2017年的openssl，然后再对nginx编译升级到1.13.0的主线版本，然而还是不能在我的浏览器启用h2，也不知道为什么。</p><p> 在上面搜索资料的过程中，我发现了一个检测网站连接安全性的网站，惊讶地发现xmatrix的安全型只有F，然后我修改了nginx的配置文件，使用了更加安全的策略，禁止不安全的算法，然后就安全性提升到A+了。</p><p>在这个版本里面，我把nodejs变得更加的模块化了，把一些操作封装成了一个对象，比如数据库模块，用户认证模块，页面渲染模块，让主要的express的app.js只负责数据的中转，变成一个中间层。下一步的目标就是把邮件系统也封装起来。现在app.js这个主要的服务进程实现了比0.1更多的功能，代码量却减少了30%。我个人认为，模块化应该是很重要的一个环节，因为把代码都写在一个文件里面是一个很灾难的东西，极大地降低的代码的可读性。如果以后要做分布式的话，可以考虑构造一套以http协议为api的子系统，这也是很久之前的构想了。</p><p>然后，对于问题详情页面的渲染，我一开始采用了ejs的模板引擎。问题列表是使用静态页面通过post请求获得内容，使用vuejs进行渲染，而问题详情页面是服务器首先把数据填充好，再发给用户端用vuejs进行渲染。为什么要这样做，主要是因为权限的管理。问题列表的获取在本来的设计上是不需要用户权限，也就是说并不需要登陆就可以访问的，而问题详情页面里面包含这大量的用户信息，必须要登陆才可以进行访问。这样的一个设计是考虑到给未登录的用户足够大的权限，但是又不允许未登录的用户越权访问。这样一来，用户在访问问题详情页面的时候就要先向服务器进行请求，服务器验证了用户的身份再从数据库读取信息，填充到页面里面去。但是后期或许会考虑去掉这个ejs模板引擎直接通过post发送数据交给vuejs，因为这个前天上手了这个前端框架发现还真功能强大，的确足够替代掉ejs，又能保证代码功能实现的一致性，还有vuejs的路由功能确实应该要用上。</p><p>至于评测端，就是由另一位大佬来写的。我也只是了解调用的过程。目前调用评测是通过nodejs调用子进程来实现的，并没有轮询。首先，由nodejs把用户和问题的的数据存到数据库，还有把代码以uid和pid的命名格式存到本地，然后调用judge进程，把用户和问题id作为参数传进去，然后评测系统就对代码进行评测，评测完就把结果写进数据库。同一时间，用户在提交代码以后就会每隔一段时间向服务器请求成绩数据，服务端就会查询数据库，如果评测好了就会返回成绩。现在的评测端只是支持编译测试和标准测试，还有很多的工作需要去做</p><p>关于接下来的开发关注点应该就是在docker的实现，现在评测服务的运行还是在整个服务器本地上跑的，这是一个极大的安全隐患，一个恶意代码就有可能把服务器搞崩，如果实现了docker，那么nodejs也应该要放进去docker里面了，全部实现docker化</p><p>对于服务端的代码，我是有考虑后期用ES6再重构一次的，但是也要等我学会了ES6的基本语法再说。</p><p>这个项目的一个重大的缺陷就在于没有完善的项目管理，现在的需求，开发，测试，全都是手工操作，没有一套规定的流程，所以这个版本我们即将引入Teambition团队管理攻击以及文档管理（还没选好用什么），规范一下项目开发流程。</p><p>目前的大致框架</p><p><img src="https://blog.zhenly.cn/images/1-768x869.png" alt="框架"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 0.1的森林猫已经具有基本的评测功能了，我们又开始开发了0.2的布偶猫。&lt;br&gt;&lt;img src=&quot;/images/20170722171904.jpg&quot; alt=&quot;XMatrix&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="https://blog.zhenly.cn/categories/Web/"/>
    
    
      <category term="Web" scheme="https://blog.zhenly.cn/tags/Web/"/>
    
      <category term="开发日记" scheme="https://blog.zhenly.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="XMOJ" scheme="https://blog.zhenly.cn/tags/XMOJ/"/>
    
  </entry>
  
  <entry>
    <title>Web | XMatrix OJ 开发日记</title>
    <link href="https://blog.zhenly.cn/2017/07/21/xmoj-web/"/>
    <id>https://blog.zhenly.cn/2017/07/21/xmoj-web/</id>
    <published>2017-07-21T13:40:27.000Z</published>
    <updated>2017-07-21T13:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前花了两天弄好了网页的大概框架，现在又花了一个星期的时间完成了后端的代码，才知道做出一个有功能的网站是需要顾及很多东西的，排版、交互、安全、前后端。</p><a id="more"></a><h3 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h3><p>XMatrix使用了<a href="http://getbootstrap.com/" target="_blank" rel="external"><em>Bootstrap</em></a>框架，这个框架排版起来很方便，而且在移动端的显示效果也能很好的适配，在各种交互操作上用了<a href="http://jquery.com/" target="_blank" rel="external"><em>jQuery</em></a>（用于动态加载导航栏）、 <a href="http://codemirror.net/" target="_blank" rel="external"><em>CodeMirror</em></a>（代码输入框）。</p><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><p>由于XMatrix现在是部署在一个低配服务器上，那么考虑到性能问题，我们使用了 <a href="https://www.mysql.com/" target="_blank" rel="external"><em>MySQL</em></a> 作为了网站的数据库。然后用<a href="https://nodejs.org/en/" target="_blank" rel="external"><em>nodejs</em></a> 以及 <a href="http://www.expressjs.com.cn/" target="_blank" rel="external"><em>Express</em> </a> 作为后端服务，用于传输用户数据和代码数据。现在nodejs的代码都是挤在一块的，用nginx的把/api/这个目录统一转发到nodejs监听的端口来实现我们的功能，但是一旦功能多起来就会显得异常的乱，所以我打算下一步就把这些端口分离开（数据库操作，前端交互操作，评测操作…）通过内部的post请求来实现各个模块的通讯。</p><h3 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h3><p>在构建网站的用户系统的时候，我考虑最多的就是用户系统的安全性问题。</p><p>我了解到实现用户认证的方法一般是生成一个session分别保存在cookies和服务器数据库，用户通过发送session来获取服务器里对应的用户状态和数据，但是这个方法需要占用大量的服务器内存和对数据库的操作，于是我看了JWT的一些方法，写出了自己的一套用户认证系统</p><blockquote><p>用户认证系统</p><p>实际数据：</p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&gt; JSON&#123;</div><div class="line">&gt;</div><div class="line">&gt;   "userID":10000,</div><div class="line">&gt;</div><div class="line">&gt;   "token":666666,//(一个随机数)[每次涉及到用户权限和数据库的操作都会更新一次]</div><div class="line">&gt;</div><div class="line">&gt;   "lastDate":"2017-04-28 17:50:00"//[数据：登陆过期时间]</div><div class="line">&gt;</div><div class="line">&gt; &#125;</div><div class="line">&gt;</div><div class="line">&gt;</div><div class="line">&gt; "sign":'17a1b9fcaca894d6770fbcf0ca4421e5c740da63'//(以上三个信息 + 密钥字符串 生成的SHA1)</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>&gt;</p><blockquote><p>cookie:<br>userSession:<br>1e1ed93e21e0fd7778238eb6f71ae918812c9f806caa631c55af91d4429c812e7c89c5356a60f14f90e59811d253b89966963c594403db318105c57d9191c25e52f7b766a8d34ebf8a1253ea059391d20793963e16e820497f9ff7bdccdfc4045c0968a527614c22f42dc1f165ed4b3b<br>  (服务端用密钥加密的字符串)[数据：userID + token + 登陆过期时间]<br>sign:17a1b9fcaca894d6770fbcf0ca4421e5c740da63(userSession + 密钥字符串 生成的SHA1)</p><p>密钥字符串【储存在服务器】</p><p>每次涉及到用户权限的操作：</p><pre><code>把userSession和sign附在post数据里面发给服务器(后期用httponly代替)</code></pre><p>服务器：</p><ol><li>没有认证信息， 直接返回failed.</li><li>把 userSession + 密钥字符串 连起来生成SHA1：<ol><li>sign不一致：那么返回failed，</li><li>sign一致：  继续进行</li></ol></li><li>用密钥解密session：<ol><li>验证时间是否在3小时之内： 返回failed    (PS: 每次登陆生成一个当前时间的session给用户)  </li><li>时间没有过期：  生成一个当前时间的session给用户，更新json对象里面的session</li></ol></li><li>验证token与user数据库里面的是否一致：<ol><li>不一致： 生成一个随机数，更新数据库中的token，然后返回failed</li><li>一致：   生成一个随机数，更新数据库中的token，然后继续执行</li></ol></li><li>使用userID 进行数据库操作，然后用  生成加密的userSession + 密钥字符串 生成的SHA1  对sesssion进行签名， 最后返回新的json对象给用户。</li></ol></blockquote><p>这个用户认证系统的作用之一是<strong>防止非法请求</strong>，</p><p>比如post /api/submit 是可以提交代码的API，那么如果有人恶意地调用这个API向服务器提交代码就有可能导致服务器不堪重负，那么我在post请求里面添加了userSession和 sign，只有通过附加这两个参数才可以验证用户身份才允许提交代码。</p><p>那么是不是只要获得这两个参数就可以<strong>无限提交</strong>了呢？</p><p>答案肯定是否定的，首先userSession这个加密过的数据含有用户id以及这一次操作的token，如果你进行了一次的提交，那么token就会发生改变，这两个数据就变得完全没有用了，所以说userSession是一个一次性的数据。虽然成功提交之后，会返回一个新的userSession，但是我可以在服务端对某些id进行监控，一旦发现有非正常的提交或者短时间内提交次数过多可以对这个账号进行短时间的禁用。</p><p>其二，防止<strong>异地同时登陆</strong></p><p>这一个措施也同时在保护用户账号的安全，一般的用户系统是通过cookie来储存用户的登陆状态，那么如果有人获得了某个账户的cookies，那么就可以登陆账号进行操作（题外话：几年前QQ的快速登陆的token是以get形式传递的，可以被截取，导致只要你获得了这个token，就可以通过快速登陆接口进入这个账号的QQ空间，邮箱，账户安全中心等网页）。但是我这个用户认证系统中的token是每次操作都会改变的，虽然增加了服务器的负担，但是如果你的账号被别人登陆的话，那么存在你这边的cookies中的userSession就会失效而退出登陆，一来保证了服务端操作的逻辑性，二来提醒你你的账号被异地登陆。</p><p>如果是密码泄露了那么就需要更改密码了，如果是userSession泄露了，那么只需要重新登陆那么对方那边的userSession就会失效。</p><p>其三，验证<strong>用户身份</strong></p><p>userSession中储存有用户的ID，那么我只需要根据用户的ID获取他的权限那么就知道那些操作是可以进行那些是不被允许的了。</p><p>其四，<strong>长期没有操作</strong>将需要重新登陆</p><p>userSession中储存有签名验证的时间，如果用户长时间没有操作，那么我将会判断用户是离开了电脑，那么他的那个userSession就会自动失效，防止被他人利用。</p><p>后期我会加入验证码，IP地址检测等安全措施</p><p>除了用户认证系统外，我还对<strong>密码的储存</strong>做了一些加密措施。</p><p>在前端先服务器提起post请求时候，用户的密码就会进行一次SHA1的加密，提交到后端的只是一串SHA1，那么就可以防止后端人员获取到用户的密码而进行撞库攻击，</p><p>然后在密码存储到数据段之前，又会进行一次SHA1的加密，这个的作用就是防止数据库脱库之后被人登陆账号，或对同样是SHA1储存密码的网站进行撞库攻击。因为你只是获得了密码的两次SHA1的结果，并不知道密码以及一次SHA1后的密码是什么。如果缺少了这个步骤，那么别人就可以获得SHA1一次加密后的密码，那么就通过直接POST请求提交SHA1一次后的结果登陆账号。</p><p>有报道说SHA1已经并不安全了，后期会考虑更换加密算法。</p><p>防止中间人攻击</p><p>全程使用了<strong>https</strong>协议对数据的通讯进行了加密</p><p>防止<strong>XSS攻击</strong></p><p>首先，我们关系到数据库以及重要的操作都是交给服务端处理的，这一来就可以防止了绝大多数的js注入攻击，然后我一开始对用户提交的数据的过滤检测是放在网页上的，但是这也暴露了一个问题，别人可以通过直接POST请求注入js，那么我就把对数据的过滤放到了服务端。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>现在网页的用户系统也具有了基本的登陆注册功能了，接下来的工作可能要等期中考试过了再来继续做了</p><blockquote><p>todo:（更新：现已基本完成，进入下一阶段的开发）</p><ol><li>修改session和sign为httponly(提高安全性,防止js访问cookie)[需要重构后端用户认证系统]</li><li>完成用户中心的服务端API</li><li>利用nodejs的express返回html（动态渲染html）3.1 动态返回问题列表页面(need 问题数据库)3.2 动态返回问题详情页面(need 问题数据库)</li><li>上线评测模块</li><li>构建问题数据库</li><li>增加验证码系统(注册账号)</li><li>发送验证邮件添加60s时间间隔，并且每天最多3次</li><li>重新设计成绩回应界面</li><li>设计管理员页面(控制面板)并完成后端</li><li>实现后端模块化，各种模块分离开来</li><li>实现找回密码功能</li></ol></blockquote><p> 源代码： <a href="https://github.com/XMatrixTeam/XMatrixOnlineJudge" target="_blank" rel="external">GIthub</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前花了两天弄好了网页的大概框架，现在又花了一个星期的时间完成了后端的代码，才知道做出一个有功能的网站是需要顾及很多东西的，排版、交互、安全、前后端。&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="https://blog.zhenly.cn/categories/Web/"/>
    
    
      <category term="Web" scheme="https://blog.zhenly.cn/tags/Web/"/>
    
      <category term="开发日记" scheme="https://blog.zhenly.cn/tags/%E5%BC%80%E5%8F%91%E6%97%A5%E8%AE%B0/"/>
    
      <category term="XMOJ" scheme="https://blog.zhenly.cn/tags/XMOJ/"/>
    
  </entry>
  
  <entry>
    <title>C++ | 对C++的一些知识点的理解</title>
    <link href="https://blog.zhenly.cn/2017/07/21/cpp-knowledge/"/>
    <id>https://blog.zhenly.cn/2017/07/21/cpp-knowledge/</id>
    <published>2017-07-21T13:22:27.000Z</published>
    <updated>2017-07-21T14:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>对C++一些比较重要的知识点进行了简单的总结</p><a id="more"></a><h2 id="const与define的区别"><a href="#const与define的区别" class="headerlink" title="const与define的区别"></a>const与define的区别</h2><p>define是预编译，是进行编译过程中最先进行的一个过程，会把变量进行直接的替换。</p><p>如果代码中出现</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">define</span> BBB 11</span></div><div class="line">BBB = <span class="number">12</span>;</div></pre></td></tr></table></figure><p>编译器就会报错<br>但是，通过define定义的常量只是一种字符串替换，将代码里面所有相同的定义的字符串替换成另一个字符串。<br>而const是在编译过程中的一种定义，是通过编译器来处理的。<br>这样就导致了const与define有着不同的特性</p><ul><li>const定义的常量在内存中只占用一个空间，而define定义的常量在内存中占用多个空间，在内存占用方面const具有优势。</li><li>define定义的常量是简单的字符串替换，有可能会触发意想不到的错误，而且define定义的常量没有类型，没有类型判断，那又可能出现类型不匹配的错误了。</li></ul><h2 id="引用与指针的区别"><a href="#引用与指针的区别" class="headerlink" title="引用与指针的区别"></a>引用与指针的区别</h2><p>引用是目标地址，没有自己的空间，可以看作是目标变量的一个别名<br>而指针相当于一个变量，拥有自己的地址和空间，而空间里面就储存着目标的地址。</p><p>这就使得他们分别有着不同的特性</p><ul><li>sizeof(引用)返回的是目标变量的大小，而sizeof(指针)返回的是指针占用空间的大小</li><li>指针可以存在多级，如 int **p，是一个指向（指向（整型变量）的指针）的指针，而引用不可以多重引用。</li><li>指针可以指向NULL（此时不可以被解引用），而引用没有办法指向NULL，必须初始化。</li><li>指针的值可以随时改变，而引用不能被改变。</li></ul><h2 id="h头文件中的ifndef-define-endif-的作用？"><a href="#h头文件中的ifndef-define-endif-的作用？" class="headerlink" title=".h头文件中的ifndef/define/endif 的作用？"></a>.h头文件中的ifndef/define/endif 的作用？</h2><p>防止重复include头文件。<br>有的时候我们需要在多个源文件里面include同样的头文件，而使用ifndef/define/endif使得该头文件只会被inclued一次。</p><h2 id="面向对象的三个基本特征"><a href="#面向对象的三个基本特征" class="headerlink" title="面向对象的三个基本特征"></a>面向对象的三个基本特征</h2><p>封装，继承，多态</p><p>封装：用类把对数据操作方法隐藏起来，只留下接口和调用方法给外部，使得数据抽象化。保护数据，使得数据只能由内部方法来修改。</p><p>继承：一个类可以通过继承父类来获得父类的功能而不用重新编写，极大地提高了代码的重用率。并且继承之后也可以添加具体的新功能，又保留了父类的基本功能，还可以对父类的功能进行选择性地重写。</p><p>多态：同一接口的不同形态，对于传入的一个参数，传给不同的子类，实现不同的功能。实现了接口与实现的分离，提高代码的可维护性。</p><h2 id="动态绑定和静态绑定的区别"><a href="#动态绑定和静态绑定的区别" class="headerlink" title="动态绑定和静态绑定的区别"></a>动态绑定和静态绑定的区别</h2><p>动态绑定和静态绑定是继承和多态的一种特性</p><p>静态绑定的对象的类型再编译的时候已经确定好了，一个对象的静态类型不可被改变，而动态类型可以随时改变。</p><p>动态绑定的类型是取决于对象的动态类型。</p><p>静态绑定之后对象调用的方法是一定的，而动态绑定的对象的调用的方法却取决于对象的动态类型，这种特性对于面向对象编程提供了极大的灵活性。</p><h2 id="main-函数执行以前，还会执行什么代码？"><a href="#main-函数执行以前，还会执行什么代码？" class="headerlink" title="main 函数执行以前，还会执行什么代码？"></a>main 函数执行以前，还会执行什么代码？</h2><p> main函数执行之前，程序还需要进行初始化操作，比如把全局变量放到内存里面，初始化进程等一系列的操作。</p><h2 id="描述内存分配方式以及它们的区别"><a href="#描述内存分配方式以及它们的区别" class="headerlink" title="描述内存分配方式以及它们的区别?"></a>描述内存分配方式以及它们的区别?</h2><p>内存的分配方式主要分为三种。。</p><p>第一是在静态储存区，其中又分为Code Area和Static Area，用于储存程序主体执行代码和全局变量以及静态变量和函数。</p><p>第二是在Heap（堆），new/delete/malloc/alloc等指令操作的内存是在这个区域里面，里面的空间分配可以由代码进行分配和释放。</p><p>第三是在Stack（栈），每个函数的执行以及他们的局部变量都是在栈里分配的，当进入一个函数的时候，就会在栈中为他们分配空间，以及函数里面的变量，当函数结束的时候，栈内相应的空间就会被释放。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对C++一些比较重要的知识点进行了简单的总结&lt;/p&gt;
    
    </summary>
    
      <category term="Cpp" scheme="https://blog.zhenly.cn/categories/Cpp/"/>
    
    
      <category term="Cpp" scheme="https://blog.zhenly.cn/tags/Cpp/"/>
    
  </entry>
  
  <entry>
    <title>C# | 多线程编程</title>
    <link href="https://blog.zhenly.cn/2017/07/21/cs-Multithreading/"/>
    <id>https://blog.zhenly.cn/2017/07/21/cs-Multithreading/</id>
    <published>2017-07-21T13:15:27.000Z</published>
    <updated>2017-07-21T14:02:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习一下C#的多线程库的一些基本操作，了解多线程工作的适用场景以及某些情况下的解决方案</p><a id="more"></a><ul><li><p>多线程的方法一般是由  System.Threading 命名空间来提供的</p></li><li><p>常用类可以参考</p></li></ul><h3 id="1-System-Threading-Thread-类"><a href="#1-System-Threading-Thread-类" class="headerlink" title="1. System.Threading.Thread 类"></a>1. System.Threading.Thread 类</h3><p>这是用于控制线程的基础类，可以通过这个类来操作线程。</p><p>以下是其中比较重要的属性：</p><p>​    <code>ManagedThreadId</code> 线程唯一标识符</p><p>​    <code>ThreadState</code> 检测线程状态</p><p>下面是一个线程的简单例子</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Threading;</div><div class="line"></div><div class="line">namespace Threadtest &#123;</div><div class="line">    class Program &#123;</div><div class="line">        static void Main(string[] args) &#123;</div><div class="line">            Console.WriteLine(&quot;MainThreadId is &quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">            Message message = new Message();</div><div class="line">            Thread threadone = new Thread(new ThreadStart(message.ShowMessage));</div><div class="line">            //threadone.IsBackground = true;//线程后台运行</div><div class="line">            threadone.Start();</div><div class="line">            Console.WriteLine(&quot;Main&quot;);</div><div class="line">            //Console.ReadLine();</div><div class="line">            threadone.Join();//直到线程调用结束才继续</div><div class="line">            Thread.Sleep(1000);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class Message &#123;</div><div class="line">        public void ShowMessage() &#123;</div><div class="line">            string message = string.Format(&quot;id:&#123;0&#125;&quot;, Thread.CurrentThread.ManagedThreadId);</div><div class="line">            Console.WriteLine(message);</div><div class="line">            for(int n = 0; n &lt; 10; n++) &#123;</div><div class="line">                Thread.Sleep(300);</div><div class="line">                Console.WriteLine(&quot;num is &quot; + n.ToString());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面说明了如何让线程后台运行的threadone.IsBackground = true;</p><p>这个属性的作用就是使得主线程不必等后台线程执行完毕才结束，可以比后台线程提前结束。</p><p>还有直到线程调用结束才继续的 threadone.Join();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Threading;</div><div class="line"></div><div class="line">namespace Threadtest &#123;</div><div class="line">    class Program &#123;</div><div class="line">        static void Main(string[] args) &#123;</div><div class="line">            Console.WriteLine(&quot;MainThreadId is &quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">            Message message = new Message();</div><div class="line">            Thread threadone = new Thread(new ThreadStart(message.ShowMessage));</div><div class="line">            //threadone.IsBackground = true;//线程后台运行</div><div class="line">            threadone.Start();</div><div class="line">            Console.WriteLine(&quot;Main&quot;);</div><div class="line">            //Console.ReadLine();</div><div class="line">            threadone.Join();//直到线程调用结束才继续</div><div class="line">            Thread.Sleep(1000);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class Message &#123;</div><div class="line">        public void ShowMessage() &#123;</div><div class="line">            try &#123;</div><div class="line">                string message = string.Format(&quot;id:&#123;0&#125;&quot;, Thread.CurrentThread.ManagedThreadId);</div><div class="line">                Console.WriteLine(message);</div><div class="line">                for (int n = 0; n &lt; 10; n++) &#123;</div><div class="line">                    Thread.Sleep(300);</div><div class="line">                    Console.WriteLine(&quot;num is &quot; + n.ToString());</div><div class="line">                    if (n == 5) &#123;</div><div class="line">                        Thread.CurrentThread.Abort(n);//抛出异常</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125; catch (ThreadAbortException ex) &#123;</div><div class="line">                if (ex.ExceptionState != null) &#123;</div><div class="line">                    Console.WriteLine(string.Format(&quot;stop in &#123;0&#125;&quot;, ex.ExceptionState.ToString()));</div><div class="line">                    Thread.ResetAbort();//继续进程</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine(&quot;go on!&quot;); Thread.Sleep(300);</div><div class="line">            Console.WriteLine(&quot;go on!&quot;); Thread.Sleep(300);</div><div class="line">            Console.WriteLine(&quot;go on!&quot;); Thread.Sleep(300);</div><div class="line">            Console.WriteLine(&quot;go on!&quot;); Thread.Sleep(300);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上面的代码演示了终止进程和继续进程的方法</p><p>Thread.CurrentThread.Abort(n);是抛出异常的语句，n是错误参数。</p><p>同样我们也可以在主进程里面通过调用 threadone.Abort(5);来中断进程，</p><p>注意，这里必须包含一个参数，不然的话就会调用无参数的catch，由于上面程序没有添加这个，所以不能继续进程，从而直接结束进程。</p><p>Thread.ResetAbort(); 这是继续执行进程的语句，没有这句的话整个进程就会结束，不会继续进行。</p><p>附加关于catch的用法</p><blockquote><p>如果try发生了异常，则转入catch的执行。catch有几种写法：<br>catch<br>这将捕获任何发生的异常。<br>catch(Exception e)<br>这将捕获任何发生的异常。另外，还提供e参数，你可以在处理异常时使用e参数来获得有关异常的信息。<br>catch(Exception的派生类 e)<br>这将捕获派生类定义的异常，例如，我想捕获一个无效操作的异常，可以如下写：<br>catch(InvalidOperationException e)<br>{<br>    ….<br>}<br>这样，如果try语句块中抛出的异常是InvalidOperationException，将转入该处执行，其他异常不处理。 </p><p>catch可以有多个，也可以没有，每个catch可以处理一个特定的异常。.net按照你catch的顺序查找异常处理块，如果找到，则进行处理，如果找不到，则向上一层次抛出。如果没有上一层次，则向用户抛出，此时，如果你在调试，程序将中断运行，如果是部署的程序，将会中止。 </p><p>如果没有catch块，异常总是向上层（如果有）抛出，或者中断程序运行。 </p></blockquote><p>我们再来看一段代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Threading;</div><div class="line"></div><div class="line">namespace Threadtest &#123;</div><div class="line">    class Program &#123;</div><div class="line">        static void Main(string[] args) &#123;</div><div class="line">            Console.WriteLine(&quot;MainThreadId is &quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">            myprinter print1 = new myprinter();</div><div class="line">            Thread[] threads = new Thread[10];</div><div class="line">            for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                threads[i] = new Thread(new ThreadStart(print1.PrinfNum));</div><div class="line">                threads[i].Name = i.ToString() + &quot; thread&quot;;</div><div class="line">            &#125;</div><div class="line">            foreach (Thread t in threads) &#123;</div><div class="line">                t.Start();</div><div class="line">            &#125;</div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class myprinter &#123;</div><div class="line">        public void PrinfNum()&#123;</div><div class="line">            Console.WriteLine(&quot;No.&#123;0&#125; thread is runing!&quot;, Thread.CurrentThread.Name);</div><div class="line">            Thread.Sleep(100);</div><div class="line">            for(int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                Console.WriteLine(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这段代码同时调用了10个进程，输出输出0-9，但是结果却是意料之外的。</p><p>结果显示输出的数字都是混乱没有顺序可言的，这就是线程之间的不同步所导致。</p><p>所以现在我们需要一个方法，可以阻塞调用线程，同步访问进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Threading;</div><div class="line"></div><div class="line">namespace Threadtest &#123;</div><div class="line">    class Program &#123;</div><div class="line">        static void Main(string[] args) &#123;</div><div class="line">            Console.WriteLine(&quot;MainThreadId is &quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">            myprinter print1 = new myprinter();</div><div class="line">            Thread[] threads = new Thread[10];</div><div class="line">            for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                threads[i] = new Thread(new ThreadStart(print1.PrinfNum));</div><div class="line">                threads[i].Name = i.ToString() + &quot; thread&quot;;</div><div class="line">            &#125;</div><div class="line">            foreach (Thread t in threads) &#123;</div><div class="line">                t.Start();</div><div class="line">                //t.Join();</div><div class="line">            &#125;</div><div class="line">            for (int i = 0; i &lt; 100; ++i) &#123;</div><div class="line">                //Console.WriteLine(&quot;time:&#123;0&#125; &quot;, i);</div><div class="line">                Thread.Sleep(100);</div><div class="line">            &#125;</div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class myprinter &#123;</div><div class="line">        public void PrinfNum()&#123;</div><div class="line">            lock (this) &#123;</div><div class="line">                Console.WriteLine(&quot;No.&#123;0&#125; thread is runing!&quot;, Thread.CurrentThread.Name);</div><div class="line">                //Thread.Sleep(500);</div><div class="line">                for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                    Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">                &#125;</div><div class="line">                Console.WriteLine();</div><div class="line">            &#125;</div><div class="line">            for (int i = 10; i &lt; 20; ++i) &#123;</div><div class="line">                Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line"></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>我们使用了C#中lock的关键字，使得lock范围类的代码是处于一个安全的进程，不与其他进程所共享，而在lock范围之外的代码就又可以和其他进程同时执行导致混乱。</p><p>这里关注一下lock里面的this，他是一个对象标记（必须是对象，不能是int等基本类型（会发生封装）或字符串（暂留）），会使得同一标记的代码不会同时执行。</p><p>其实如果你需要使得整个线程处于安全状态，那么你可能会调用t.Join();等待进程执行完毕，不过这样为什么不用单进程而用多进程呢？这里需要注意的是lock的作用并不会作用与主进程，子进程依然和main在两条时间线上执行。</p><p>lock的一些用法：</p><blockquote><p>lock(objectA){codeB} 看似简单，实际上有三个意思，这对于适当地使用它至关重要：</p><ol><li>objectA被lock了吗？没有则由我来lock，否则一直等待，直至objectA被释放。</li><li>lock以后在执行codeB的期间其他线程不能调用codeB，也不能使用objectA。</li><li>执行完codeB之后释放objectA，并且codeB可以被其他线程访问。</li></ol></blockquote><p>2017-3-12</p><p>除此之外，还有System.Threading.Interlocked类、Moniter类、 Mutex类、 ReaderWriterLock类 是类似于lock类的一些类，但是又与lock有些不同，每一种类都有这自己的特性，至于用哪一个类就要看情况了。</p><p>如果想限制一个类只能同时被一个线程访问，那就可以通过<strong>添加属性</strong>并且<strong>继承</strong>System.ContextBoundObject类来实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">[System.Runtime.Remoting.Contexts.Synchronization]</div><div class="line">public class myprinter : System.ContextBoundObject &#123;</div><div class="line">        public void PrinfNum()&#123;</div><div class="line">            Console.WriteLine(&quot;No.&#123;0&#125; thread is runing!&quot;, Thread.CurrentThread.Name);</div><div class="line">            for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                Thread.Sleep(100);</div><div class="line">                Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">            for (int i = 10; i &lt; 20; ++i) &#123;</div><div class="line">                Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有一种方法也是可以实现类似的功能 MethodImplAttribute</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Threading;</div><div class="line">using System.Runtime.CompilerServices;//引用头文件</div><div class="line">namespace Threadtest &#123;</div><div class="line">    class Program &#123;</div><div class="line">        static void Main(string[] args) &#123;</div><div class="line">            Console.WriteLine(&quot;MainThreadId is &quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">            myprinter print1 = new myprinter();</div><div class="line">            Thread[] threads = new Thread[10];</div><div class="line">            for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                threads[i] = new Thread(new ThreadStart(print1.PrinfNum));</div><div class="line">                threads[i].Name = i.ToString() + &quot; thread&quot;;</div><div class="line">            &#125;</div><div class="line">            foreach (Thread t in threads) &#123;</div><div class="line">                t.Start();</div><div class="line">                //t.Join();</div><div class="line">            &#125;</div><div class="line">            object abc = new object();</div><div class="line">            lock (abc) &#123;</div><div class="line">                for (int i = 0; i &lt; 100; ++i) &#123;</div><div class="line">                    Console.WriteLine(&quot;time:&#123;0&#125; &quot;, i);</div><div class="line">                    Thread.Sleep(100);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class myprinter : System.ContextBoundObject &#123;</div><div class="line">        [MethodImpl(MethodImplOptions.Synchronized)]//给类加上属性</div><div class="line">        public void PrinfNum() &#123;</div><div class="line">            Console.WriteLine(&quot;No.&#123;0&#125; thread is runing!&quot;, Thread.CurrentThread.Name);</div><div class="line">            for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                Thread.Sleep(100);</div><div class="line">                Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">            for (int i = 10; i &lt; 20; ++i) &#123;</div><div class="line">                Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>同步事件和等待句柄</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">static AutoResetEvent autoEvent;//声明状态变量</div><div class="line">autoEvent.WaitOne();//等待句柄</div><div class="line">autoEvent.Set();//开始运行</div></pre></td></tr></table></figure><p>使用以上方法有一个前提就是需要事件在同一class里面</p><ul><li>关于多线程最大一个问题应该就是死锁了吧，避免死锁最好就是不要同时获取多个锁，如果一定要的话就需要用巧妙的方法咯</li></ul><ul><li><h2 id="自动控制多个线程"><a href="#自动控制多个线程" class="headerlink" title="自动控制多个线程"></a>自动控制多个线程</h2><p>​</p></li></ul><p>如果程序里面有多个线程需要执行，我们可以交给系统的线程池进行自动管理。线程池可以优化线程执行过程，提高数据的吞吐量。但是如果对线程有特殊的控制要求的话就不合适使用线程池。</p><p>线程池一个特点就是自动化，只需要把线程交给线程池，其他管理运行都不用管，但是这又丧失了一定的控制能力。</p><ul><li>每个程序域里面只能有一个threadpool</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Threading;</div><div class="line">using System.Runtime.CompilerServices;</div><div class="line">namespace Threadtest &#123;</div><div class="line">    class Program &#123;</div><div class="line"></div><div class="line">        static void Main(string[] args) &#123;</div><div class="line">            Console.WriteLine(&quot;MainThreadId is &quot; + Thread.CurrentThread.ManagedThreadId);</div><div class="line">            Program print1 = new Program();</div><div class="line">            Thread[] threads = new Thread[10];</div><div class="line">            foreach (Thread t in threads) &#123;</div><div class="line">                ThreadPool.QueueUserWorkItem(new WaitCallback(print1.PrinfNum));</div><div class="line">            &#125;</div><div class="line">            Console.ReadLine();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void PrinfNum(object obj) &#123;</div><div class="line">            Console.WriteLine(&quot;No.&#123;0&#125; thread is runing!&quot;, Thread.CurrentThread.Name);</div><div class="line">            for (int i = 0; i &lt; 10; ++i) &#123;</div><div class="line">                Thread.Sleep(100);</div><div class="line">                Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">            for (int i = 10; i &lt; 20; ++i) &#123;</div><div class="line">                Console.Write(&quot;&#123;0&#125; &quot;, i);</div><div class="line">            &#125;</div><div class="line">            Console.WriteLine();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里注意的是，线程池架构只允许给函数传递一个对象，如果需要传递多个值，就需要把值包装给一个类的对象作为参数传递给QueueUserWorkItem方法。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习一下C#的多线程库的一些基本操作，了解多线程工作的适用场景以及某些情况下的解决方案&lt;/p&gt;
    
    </summary>
    
      <category term="CSharp" scheme="https://blog.zhenly.cn/categories/CSharp/"/>
    
    
      <category term="读书笔记" scheme="https://blog.zhenly.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="CSharp" scheme="https://blog.zhenly.cn/tags/CSharp/"/>
    
  </entry>
  
  <entry>
    <title>C | 标准输入输出和字符串</title>
    <link href="https://blog.zhenly.cn/2017/07/21/c-string/"/>
    <id>https://blog.zhenly.cn/2017/07/21/c-string/</id>
    <published>2017-07-21T13:13:27.000Z</published>
    <updated>2017-07-21T13:16:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>对C语言的字符处理函数库、通用函数库、标准输入输出函数库、字符串处理函数库的学习笔记</p><a id="more"></a><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><ul><li>使用 <code>字符处理函数库（ctype）</code> 中的函数</li><li>使用 <code>通用函数库 （stdlib）</code> 中的 <code>字符串转换函数</code></li><li>使用 <code>标准输入输出函数库 （stdio）</code> 中的 <code>字符串</code>和<code>字符输入输出函数</code></li><li>使用 <code>字符串处理函数库</code> 中的 <code>字符串处理函数</code></li><li>函数库的功能</li></ul><h2 id="重点"><a href="#重点" class="headerlink" title="重点"></a>重点</h2><h3 id="8-2-字符串和字符基础"><a href="#8-2-字符串和字符基础" class="headerlink" title="8.2 字符串和字符基础"></a>8.2 字符串和字符基础</h3><ul><li><p><code>char*</code> 类型的变量用字符串初始化的时候，字符串是放在内存里无法改写的区域  ，如果要进行修改，要先储存到一个字符数组中</p></li><li><p><code>scanf函数</code> 读入字符知道遇到 空格、 tab键、 换行符、EOF 为止</p></li><li><p>格式转换说明符<code>%19s</code> ：使scanf函数最多读入19个字符，并把\0 储存到数组中</p></li><li><p>函数<code>readline （非标准）</code>可以读取任意长度的输入行</p></li><li><p>调用函数是要注意区分 字符串 和 字符 </p><p>​</p></li></ul><h3 id="8-3-字符处理函数库（ctype-h）"><a href="#8-3-字符处理函数库（ctype-h）" class="headerlink" title="8.3 字符处理函数库（ctype.h）"></a>8.3 字符处理函数库（ctype.h）</h3><ul><li>这一部分就是用里面各种函数判断是否为 数字、字母、 空格、小写、 大写，然后转下大小写 而已</li></ul><h3 id="8-4-字符串转换函数-（stdlib-h）"><a href="#8-4-字符串转换函数-（stdlib-h）" class="headerlink" title="8.4 字符串转换函数 （stdlib.h）"></a>8.4 字符串转换函数 （stdlib.h）</h3><p>​    可以将字符串 转换为 各种类型的数字 </p><table><thead><tr><th style="text-align:left">函数</th><th>类型</th></tr></thead><tbody><tr><td style="text-align:left">atof</td><td>double</td></tr><tr><td style="text-align:left">atoi</td><td>int</td></tr><tr><td style="text-align:left">atol</td><td>long</td></tr><tr><td style="text-align:left">strtod</td><td>double</td></tr><tr><td style="text-align:left">strtol</td><td>long</td></tr><tr><td style="text-align:left">strtoul</td><td>unsigned long</td></tr></tbody></table><ul><li>注意 ： 用下面三个函数的时候要注意参数不止一个</li></ul><table><thead><tr><th>函数</th><th>参数1（char *）</th><th>参数2（char **）</th><th>参数3（int）</th></tr></thead><tbody><tr><td>strtod</td><td>目标字符串</td><td>指向导致溢出的字符的地址</td><td>无</td></tr><tr><td></td><td>目标字符串</td><td>指向导致溢出的字符的地址</td><td>识别为几进制(2-36)</td></tr><tr><td></td><td>目标字符串</td><td>指向导致溢出的字符的地址</td><td>识别为几进制</td></tr></tbody></table><ul><li><p>注意：</p></li><li><ol><li>如果要转换的字符串太长，超出了无符号长整型值的取值范围，strtoul()函数将返回ULONG_MAX(4294967295)，</li></ol><ul><li>参数2 是一个指向 地址 的 地址 一般格式是  <code>&amp;指针名</code> </li></ul></li></ul><p><strong>值得注意的是</strong> 经过我的实验</p><hr><p>在 <code>Dev-C++</code>  和 <code>TDM-GCC 4.9.2</code> 的环境下，</p><hr><p><code>ato* 函数</code> 如果字符串里面第一个字符不是数字的话 返回的是 null ，</p><p>​    如果第一个字符是数字 ，第二的不是的话 ， 那么 程序就会 GG， 无响应</p><hr><p><code>strto*函数</code> 如果字符串里面第一个字符不是数字的话 返回的是 0 ，</p><p>​    如果第一个字符是数字 ，第二的不是的话 ， 那么 函数就会 返回 直到第一个字母之前的数字，比如“13ab23” 就会 返回 “12”</p><p>​    然后参数二的地址的内容就会被返回 第一个字母开始的字符串 比如上面的就是 “ab23” </p><hr><h3 id="8-5-标准输入输出库函数-stdio-h"><a href="#8-5-标准输入输出库函数-stdio-h" class="headerlink" title="8.5 标准输入输出库函数(stdio.h)"></a>8.5 标准输入输出库函数(stdio.h)</h3><p>看到一个很美妙的递归输出代码，分享一下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">reverse</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> sPtr)</span></span>&#123;</div><div class="line">  <span class="keyword">if</span> (sPtr[<span class="number">0</span>] == <span class="string">'\0'</span>)&#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    reverse (&amp;sPtr [<span class="number">1</span>]);</div><div class="line">    <span class="built_in">putchar</span> (sPtr[<span class="number">0</span>]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>用 getchar() 的时候记得 字符串最后要加个<code>&#39;\0&#39;</code> （貌似以前都没有加 逃…）</li><li>用puts 的话会自动换行的</li></ul><h3 id="8-6-字符串处理函数库中的字符串处理函数（string-h）"><a href="#8-6-字符串处理函数库中的字符串处理函数（string-h）" class="headerlink" title="8.6 字符串处理函数库中的字符串处理函数（string.h）"></a>8.6 字符串处理函数库中的字符串处理函数（string.h）</h3><ul><li>strcpy, strncpy, strcat, strncat 这些函数返回都是第一个参数</li></ul><ul><li>使用strncpy的时候可以利用第三个参数的值（比字符串长度多一） 决定 是否 复制 <code>\0</code></li></ul><h3 id="8-7-字符串处理库中的比较函数（string-h）"><a href="#8-7-字符串处理库中的比较函数（string-h）" class="headerlink" title="8.7 字符串处理库中的比较函数（string.h）"></a>8.7 字符串处理库中的比较函数（string.h）</h3><p>strcmp , strncmp</p><ul><li>按字典序（ascii码）</li><li>注意 ： 以上带n的函数第三个参数实际上的类型是 <code>size_t</code></li></ul><h3 id="8-8-字符串处理函数库的查找函数（string-h）"><a href="#8-8-字符串处理函数库的查找函数（string-h）" class="headerlink" title="8.8 字符串处理函数库的查找函数（string.h）"></a>8.8 字符串处理函数库的查找函数（string.h）</h3><ul><li>strcspn ， strspn 返回值类型都是 <code>size_t</code></li></ul><h3 id="8-9-字符串处理函数库的内存函数（string-h）"><a href="#8-9-字符串处理函数库的内存函数（string-h）" class="headerlink" title="8.9 字符串处理函数库的内存函数（string.h）"></a>8.9 字符串处理函数库的内存函数（string.h）</h3><ul><li><p>感觉和上面的差不多，就是基于内存的操作，都需要自己设置长度（是基于内存的长度，比如一个int就是4）（还有对于任何数据类型都可以用）</p></li><li><p>补充一下指针知识</p><ul><li><p>指向任意数据类型的指针都可以直接赋给类型为 void<em> 的指针变量，同时类型为 void</em> 的指针也可以直接赋给指向任意数据类型的指针变量（晚上有的说需要强制类型转换，但是尴尬的是我在Dev-cpp里面是不需要的，可能这是Dev-cpp的一个特性吧（更有可能是GNU的锅），真<strong>尴尬</strong>）</p></li><li><p>void指针不能进行算法操作（尴尬的是GNU认定void<em> 和char</em> 的算法操作是一样的，是可以的，又<strong>尴尬</strong>起来了）</p></li><li><blockquote><p>因此下列语句在GNU编译器中皆正确：</p><p>　　pvoid++; //GNU：正确</p><p>　　pvoid += 1; //GNU：正确</p><p>　　pvoid++的执行结果是其增大了1。( 在VC6.0上测试是sizeof(int)的倍数)</p><p>　　在实际的程序设计中，为迎合ANSI标准，并提高程序的可移植性，我们可以这样编写实现同样功能的代码：</p><p>　　void * pvoid;</p><p>　　(char *)pvoid++; //ANSI：正确；GNU：正确</p><p>　　(char *)pvoid += 1; //ANSI：错误；GNU：正确</p><p>　　GNU和ANSI还有一些区别，总体而言，GNU较ANSI更“开放”，提供了对更多语法的支持。但是我们在真实设计时，还是应该尽可能地迎合ANSI标准。</p></blockquote></li></ul></li><li><p>memmove的一个特性是把第二个实参先复制到一个临时的字符数组中，在从临时数组复制到第一个实参里面</p><p>（书本说只有这个函数能处理同一字符串的不同部分，但是我用strncpy也能实现相同的功能，那又很<strong>尴尬</strong>了）</p></li></ul><h3 id="8-10-字符串后处理函数库中的其他函数（string-h）"><a href="#8-10-字符串后处理函数库中的其他函数（string-h）" class="headerlink" title="8.10 字符串后处理函数库中的其他函数（string.h）"></a>8.10 字符串后处理函数库中的其他函数（string.h）</h3><ul><li>strlen 返回的长度不算<code>\0</code></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对C语言的字符处理函数库、通用函数库、标准输入输出函数库、字符串处理函数库的学习笔记&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="https://blog.zhenly.cn/categories/C/"/>
    
    
      <category term="C" scheme="https://blog.zhenly.cn/tags/C/"/>
    
      <category term="读书笔记" scheme="https://blog.zhenly.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="C大学教程" scheme="https://blog.zhenly.cn/tags/C%E5%A4%A7%E5%AD%A6%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>C | 语句与声明的一些区别</title>
    <link href="https://blog.zhenly.cn/2017/07/21/c-question-1/"/>
    <id>https://blog.zhenly.cn/2017/07/21/c-question-1/</id>
    <published>2017-07-21T13:12:27.000Z</published>
    <updated>2017-07-21T13:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>遇到了一个非常有趣的C语言问题</p><a id="more"></a><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">    <span class="keyword">int</span> a = i;</div><div class="line">&#125;</div><div class="line"><span class="comment">//----------正常编译</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">5</span>; i++) <span class="keyword">int</span> a = i;</div><div class="line"><span class="comment">//----------编译错误（Syntax error）语法错误</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</div><div class="line">      <span class="keyword">int</span> b =<span class="number">10</span>;</div><div class="line">&#125;</div><div class="line"><span class="comment">//----------正常编译</span></div><div class="line"></div><div class="line"><span class="keyword">if</span>(<span class="number">1</span>) <span class="keyword">int</span> b =<span class="number">10</span>;</div><div class="line"><span class="comment">//----------编译错误（Syntax error）语法错误</span></div></pre></td></tr></table></figure><p>按照C语言的标准，在for，if， while等语句之中，如果里面的代码只有一行的话，是可以省略花括号的，那么上面的代码自然而然又是<strong>等价</strong>的，但是神奇的是，省略花括号的无一不出现编译错误。</p><p>为什么会这样呢？神奇</p><p>首先，查了查度娘，意料之中没有得到答案，然后去Google，很快就得到了答案</p><p><strong>原因在于C语言标准规定if语句后面要跟代码块或者是一个语句，然而<code>int a = i</code> 并不是一个语句 <em>statement</em>，而是一个声明 <em>declaration</em>，这两者是有很大的区别的.</strong></p><p>以下是C标准关于语句和定义的内容</p><blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&gt; (6.7) declaration:</div><div class="line">&gt;             declaration-speciﬁers init-declarator-listopt ;</div><div class="line">&gt;             static_assert-declaration</div><div class="line">&gt;</div><div class="line">&gt; (6.7) init-declarator-list:</div><div class="line">&gt;             init-declarator</div><div class="line">&gt;             init-declarator-list , init-declarator</div><div class="line">&gt;</div><div class="line">&gt; (6.7) init-declarator:</div><div class="line">&gt;             declarator</div><div class="line">&gt;             declarator = initializer</div><div class="line">&gt;</div><div class="line">&gt; (6.8) statement:</div><div class="line">&gt;             labeled-statement</div><div class="line">&gt;             compound-statement</div><div class="line">&gt;             expression-statement</div><div class="line">&gt;             selection-statement</div><div class="line">&gt;             iteration-statement</div><div class="line">&gt;             jump-statement</div><div class="line">&gt;</div><div class="line">&gt; (6.8.2) compound-statement:</div><div class="line">&gt;             &#123; block-item-listopt &#125;</div><div class="line">&gt;</div><div class="line">&gt; (6.8.4) selection-statement:</div><div class="line">&gt;             if ( expression ) statement</div><div class="line">&gt;             if ( expression ) statement else statement</div><div class="line">&gt;             switch ( expression ) statement</div><div class="line">&gt;</div></pre></td></tr></table></figure></blockquote><p>这样一来，后者就出现了语法错误，然而把他放入花括号里面就可以。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;遇到了一个非常有趣的C语言问题&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="https://blog.zhenly.cn/categories/C/"/>
    
    
      <category term="C" scheme="https://blog.zhenly.cn/tags/C/"/>
    
      <category term="问题" scheme="https://blog.zhenly.cn/tags/%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>C | 语法与语义的“陷阱”</title>
    <link href="https://blog.zhenly.cn/2017/07/21/C-traps-and-defects/"/>
    <id>https://blog.zhenly.cn/2017/07/21/C-traps-and-defects/</id>
    <published>2017-07-21T13:00:22.000Z</published>
    <updated>2017-07-21T13:07:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>《C陷阱与缺陷》，这本书从初学者容易犯错的方面入手，详细解释了C语言的一些坑，个人感觉挺有用的，就总结了一部分内容，以防以后自己会犯错。</p><a id="more"></a><h1 id="语法“陷阱”"><a href="#语法“陷阱”" class="headerlink" title="语法“陷阱”"></a>语法“陷阱”</h1><h2 id="2-2-运算符的优先级问题"><a href="#2-2-运算符的优先级问题" class="headerlink" title="2.2 运算符的优先级问题"></a>2.2 运算符的优先级问题</h2><p>比较常见的一个陷阱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while (b = getchar() != EOF)&#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述写法在运行的时候，得到的b只会是0或1，原因在于！= 的优先级要高于 = ，要实现我们想要的效果，应该写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">while ((b = getchar()) != EOF)&#123;</div><div class="line">...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>还有关于指针的陷阱</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*p()</div><div class="line">*(p())</div><div class="line">(*p)() //不同于上面两个</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">*p++</div><div class="line">*(p++)//取指针p所指的对象，然后  p  加一</div><div class="line">(*p)++ //取指针p所指的对象，然后  对象  加一</div></pre></td></tr></table></figure><h2 id="2-3-注意作为语句结束标志的分号"><a href="#2-3-注意作为语句结束标志的分号" class="headerlink" title="2.3 注意作为语句结束标志的分号"></a>2.3 注意作为语句结束标志的分号</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">if (a &gt; b);</div><div class="line">a++;</div></pre></td></tr></table></figure><p>多了一个分号， 这样的代码是没有任何警告信息的，但是往往和我们预期的结果不同。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (a = b);</div><div class="line">return</div><div class="line">a = a + b;</div><div class="line">b = a - b;</div><div class="line">a = a - b;</div></pre></td></tr></table></figure><p>这段代码的本意是交换a、b的值（这是个不用额外变量调换值的方法）<br>但是如果缺少了分号，返回的值就是a了，然而编译器还是不会有任何报错<br>（当函数类型没有声明的时候容易出bug而不容易发现）<br>（return后不带任何值默认为0）</p><h2 id="2-4-switch语句"><a href="#2-4-switch语句" class="headerlink" title="2.4 switch语句"></a>2.4 switch语句</h2><p>注意break;<br>这是c的一大弱点，但也是优势所在。</p><h2 id="2-5-函数调用"><a href="#2-5-函数调用" class="headerlink" title="2.5 函数调用"></a>2.5 函数调用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">f();</div><div class="line">f;</div></pre></td></tr></table></figure><p>前者是调用f函数，后者是返回f函数的地址，并没有调用函数。所以我们调用函数的时候无论是否带有参数，都要带个括号。</p><h2 id="2-6-“悬挂”-else-引发的问题"><a href="#2-6-“悬挂”-else-引发的问题" class="headerlink" title="2.6 “悬挂” else 引发的问题"></a>2.6 “悬挂” else 引发的问题</h2><p>对于多重嵌套的if语句，最好不要省略大括号</p><h1 id="语义“陷阱”"><a href="#语义“陷阱”" class="headerlink" title="语义“陷阱”"></a>语义“陷阱”</h1><h2 id="3-1-指针与数组"><a href="#3-1-指针与数组" class="headerlink" title="3.1 指针与数组"></a>3.1 指针与数组</h2><ul><li>任何一个数组下标的运算都等同于一个对应的指针运算。</li></ul><h3 id="声明数组"><a href="#声明数组" class="headerlink" title="声明数组"></a>声明数组</h3><ul><li>一般整型数组：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[<span class="number">3</span>];</div></pre></td></tr></table></figure><ul><li>结构体数组：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> p[<span class="number">4</span>];</div><div class="line">  <span class="keyword">double</span> x;</div><div class="line">&#125;b[<span class="number">17</span>];</div></pre></td></tr></table></figure><ul><li>二维数组：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> c[<span class="number">4</span>][<span class="number">5</span>];</div></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> *p;</div><div class="line"><span class="keyword">int</span> a[<span class="number">10</span>];</div><div class="line">p = a; <span class="comment">//正确， 把数组a中下标为0的元素的地址赋值给p</span></div><div class="line">p = &amp;a;<span class="comment">//错误， &amp;a是一个指向数组的指针， p是一个指向整型变量的指针</span></div></pre></td></tr></table></figure><ul><li>a除了被用作sizeof运算符的参数的时候，都是被视作指向数组a下标为0的元素的地址</li></ul><hr><p>我们回顾一下最开始的定义，二维数组。</p><p>实际上二维数组的含义是等价于结构体的，也就是说，上面二维数组的定义可以写成：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">  <span class="keyword">int</span> b[<span class="number">5</span>];</div><div class="line">&#125;c[<span class="number">4</span>];</div></pre></td></tr></table></figure><p>其含义可以当成c这个数组拥有4个数组类型的元素，其中每一个元素都是一个拥有5个整型元素的数组，他们在内存里的数据是完全一样的，只是使用方式有点不同。</p><p>这样说来，对于二维数组 <code>c[4][5]</code> ， 应该不难理解 <code>c[2]</code>就是一个数组名，其含义就是里面第三个数组的首地址。</p><p>而对于一个数组，我们可以通过下标来读取其中的元素，</p><p>自然而言就会写成<code>c[2][3]</code> 了。</p><hr><p>下面我们再看</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> c[<span class="number">3</span>][<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> *p;</div><div class="line">p = c；<span class="comment">//错误</span></div></pre></td></tr></table></figure><p>这个语句是非法的，因为c是一个二维数组，就是说<strong>数组的数组</strong>，c 其实等价于几个指向数组的指针， 而p是指向整型变量的指针。</p><p><strong>那么问题就来了</strong></p><p>我们应该怎么样去声明一个<strong>指向数组的指针</strong>呢 ，其实也并不难</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> (*a)[<span class="number">4</span>];</div></pre></td></tr></table></figure><p>这个语句的实际效果就是声明 *a 是一个拥有4个整型元素的数组， 那么a就是一个指向数组的指针了。</p><p><strong>那么怎么样用指针来操作二维数组</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">4</span>];</div><div class="line"><span class="keyword">int</span> (*p)[<span class="number">4</span>];</div><div class="line">p = &amp;a[<span class="number">2</span>];</div><div class="line">*((*p)+<span class="number">1</span>) = <span class="number">0</span>;<span class="comment">//等价</span></div><div class="line">(*p)[<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//等价</span></div><div class="line">a[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">0</span>;<span class="comment">//等价</span></div><div class="line">*(*(a+<span class="number">2</span>)+<span class="number">1</span>) = <span class="number">0</span>; <span class="comment">//等价</span></div></pre></td></tr></table></figure><p>怎么去理解这四种写法呢</p><ol><li>第一种是先声明一个指向数组的指针，然后指向a[2]，然后用指针运算取值来算</li><li>第二种其实和第一种差不多，就是把指针简单地换成了数组的写法（这是一种简写，前面几章应该有提到）</li><li>第三种很明显是直接操作数组下标来操作</li><li>第四种其实和第三种差不多， a 是一个<strong>指向数组的指针</strong>，然后+2运算让他指向a[2]（注意这是一个数组名，前面有说到）,然后再用指针操作指向目标</li></ol><hr><h2 id="3-2-非数组的指针"><a href="#3-2-非数组的指针" class="headerlink" title="3.2 非数组的指针"></a>3.2 非数组的指针</h2><p>这一章主要是学会用，<strong>malloc和free</strong> 给指针开辟内存空间</p><p>有几点值得注意一下</p><ul><li>malloc的原型是void<em> ， 使用的时候一般要经过<em>*强制类型转换</em></em>才能赋给相应类型的指针。</li><li>即使经过了类型转换，但是malloc生成的内存空间大小是以字节计算的，相应的，大小参数要乘以相应的<strong>sizeof(类型)</strong></li><li>当malloc为用于字符串的时候，要注意为 <code>\0</code> 预留一个字节的空间，否则会发生难以预料的错误</li></ul><hr><h2 id="3-3-作为参数的数组声明"><a href="#3-3-作为参数的数组声明" class="headerlink" title="3.3 作为参数的数组声明"></a>3.3 作为参数的数组声明</h2><p>当数组作为参数传递给函数的时候，事实上传递的只是<strong>数组的首地址</strong>， 并不会把数组复制一份传递给函数，那么我们在使用的时候要注意函数可以改变数组的内容，我们也可以利用这一特点，来使得函数返回多个值。</p><hr><p>题外话：刚刚了解了一下main的两个参数，然后写了一段代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> <span class="keyword">const</span> *argv[])</span></span></div><div class="line">&#123;</div><div class="line">  <span class="keyword">if</span> (argc &gt; <span class="number">1</span> &amp;&amp; argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="number">97</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"Good!\n"</span>);</div><div class="line">  &#125; <span class="keyword">else</span>&#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"SB!\n"</span>);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>你猜猜是怎么用的？</p><p>评论猜中了奖励傻币。</p><hr><h2 id="3-4-避免“举隅法”"><a href="#3-4-避免“举隅法”" class="headerlink" title="3.4 避免“举隅法”"></a>3.4 避免“举隅法”</h2><p>“举隅法” 是一种文学修辞上的手段，意思是用含义更宽的词语代替含义相对较窄的词语，或者相反。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *q, *p  = <span class="string">"xyz"</span>;</div><div class="line">q = p;</div></pre></td></tr></table></figure><p>如果你是刚刚接触C语言或者从没接触过得话，这样一看，还以为是把p中的字符串复制给了q，实际上这只存在一个字符串，两个指针都是指向这个字符串的首地址。</p><p>这一章对于学过C指针的人来说的确有点鸡肋。</p><hr><h2 id="3-5-空指针和非空字符串"><a href="#3-5-空指针和非空字符串" class="headerlink" title="3.5 空指针和非空字符串"></a>3.5 空指针和非空字符串</h2><p>当我们定义一个指针的时候，默认赋值为NULL，或者是0.</p><p>或者说，如果当0被转为指针使用的时候，这个指针就<strong>绝对不能被解除引用</strong>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span> *)<span class="number">0</span>;</div><div class="line"><span class="keyword">if</span> (p == (<span class="keyword">char</span> *)<span class="number">0</span>) ... <span class="comment">//合法</span></div><div class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(p, (<span class="keyword">char</span> *) <span class="number">0</span>) == <span class="number">0</span>)... <span class="comment">//非法</span></div></pre></td></tr></table></figure><p>原因是strcmp函数内部会查看指针所对应的内容，就是解引用操作。</p><p>这时就会引起非法访问，因为内存中0的位置是系统核心位置，程序是没有权限访问的。</p><hr><h2 id="3-6-边界计算与不对称边界"><a href="#3-6-边界计算与不对称边界" class="headerlink" title="3.6 边界计算与不对称边界"></a>3.6 边界计算与不对称边界</h2><p>定义一个有10个元素的数组，那么数组的上标和下标是什么呢?</p><p>这对于不同语言有着不同的答案</p><p>对于 Fortran, PL/I, Snobol4 等语言，数组下标缺省是从1开始，而且允许编程者指定其他下标。</p><p>对于Algol， Pascal 等语言， 数组没有缺省的下标，要编程者显式地指定上下界。</p><p>对于标准的Basic语言，缺省下标为0，声明的时候是声明数组的上标。</p><p>对于C语言，声明有10个元素，那么下标就是0-9.</p><p>其实，C语言这种表示方式遵循不对称边界原则，在某些方面有着很大的好处。</p><p>下界是“入界点”，包括在取值范围内，上界是“出界点”，不包括在取值范围内，也就是左闭右开区间。这种数学上看上去并不优美，但是却可以简化我们程序设计。</p><ol><li>取值范围的大小就是上界与下界之差</li><li>如果数组为空，上界等于下界</li><li>即使数组为空，上界也不可能小于下界</li></ol><p>平时我们在使用for循环的时候大概也感受到了一点，如果说起来篇幅可能有点长，那就不展开了。</p><p>为了遵循这种原则，我们使用指针处理缓冲区的时候尽可能让指针指向<strong>第一个未被占用的字符</strong>。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>转眼间又到了12点，今天就写到这里了，剩下的明天再搞吧，有空还要写一写C大学教程里面的输入输出，感觉比较有用。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;《C陷阱与缺陷》，这本书从初学者容易犯错的方面入手，详细解释了C语言的一些坑，个人感觉挺有用的，就总结了一部分内容，以防以后自己会犯错。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="https://blog.zhenly.cn/categories/C/"/>
    
    
      <category term="C" scheme="https://blog.zhenly.cn/tags/C/"/>
    
      <category term="C陷阱与缺陷" scheme="https://blog.zhenly.cn/tags/C%E9%99%B7%E9%98%B1%E4%B8%8E%E7%BC%BA%E9%99%B7/"/>
    
      <category term="读书笔记" scheme="https://blog.zhenly.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>C++ | 类设计者的核查表</title>
    <link href="https://blog.zhenly.cn/2017/07/21/C/"/>
    <id>https://blog.zhenly.cn/2017/07/21/C/</id>
    <published>2017-07-21T12:40:27.000Z</published>
    <updated>2017-07-21T14:02:16.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类设计者的核查表"><a href="#类设计者的核查表" class="headerlink" title="类设计者的核查表"></a>类设计者的核查表</h2><p>(来自《C++沉思录》)<br>C++ 提供了强大的类，使得我们能够以更加优雅的方式写代码。而设计一个类的时候，初学者往往会忘记一些东西而导致BUG源源不断（比如我），所以，初学者就需要一个核查表来时刻提醒自己。他不是任务清单，但是他可以帮助你回忆起可能会忘记的事前。<br><a id="more"></a></p><h3 id="你的类需要一个构造函数吗？"><a href="#你的类需要一个构造函数吗？" class="headerlink" title="你的类需要一个构造函数吗？"></a>你的类需要一个构造函数吗？</h3><ul><li>如果是一个比较复杂的类，那么就需要构造函数来隐藏它们内部工作方式。</li></ul><h3 id="你的数据成员是私有的吗？"><a href="#你的数据成员是私有的吗？" class="headerlink" title="你的数据成员是私有的吗？"></a>你的数据成员是私有的吗？</h3><ul><li>私有的数据成员能够帮助我们更好地维护类里面的数据，有一个统一的管理可能会减少BUG的发生。</li></ul><h3 id="你的类需要一个无参的构造函数吗？"><a href="#你的类需要一个无参的构造函数吗？" class="headerlink" title="你的类需要一个无参的构造函数吗？"></a>你的类需要一个无参的构造函数吗？</h3><ul><li>如果你想声明该类的对象可以不显式地初始化他们，那么就必须显式地写一个无参的构造函数，否则</li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Point p;<span class="comment">//错误，没有初始化</span></div><div class="line">Point pa[<span class="number">1000</span>];  <span class="comment">//错误</span></div></pre></td></tr></table></figure></li></ul><h3 id="是不是每个构造函数初始化所有的数据成员？"><a href="#是不是每个构造函数初始化所有的数据成员？" class="headerlink" title="是不是每个构造函数初始化所有的数据成员？"></a>是不是每个构造函数初始化所有的数据成员？</h3><ul><li>如果某些数据成员没有显式地初始化，那么，他们的行为将不可预料。比如你的类里面有一个指针p，如果你没有显式地初始化，那么他将会是一个不可预料的值，而 p == NULL 这个语句就没有意义了。因为他一开始可能并不是NULL。</li></ul><h3 id="类需要析构函数吗？"><a href="#类需要析构函数吗？" class="headerlink" title="类需要析构函数吗？"></a>类需要析构函数吗？</h3><ul><li>并不是所有的类都需要析构函数，但是如果你用了new的话，通常析构函数需要包含delete。</li></ul><h3 id="类需要一个虚析构函数吗？"><a href="#类需要一个虚析构函数吗？" class="headerlink" title="类需要一个虚析构函数吗？"></a>类需要一个虚析构函数吗？</h3><ul><li><p>不用做基类的类是不需要虚析构函数的，虚函数只有在继承的时候才能发挥作用。而虚析构函数通常是空的。</p></li><li><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">B* bp = <span class="keyword">new</span> D;   <span class="comment">//假设B是D的基类</span></div><div class="line"><span class="keyword">delete</span> bp；  <span class="comment">//这里就出现问题了，如果B没有虚析构函数，那么他将调用错误的析构函数。</span></div></pre></td></tr></table></figure></li></ul><h3 id="你的类需要复制构造函数吗？"><a href="#你的类需要复制构造函数吗？" class="headerlink" title="你的类需要复制构造函数吗？"></a>你的类需要复制构造函数吗？</h3><ul><li><p>如果你的类里面存在着通过new生成的数据，那么如果没有复制构造函数的话，复制类的对象就会复制指针，使得两个类中的数据成员指向同一个地方，那么当这两个对象要被销毁的时候，这个内存就会被释放两次，就会出现BUG。</p></li><li><p>如果不想用户复制类的对象，那么就要把复制构造函数私有化。</p></li></ul><h3 id="你的类需要一个赋值操作符吗？"><a href="#你的类需要一个赋值操作符吗？" class="headerlink" title="你的类需要一个赋值操作符吗？"></a>你的类需要一个赋值操作符吗？</h3><ul><li>理由和上面一样，通常 operator=的返回值是一个 X&amp;, 通常是 *this，保证内建的复制操作符一致。</li></ul><h3 id="你的赋值操作符能正确地将对象赋给对象本身吗？"><a href="#你的赋值操作符能正确地将对象赋给对象本身吗？" class="headerlink" title="你的赋值操作符能正确地将对象赋给对象本身吗？"></a>你的赋值操作符能正确地将对象赋给对象<strong>本身</strong>吗？</h3><ul><li><p>通常我们赋值的时候会用到“先释放旧值，再复制”的原则，但是当复制的对象是本身的时候，那就有可能在还没有复制之前就把对象给销毁了。</p></li><li><p>避免这个问题的最简单的方法就是显式地加以预防。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span>(&amp;s != <span class="keyword">this</span>)&#123;</div><div class="line">  ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>又或者先把旧的值保存起来然后知道复制完成。</p></li></ul><h3 id="你的类需要定义关系操作符吗？"><a href="#你的类需要定义关系操作符吗？" class="headerlink" title="你的类需要定义关系操作符吗？"></a>你的类需要定义关系操作符吗？</h3><ul><li>如果你想创建类型的有序集合或者比较相等的话，那么就需要关系操作符了。</li></ul><h3 id="删除数组时你记住了用delete-吗？"><a href="#删除数组时你记住了用delete-吗？" class="headerlink" title="删除数组时你记住了用delete[]吗？"></a>删除数组时你记住了用delete[]吗？</h3><ul><li>如果new用到了[]那么删除的时候也需要用到[]</li></ul><h3 id="记得在赋值构造函数和赋值操作符的参数类型中加上const了吗？"><a href="#记得在赋值构造函数和赋值操作符的参数类型中加上const了吗？" class="headerlink" title="记得在赋值构造函数和赋值操作符的参数类型中加上const了吗？"></a>记得在赋值构造函数和赋值操作符的参数类型中加上const了吗？</h3><ul><li>如果没有加上const那么可能在复制的时候调用了默认隐式的函数。</li></ul><h3 id="如果函数有引用参数，它们应该是const引用吗？"><a href="#如果函数有引用参数，它们应该是const引用吗？" class="headerlink" title="如果函数有引用参数，它们应该是const引用吗？"></a>如果函数有引用参数，它们应该是const引用吗？</h3><ul><li>对于不允许改变的值，最好加上const，预防bug的出现。</li></ul><h3 id="记得适当地声明成员函数为const的了吗？"><a href="#记得适当地声明成员函数为const的了吗？" class="headerlink" title="记得适当地声明成员函数为const的了吗？"></a>记得适当地声明成员函数为const的了吗？</h3><ul><li>理由同上</li><li>对于一些const的参数，只能调用const的函数，如果不声明为const的话，那么将无法调用（静态函数同理）</li></ul><p>以上就是对C++类的一些经常需要注意的问题的总结</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;类设计者的核查表&quot;&gt;&lt;a href=&quot;#类设计者的核查表&quot; class=&quot;headerlink&quot; title=&quot;类设计者的核查表&quot;&gt;&lt;/a&gt;类设计者的核查表&lt;/h2&gt;&lt;p&gt;(来自《C++沉思录》)&lt;br&gt;C++ 提供了强大的类，使得我们能够以更加优雅的方式写代码。而设计一个类的时候，初学者往往会忘记一些东西而导致BUG源源不断（比如我），所以，初学者就需要一个核查表来时刻提醒自己。他不是任务清单，但是他可以帮助你回忆起可能会忘记的事前。&lt;br&gt;
    
    </summary>
    
      <category term="Cpp" scheme="https://blog.zhenly.cn/categories/Cpp/"/>
    
    
      <category term="读书笔记" scheme="https://blog.zhenly.cn/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="Cpp" scheme="https://blog.zhenly.cn/tags/Cpp/"/>
    
      <category term="C++沉思录" scheme="https://blog.zhenly.cn/tags/C-%E6%B2%89%E6%80%9D%E5%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>C | 用scanf处理带有多个空格的输入</title>
    <link href="https://blog.zhenly.cn/2017/07/21/c-scanf/"/>
    <id>https://blog.zhenly.cn/2017/07/21/c-scanf/</id>
    <published>2017-07-21T12:15:27.000Z</published>
    <updated>2017-07-21T13:31:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚入门C语言的时候，初学者一开始学习输入输出难免会遇到各种奇怪的输入，所以就来学习一下scanf是怎么做到处理含有空格的输入的。</p><a id="more"></a><h2 id="1-Scanf的基本用法"><a href="#1-Scanf的基本用法" class="headerlink" title="1. Scanf的基本用法"></a>1. Scanf的基本用法</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">scanf</span> <span class="params">( <span class="keyword">const</span> <span class="keyword">char</span> * format, ... )</span></span>;</div></pre></td></tr></table></figure><p><strong>首先让我们来了解一下scanf函数的基本用法。</strong></p><p>scanf是C语言标准输入流（stdio）里面提供的一个输入数据的函数，对于不同的数据类型可以用用不同的格式来读取，然后储存在变量之中。</p><p>下表是各种数据类型用scanf时的标识</p><blockquote><table><thead><tr><th>specifier</th><th style="text-align:right">Description</th><th style="text-align:center">Characters extracted</th></tr></thead><tbody><tr><td>i</td><td style="text-align:right">Integer</td><td style="text-align:center">Any number of digits, optionally preceded by a sign (+ or -).Decimal digits assumed by default (0-9), but a 0 prefix introduces octal digits (0-7), and 0x hexadecimal digits (0-f).Signed argument.</td></tr><tr><td>d or u</td><td style="text-align:right">Decimal integer</td><td style="text-align:center">Any number of decimal digits (0-9), optionally preceded by a sign (+ or -).d is for a signed argument, and u for an unsigned.</td></tr><tr><td>o</td><td style="text-align:right">Octal integer</td><td style="text-align:center">Any number of octal digits (0-7), optionally preceded by a sign (+ or -).Unsigned argument.</td></tr><tr><td>x</td><td style="text-align:right">Hexadecimal integer</td><td style="text-align:center">Any number of hexadecimal digits (0-9, a-f, A-F), optionally preceded by 0x or 0X, and all optionally preceded by a sign (+ or -).Unsigned argument.</td></tr><tr><td>f, e, g    ,a</td><td style="text-align:right">Floating point number</td><td style="text-align:center">A series of decimal digits, optionally containing a decimal point, optionally preceeded by a sign (+ or -) and optionally followed by the e or E character and a decimal integer (or some of the other sequences supported by strtod).Implementations complying with C99 also support hexadecimal floating-point format when preceded by 0x or 0X.</td></tr><tr><td>c</td><td style="text-align:right">Character    The next character.</td><td style="text-align:center">If a width other than 1 is specified, the function reads exactly width characters and stores them in the successive locations of the array passed as argument. No null character is appended at the end.</td></tr><tr><td>s</td><td style="text-align:right">String of characters</td><td style="text-align:center">Any number of non-whitespace characters, stopping at the first whitespace character found. A terminating null character is automatically added at the end of the stored sequence.</td></tr><tr><td>p</td><td style="text-align:right">Pointer address</td><td style="text-align:center">A sequence of characters representing a pointer. The particular format used depends on the system and library implementation, but it is the same as the one used to format %p in fprintf.</td></tr><tr><td>[characters]</td><td style="text-align:right">Scanset</td><td style="text-align:center">Any number of the characters specified between the brackets.A dash (-) that is not the first character may produce non-portable behavior in some library implementations.</td></tr><tr><td>[^characters]</td><td style="text-align:right">Negated scanset</td><td style="text-align:center">Any number of characters none of them specified as characters between the brackets.</td></tr><tr><td>n</td><td style="text-align:right">Count</td><td style="text-align:center">No input is consumed.The number of characters read so far from stdin is stored in the pointed location.</td></tr><tr><td>%</td><td style="text-align:right">%</td><td style="text-align:center">A % followed by another % matches a single %.</td></tr></tbody></table><p>引用自<a href="http://www.cplusplus.com/reference/cstdio/scanf/" target="_blank" rel="external">http://www.cplusplus.com/reference/cstdio/scanf/</a></p></blockquote><p>用上表的各种格式可以输入各种数据格式到程序中进行处理<br><strong>但是，在遇到空格的时候，scanf明显遇到了问题</strong></p><hr><h2 id="2-输入带有空格的字符串"><a href="#2-输入带有空格的字符串" class="headerlink" title="2. 输入带有空格的字符串"></a>2. 输入带有空格的字符串</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line"><span class="keyword">char</span> str[<span class="number">1000</span>];</div><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;str);</div><div class="line"><span class="built_in">printf</span>(<span class="string">"\n%s\n"</span>,str);</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>运行上述一段代码，输入<strong>HelloWorld</strong>，我们会得到这样一个结果：</p><p><img src="http://img.blog.csdn.net/20160928224646524" alt="运行结果1"></p><p> 这一次，我们来输入<strong>Hello World</strong>，会是怎么样的呢？</p><p> <img src="http://img.blog.csdn.net/20160928224747580" alt="运行结果2"></p><p><strong><em>这是为什么呢？</em></strong></p><p>原来，在</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,&amp;str);</div></pre></td></tr></table></figure><p>中，scanf函数遇到  <code>TAB</code> $\bigcup$ <code>空格</code>  $\bigcup$ <code>\n</code> 的时候视为输入结束。<br>那么，难道scanf就不可以用来输入带有空格的字符串吗？<a href="我们还可以利用其它的函数来读取，比如，用gets（）读取字符串，遇\n结束，会把\n读取，转换为\0，输入流中不再有\n。">^other</a>答案当然是否定的，我们可以改一下数据类型，像下面这样：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">scanf</span>( <span class="string">"%[^\n]"</span>,str)；</div></pre></td></tr></table></figure><p>修改代码后，重新执行一次看看：<br><img src="http://img.blog.csdn.net/20160928225635583" alt="这里写图片描述"></p><p>完美运行！</p><p>这是为什么呢？</p><p><strong>其实 <code>%[^\n]</code> 的意思就是“遇到换行才结束”，那样，在我们输入空格的时候，scanf就不用自动终止读取了，直到我们按下回车换行。</strong></p><p>同样的道理<code>%[^ ]</code> 的意思就是“遇到空格就结束”，那样和我们一开始的程序的功能是一模一样的，以此类推，我们可以得到scanf函数的扩展，利用这个功能，我们可以对字符串进行更快捷更方便的处理啦！O(∩_∩)O</p><hr><h2 id="3-处理未知数量的多个数据"><a href="#3-处理未知数量的多个数据" class="headerlink" title="3.处理未知数量的多个数据"></a>3.处理未知数量的多个数据</h2><p>当我们要用scanf输入一大串，不知道多少的字符的时候，就要用到EOF文件末[^eof]<br>代码如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a = <span class="number">0</span>, sum = <span class="number">0</span>;</div><div class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a) != EOF) &#123;</div><div class="line">  sum += a;<span class="comment">//这里可以把数据存入数组，方便接下来的处理</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这里运用到了While循环语句，一直读取输入字符串，以遇到  <code>TAB</code>  $\bigcup$ <code>空格</code> $\bigcup$ <code>\n</code> 的时候视为输入一个数据结束，然后一直输入数据，直到读取到EOF文件末。</p><hr><p>当然还有其他的方法，就是利用<code>&lt;string.h&gt;</code>里面的strtok函数[^strtok]，缺点就是异常复杂，但是优点就是可以用各种字符来分割输入的字符串</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</div><div class="line"> <span class="keyword">char</span> num[<span class="number">100000</span>];<span class="comment">//定义字符串</span></div><div class="line"> <span class="keyword">int</span> temp;<span class="comment">//临时储存变量，也可以换成char类型</span></div><div class="line"> <span class="comment">//gets(num);</span></div><div class="line"> <span class="built_in">scanf</span>( <span class="string">"%[^\n]"</span>, num );<span class="comment">//忽略空格停止，一直扫描字符串至换行</span></div><div class="line"> <span class="keyword">char</span>* token = strtok(num, <span class="string">" "</span>);<span class="comment">//这里是以空格作为分割符</span></div><div class="line">temp=atoi(token);</div><div class="line"> <span class="keyword">while</span>( token != <span class="literal">NULL</span> )</div><div class="line">      &#123;</div><div class="line">      temp=atoi(token);</div><div class="line"><span class="comment">//这里可以对 进行处理</span></div><div class="line"><span class="comment">//也可以传进数组里</span></div><div class="line">        token = strtok( <span class="literal">NULL</span>, <span class="string">" "</span>);</div><div class="line">      &#125;</div><div class="line"><span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过多种示例，我们了解到了scanf函数对多个空格的字符串的多种处理方法，也加深了我对这一函数的认识</p><hr><p>感谢阅读，初次写博客错误在所难免，如有不当之处，希望得到大家的指正，谢谢！</p><p>[^eof]: </p><p>Scanf and EOF (End Of F文件末)自己在本地测试时，也能输入EOF。Windows中，先输入数据回车，按下<code>Ctrl+Z</code>，命令行里出现<code>^z</code>，回车，就会写入EOF。Linux中，先输入数据再回车，按下<code>Ctrl+d</code>，就会写入EOF。</p><p>参考：<a href="http://www.cplusplus.com/reference/cstdio/gets/" target="_blank" rel="external">http://www.cplusplus.com/reference/cstdio/gets/</a></p><p>[^strtok]: </p><p>strtok<br>定义函数：char <em> strtok(char </em>s, const char *delim);<br>函数说明：strtok()用来将字符串分割成一个个片段。参数s 指向欲分割的字符串，参数delim 则为分割字符串，当strtok()在参数s 的字符串中发现到参数delim 的分割字符时则会将该字符改为\0 字符。在第一次调用时，strtok()必需给予参数s 字符串，往后的调用则将参数s 设置成NULL。每次调用成功则返回下一个分割后的字符串指针。<br>返回值：返回下一个分割后的字符串指针，如果已无从分割则返回NULL。<br>参考：<a href="http://www.cplusplus.com/reference/cstring/strtok/" target="_blank" rel="external">http://www.cplusplus.com/reference/cstring/strtok/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚刚入门C语言的时候，初学者一开始学习输入输出难免会遇到各种奇怪的输入，所以就来学习一下scanf是怎么做到处理含有空格的输入的。&lt;/p&gt;
    
    </summary>
    
      <category term="C" scheme="https://blog.zhenly.cn/categories/C/"/>
    
    
      <category term="C" scheme="https://blog.zhenly.cn/tags/C/"/>
    
  </entry>
  
</feed>
